
FinchBit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d70  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00002d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a0  2000000c  00002d7c  0002000c  2**2
                  ALLOC
  3 .stack        00000404  200002ac  0000301c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00046d6c  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d65  00000000  00000000  00066df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000077bf  00000000  00000000  0006cb5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000808  00000000  00000000  0007431d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000948  00000000  00000000  00074b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009e38  00000000  00000000  0007546d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000144af  00000000  00000000  0007f2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071a92  00000000  00000000  00093754  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001298  00000000  00000000  001051e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 06 00 20 ed 29 00 00 e9 29 00 00 e9 29 00 00     ... .)...)...)..
	...
      2c:	e9 29 00 00 00 00 00 00 00 00 00 00 e9 29 00 00     .)...........)..
      3c:	e9 29 00 00 e9 29 00 00 e9 29 00 00 e9 29 00 00     .)...)...)...)..
      4c:	e9 29 00 00 a1 15 00 00 e9 29 00 00 e9 29 00 00     .).......)...)..
      5c:	00 00 00 00 e9 29 00 00 25 15 00 00 35 15 00 00     .....)..%...5...
      6c:	45 15 00 00 f5 0a 00 00 9d 0e 00 00 ad 0e 00 00     E...............
      7c:	ed 00 00 00 e9 29 00 00 e9 29 00 00 e9 29 00 00     .....)...)...)..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000000c 	.word	0x2000000c
      ac:	00000000 	.word	0x00000000
      b0:	00002d70 	.word	0x00002d70

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000010 	.word	0x20000010
      e0:	00002d70 	.word	0x00002d70
      e4:	00002d70 	.word	0x00002d70
      e8:	00000000 	.word	0x00000000

000000ec <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
      ec:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
      ee:	4b2e      	ldr	r3, [pc, #184]	; (1a8 <ADC_Handler+0xbc>)
      f0:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
      f2:	6823      	ldr	r3, [r4, #0]
      f4:	7e1d      	ldrb	r5, [r3, #24]
      f6:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
      f8:	07ea      	lsls	r2, r5, #31
      fa:	d505      	bpl.n	108 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
      fc:	7ee2      	ldrb	r2, [r4, #27]
      fe:	07d2      	lsls	r2, r2, #31
     100:	d502      	bpl.n	108 <ADC_Handler+0x1c>
     102:	7ea2      	ldrb	r2, [r4, #26]
     104:	07d2      	lsls	r2, r2, #31
     106:	d416      	bmi.n	136 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
     108:	076b      	lsls	r3, r5, #29
     10a:	d508      	bpl.n	11e <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     10c:	2304      	movs	r3, #4
     10e:	6822      	ldr	r2, [r4, #0]
     110:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     112:	7ee3      	ldrb	r3, [r4, #27]
     114:	079b      	lsls	r3, r3, #30
     116:	d502      	bpl.n	11e <ADC_Handler+0x32>
     118:	7ea3      	ldrb	r3, [r4, #26]
     11a:	079b      	lsls	r3, r3, #30
     11c:	d43c      	bmi.n	198 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
     11e:	07ab      	lsls	r3, r5, #30
     120:	d508      	bpl.n	134 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     122:	2302      	movs	r3, #2
     124:	6822      	ldr	r2, [r4, #0]
     126:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     128:	7ee3      	ldrb	r3, [r4, #27]
     12a:	075b      	lsls	r3, r3, #29
     12c:	d502      	bpl.n	134 <ADC_Handler+0x48>
     12e:	7ea3      	ldrb	r3, [r4, #26]
     130:	075b      	lsls	r3, r3, #29
     132:	d435      	bmi.n	1a0 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
     134:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     136:	2201      	movs	r2, #1
     138:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     13a:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     13c:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
     13e:	b25b      	sxtb	r3, r3
     140:	2b00      	cmp	r3, #0
     142:	dbfb      	blt.n	13c <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
     144:	6961      	ldr	r1, [r4, #20]
     146:	1c8b      	adds	r3, r1, #2
     148:	6163      	str	r3, [r4, #20]
     14a:	8b53      	ldrh	r3, [r2, #26]
     14c:	b29b      	uxth	r3, r3
     14e:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
     150:	8b23      	ldrh	r3, [r4, #24]
     152:	3b01      	subs	r3, #1
     154:	b29b      	uxth	r3, r3
     156:	8323      	strh	r3, [r4, #24]
     158:	2b00      	cmp	r3, #0
     15a:	d011      	beq.n	180 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
     15c:	7f63      	ldrb	r3, [r4, #29]
     15e:	2b00      	cmp	r3, #0
     160:	d0d2      	beq.n	108 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     162:	6822      	ldr	r2, [r4, #0]
     164:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     166:	b25b      	sxtb	r3, r3
     168:	2b00      	cmp	r3, #0
     16a:	dbfb      	blt.n	164 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     16c:	7b13      	ldrb	r3, [r2, #12]
     16e:	2102      	movs	r1, #2
     170:	430b      	orrs	r3, r1
     172:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     174:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     176:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     178:	b25b      	sxtb	r3, r3
     17a:	2b00      	cmp	r3, #0
     17c:	dbfb      	blt.n	176 <ADC_Handler+0x8a>
     17e:	e7c3      	b.n	108 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
     180:	7f23      	ldrb	r3, [r4, #28]
     182:	2b05      	cmp	r3, #5
     184:	d1c0      	bne.n	108 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
     186:	2300      	movs	r3, #0
     188:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     18a:	3301      	adds	r3, #1
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     190:	0020      	movs	r0, r4
     192:	68a3      	ldr	r3, [r4, #8]
     194:	4798      	blx	r3
     196:	e7b7      	b.n	108 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     198:	0020      	movs	r0, r4
     19a:	68e3      	ldr	r3, [r4, #12]
     19c:	4798      	blx	r3
     19e:	e7be      	b.n	11e <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1a0:	6923      	ldr	r3, [r4, #16]
     1a2:	0020      	movs	r0, r4
     1a4:	4798      	blx	r3
}
     1a6:	e7c5      	b.n	134 <ADC_Handler+0x48>
     1a8:	200000c8 	.word	0x200000c8

000001ac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     1ac:	4a04      	ldr	r2, [pc, #16]	; (1c0 <_extint_enable+0x14>)
     1ae:	7813      	ldrb	r3, [r2, #0]
     1b0:	2102      	movs	r1, #2
     1b2:	430b      	orrs	r3, r1
     1b4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1b6:	7853      	ldrb	r3, [r2, #1]
     1b8:	b25b      	sxtb	r3, r3
     1ba:	2b00      	cmp	r3, #0
     1bc:	dbfb      	blt.n	1b6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     1be:	4770      	bx	lr
     1c0:	40001800 	.word	0x40001800

000001c4 <_system_extint_init>:
{
     1c4:	b500      	push	{lr}
     1c6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1c8:	4a12      	ldr	r2, [pc, #72]	; (214 <_system_extint_init+0x50>)
     1ca:	6993      	ldr	r3, [r2, #24]
     1cc:	2140      	movs	r1, #64	; 0x40
     1ce:	430b      	orrs	r3, r1
     1d0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1d2:	a901      	add	r1, sp, #4
     1d4:	2300      	movs	r3, #0
     1d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     1d8:	2005      	movs	r0, #5
     1da:	4b0f      	ldr	r3, [pc, #60]	; (218 <_system_extint_init+0x54>)
     1dc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     1de:	2005      	movs	r0, #5
     1e0:	4b0e      	ldr	r3, [pc, #56]	; (21c <_system_extint_init+0x58>)
     1e2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     1e4:	4a0e      	ldr	r2, [pc, #56]	; (220 <_system_extint_init+0x5c>)
     1e6:	7813      	ldrb	r3, [r2, #0]
     1e8:	2101      	movs	r1, #1
     1ea:	430b      	orrs	r3, r1
     1ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1ee:	7853      	ldrb	r3, [r2, #1]
     1f0:	b25b      	sxtb	r3, r3
     1f2:	2b00      	cmp	r3, #0
     1f4:	dbfb      	blt.n	1ee <_system_extint_init+0x2a>
     1f6:	4b0b      	ldr	r3, [pc, #44]	; (224 <_system_extint_init+0x60>)
     1f8:	0019      	movs	r1, r3
     1fa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     1fc:	2200      	movs	r2, #0
     1fe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     200:	4299      	cmp	r1, r3
     202:	d1fc      	bne.n	1fe <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     204:	2210      	movs	r2, #16
     206:	4b08      	ldr	r3, [pc, #32]	; (228 <_system_extint_init+0x64>)
     208:	601a      	str	r2, [r3, #0]
	_extint_enable();
     20a:	4b08      	ldr	r3, [pc, #32]	; (22c <_system_extint_init+0x68>)
     20c:	4798      	blx	r3
}
     20e:	b003      	add	sp, #12
     210:	bd00      	pop	{pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	40000400 	.word	0x40000400
     218:	0000284d 	.word	0x0000284d
     21c:	000027c1 	.word	0x000027c1
     220:	40001800 	.word	0x40001800
     224:	200000cc 	.word	0x200000cc
     228:	e000e100 	.word	0xe000e100
     22c:	000001ad 	.word	0x000001ad

00000230 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     230:	2300      	movs	r3, #0
     232:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     234:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     236:	2201      	movs	r2, #1
     238:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     23a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     23c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     23e:	3302      	adds	r3, #2
     240:	72c3      	strb	r3, [r0, #11]
}
     242:	4770      	bx	lr

00000244 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     244:	b5f0      	push	{r4, r5, r6, r7, lr}
     246:	b083      	sub	sp, #12
     248:	0005      	movs	r5, r0
     24a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     24c:	a901      	add	r1, sp, #4
     24e:	2300      	movs	r3, #0
     250:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     252:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     254:	7923      	ldrb	r3, [r4, #4]
     256:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     258:	7a23      	ldrb	r3, [r4, #8]
     25a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     25c:	7820      	ldrb	r0, [r4, #0]
     25e:	4b15      	ldr	r3, [pc, #84]	; (2b4 <extint_chan_set_config+0x70>)
     260:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     262:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     264:	2d1f      	cmp	r5, #31
     266:	d800      	bhi.n	26a <extint_chan_set_config+0x26>
		return eics[eic_index];
     268:	4813      	ldr	r0, [pc, #76]	; (2b8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     26a:	2207      	movs	r2, #7
     26c:	402a      	ands	r2, r5
     26e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     270:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     272:	7aa3      	ldrb	r3, [r4, #10]
     274:	2b00      	cmp	r3, #0
     276:	d001      	beq.n	27c <extint_chan_set_config+0x38>
     278:	2308      	movs	r3, #8
     27a:	431f      	orrs	r7, r3
     27c:	08eb      	lsrs	r3, r5, #3
     27e:	009b      	lsls	r3, r3, #2
     280:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     282:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     284:	260f      	movs	r6, #15
     286:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     288:	43b1      	bics	r1, r6
			(new_config << config_pos);
     28a:	4097      	lsls	r7, r2
     28c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     28e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     290:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     292:	7a63      	ldrb	r3, [r4, #9]
     294:	2b00      	cmp	r3, #0
     296:	d106      	bne.n	2a6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     298:	6943      	ldr	r3, [r0, #20]
     29a:	2201      	movs	r2, #1
     29c:	40aa      	lsls	r2, r5
     29e:	4393      	bics	r3, r2
     2a0:	6143      	str	r3, [r0, #20]
	}
}
     2a2:	b003      	add	sp, #12
     2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     2a6:	6942      	ldr	r2, [r0, #20]
     2a8:	2301      	movs	r3, #1
     2aa:	40ab      	lsls	r3, r5
     2ac:	4313      	orrs	r3, r2
     2ae:	6143      	str	r3, [r0, #20]
     2b0:	e7f7      	b.n	2a2 <extint_chan_set_config+0x5e>
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00002945 	.word	0x00002945
     2b8:	40001800 	.word	0x40001800

000002bc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     2be:	46de      	mov	lr, fp
     2c0:	4657      	mov	r7, sl
     2c2:	464e      	mov	r6, r9
     2c4:	4645      	mov	r5, r8
     2c6:	b5e0      	push	{r5, r6, r7, lr}
     2c8:	b087      	sub	sp, #28
     2ca:	4680      	mov	r8, r0
     2cc:	9104      	str	r1, [sp, #16]
     2ce:	0016      	movs	r6, r2
     2d0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     2d2:	2200      	movs	r2, #0
     2d4:	2300      	movs	r3, #0
     2d6:	2100      	movs	r1, #0
     2d8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     2da:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     2dc:	2001      	movs	r0, #1
     2de:	0021      	movs	r1, r4
     2e0:	9600      	str	r6, [sp, #0]
     2e2:	9701      	str	r7, [sp, #4]
     2e4:	465c      	mov	r4, fp
     2e6:	9403      	str	r4, [sp, #12]
     2e8:	4644      	mov	r4, r8
     2ea:	9405      	str	r4, [sp, #20]
     2ec:	e013      	b.n	316 <long_division+0x5a>
     2ee:	2420      	movs	r4, #32
     2f0:	1a64      	subs	r4, r4, r1
     2f2:	0005      	movs	r5, r0
     2f4:	40e5      	lsrs	r5, r4
     2f6:	46a8      	mov	r8, r5
     2f8:	e014      	b.n	324 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     2fa:	9c00      	ldr	r4, [sp, #0]
     2fc:	9d01      	ldr	r5, [sp, #4]
     2fe:	1b12      	subs	r2, r2, r4
     300:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     302:	465c      	mov	r4, fp
     304:	464d      	mov	r5, r9
     306:	432c      	orrs	r4, r5
     308:	46a3      	mov	fp, r4
     30a:	9c03      	ldr	r4, [sp, #12]
     30c:	4645      	mov	r5, r8
     30e:	432c      	orrs	r4, r5
     310:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     312:	3901      	subs	r1, #1
     314:	d325      	bcc.n	362 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     316:	2420      	movs	r4, #32
     318:	4264      	negs	r4, r4
     31a:	190c      	adds	r4, r1, r4
     31c:	d4e7      	bmi.n	2ee <long_division+0x32>
     31e:	0005      	movs	r5, r0
     320:	40a5      	lsls	r5, r4
     322:	46a8      	mov	r8, r5
     324:	0004      	movs	r4, r0
     326:	408c      	lsls	r4, r1
     328:	46a1      	mov	r9, r4
		r = r << 1;
     32a:	1892      	adds	r2, r2, r2
     32c:	415b      	adcs	r3, r3
     32e:	0014      	movs	r4, r2
     330:	001d      	movs	r5, r3
		if (n & bit_shift) {
     332:	9e05      	ldr	r6, [sp, #20]
     334:	464f      	mov	r7, r9
     336:	403e      	ands	r6, r7
     338:	46b4      	mov	ip, r6
     33a:	9e04      	ldr	r6, [sp, #16]
     33c:	4647      	mov	r7, r8
     33e:	403e      	ands	r6, r7
     340:	46b2      	mov	sl, r6
     342:	4666      	mov	r6, ip
     344:	4657      	mov	r7, sl
     346:	433e      	orrs	r6, r7
     348:	d003      	beq.n	352 <long_division+0x96>
			r |= 0x01;
     34a:	0006      	movs	r6, r0
     34c:	4326      	orrs	r6, r4
     34e:	0032      	movs	r2, r6
     350:	002b      	movs	r3, r5
		if (r >= d) {
     352:	9c00      	ldr	r4, [sp, #0]
     354:	9d01      	ldr	r5, [sp, #4]
     356:	429d      	cmp	r5, r3
     358:	d8db      	bhi.n	312 <long_division+0x56>
     35a:	d1ce      	bne.n	2fa <long_division+0x3e>
     35c:	4294      	cmp	r4, r2
     35e:	d8d8      	bhi.n	312 <long_division+0x56>
     360:	e7cb      	b.n	2fa <long_division+0x3e>
     362:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     364:	4658      	mov	r0, fp
     366:	0019      	movs	r1, r3
     368:	b007      	add	sp, #28
     36a:	bc3c      	pop	{r2, r3, r4, r5}
     36c:	4690      	mov	r8, r2
     36e:	4699      	mov	r9, r3
     370:	46a2      	mov	sl, r4
     372:	46ab      	mov	fp, r5
     374:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000376 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     376:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     378:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     37a:	2340      	movs	r3, #64	; 0x40
     37c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     37e:	4281      	cmp	r1, r0
     380:	d202      	bcs.n	388 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     382:	0018      	movs	r0, r3
     384:	bd10      	pop	{r4, pc}
		baud_calculated++;
     386:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     388:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     38a:	1c63      	adds	r3, r4, #1
     38c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     38e:	4288      	cmp	r0, r1
     390:	d9f9      	bls.n	386 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     392:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     394:	2cff      	cmp	r4, #255	; 0xff
     396:	d8f4      	bhi.n	382 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     398:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     39a:	2300      	movs	r3, #0
     39c:	e7f1      	b.n	382 <_sercom_get_sync_baud_val+0xc>
	...

000003a0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3a2:	b083      	sub	sp, #12
     3a4:	000f      	movs	r7, r1
     3a6:	0016      	movs	r6, r2
     3a8:	aa08      	add	r2, sp, #32
     3aa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     3ac:	0004      	movs	r4, r0
     3ae:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3b0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     3b2:	42bc      	cmp	r4, r7
     3b4:	d902      	bls.n	3bc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     3b6:	0010      	movs	r0, r2
     3b8:	b003      	add	sp, #12
     3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     3bc:	2b00      	cmp	r3, #0
     3be:	d114      	bne.n	3ea <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     3c0:	0002      	movs	r2, r0
     3c2:	0008      	movs	r0, r1
     3c4:	2100      	movs	r1, #0
     3c6:	4c19      	ldr	r4, [pc, #100]	; (42c <STACK_SIZE+0x2c>)
     3c8:	47a0      	blx	r4
     3ca:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     3cc:	003a      	movs	r2, r7
     3ce:	2300      	movs	r3, #0
     3d0:	2000      	movs	r0, #0
     3d2:	4c17      	ldr	r4, [pc, #92]	; (430 <STACK_SIZE+0x30>)
     3d4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     3d6:	2200      	movs	r2, #0
     3d8:	2301      	movs	r3, #1
     3da:	1a12      	subs	r2, r2, r0
     3dc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     3de:	0c12      	lsrs	r2, r2, #16
     3e0:	041b      	lsls	r3, r3, #16
     3e2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     3e4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     3e6:	2200      	movs	r2, #0
     3e8:	e7e5      	b.n	3b6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     3ea:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     3ec:	2b01      	cmp	r3, #1
     3ee:	d1f9      	bne.n	3e4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     3f0:	000a      	movs	r2, r1
     3f2:	2300      	movs	r3, #0
     3f4:	2100      	movs	r1, #0
     3f6:	4c0d      	ldr	r4, [pc, #52]	; (42c <STACK_SIZE+0x2c>)
     3f8:	47a0      	blx	r4
     3fa:	0002      	movs	r2, r0
     3fc:	000b      	movs	r3, r1
     3fe:	9200      	str	r2, [sp, #0]
     400:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     402:	0038      	movs	r0, r7
     404:	2100      	movs	r1, #0
     406:	4c0a      	ldr	r4, [pc, #40]	; (430 <STACK_SIZE+0x30>)
     408:	47a0      	blx	r4
     40a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     40c:	2380      	movs	r3, #128	; 0x80
     40e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     410:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     412:	4298      	cmp	r0, r3
     414:	d8cf      	bhi.n	3b6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     416:	0f79      	lsrs	r1, r7, #29
     418:	00f8      	lsls	r0, r7, #3
     41a:	9a00      	ldr	r2, [sp, #0]
     41c:	9b01      	ldr	r3, [sp, #4]
     41e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     420:	00ea      	lsls	r2, r5, #3
     422:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     424:	b2d2      	uxtb	r2, r2
     426:	0352      	lsls	r2, r2, #13
     428:	432a      	orrs	r2, r5
     42a:	e7db      	b.n	3e4 <_sercom_get_async_baud_val+0x44>
     42c:	00002c29 	.word	0x00002c29
     430:	000002bd 	.word	0x000002bd

00000434 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     434:	b510      	push	{r4, lr}
     436:	b082      	sub	sp, #8
     438:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <sercom_set_gclk_generator+0x40>)
     43c:	781b      	ldrb	r3, [r3, #0]
     43e:	2b00      	cmp	r3, #0
     440:	d007      	beq.n	452 <sercom_set_gclk_generator+0x1e>
     442:	2900      	cmp	r1, #0
     444:	d105      	bne.n	452 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     446:	4b0b      	ldr	r3, [pc, #44]	; (474 <sercom_set_gclk_generator+0x40>)
     448:	785b      	ldrb	r3, [r3, #1]
     44a:	4283      	cmp	r3, r0
     44c:	d010      	beq.n	470 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     44e:	201d      	movs	r0, #29
     450:	e00c      	b.n	46c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     452:	a901      	add	r1, sp, #4
     454:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     456:	200d      	movs	r0, #13
     458:	4b07      	ldr	r3, [pc, #28]	; (478 <sercom_set_gclk_generator+0x44>)
     45a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     45c:	200d      	movs	r0, #13
     45e:	4b07      	ldr	r3, [pc, #28]	; (47c <sercom_set_gclk_generator+0x48>)
     460:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     462:	4b04      	ldr	r3, [pc, #16]	; (474 <sercom_set_gclk_generator+0x40>)
     464:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     466:	2201      	movs	r2, #1
     468:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     46a:	2000      	movs	r0, #0
}
     46c:	b002      	add	sp, #8
     46e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     470:	2000      	movs	r0, #0
     472:	e7fb      	b.n	46c <sercom_set_gclk_generator+0x38>
     474:	20000028 	.word	0x20000028
     478:	0000284d 	.word	0x0000284d
     47c:	000027c1 	.word	0x000027c1

00000480 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     480:	4b20      	ldr	r3, [pc, #128]	; (504 <_sercom_get_default_pad+0x84>)
     482:	4298      	cmp	r0, r3
     484:	d017      	beq.n	4b6 <_sercom_get_default_pad+0x36>
     486:	4b20      	ldr	r3, [pc, #128]	; (508 <_sercom_get_default_pad+0x88>)
     488:	4298      	cmp	r0, r3
     48a:	d024      	beq.n	4d6 <_sercom_get_default_pad+0x56>
     48c:	4b1f      	ldr	r3, [pc, #124]	; (50c <_sercom_get_default_pad+0x8c>)
     48e:	4298      	cmp	r0, r3
     490:	d001      	beq.n	496 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     492:	2000      	movs	r0, #0
}
     494:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     496:	2901      	cmp	r1, #1
     498:	d007      	beq.n	4aa <_sercom_get_default_pad+0x2a>
     49a:	2900      	cmp	r1, #0
     49c:	d02b      	beq.n	4f6 <_sercom_get_default_pad+0x76>
     49e:	2902      	cmp	r1, #2
     4a0:	d005      	beq.n	4ae <_sercom_get_default_pad+0x2e>
     4a2:	2903      	cmp	r1, #3
     4a4:	d005      	beq.n	4b2 <_sercom_get_default_pad+0x32>
	return 0;
     4a6:	2000      	movs	r0, #0
     4a8:	e7f4      	b.n	494 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4aa:	4819      	ldr	r0, [pc, #100]	; (510 <_sercom_get_default_pad+0x90>)
     4ac:	e7f2      	b.n	494 <_sercom_get_default_pad+0x14>
     4ae:	4819      	ldr	r0, [pc, #100]	; (514 <_sercom_get_default_pad+0x94>)
     4b0:	e7f0      	b.n	494 <_sercom_get_default_pad+0x14>
     4b2:	4819      	ldr	r0, [pc, #100]	; (518 <_sercom_get_default_pad+0x98>)
     4b4:	e7ee      	b.n	494 <_sercom_get_default_pad+0x14>
     4b6:	2901      	cmp	r1, #1
     4b8:	d007      	beq.n	4ca <_sercom_get_default_pad+0x4a>
     4ba:	2900      	cmp	r1, #0
     4bc:	d01d      	beq.n	4fa <_sercom_get_default_pad+0x7a>
     4be:	2902      	cmp	r1, #2
     4c0:	d005      	beq.n	4ce <_sercom_get_default_pad+0x4e>
     4c2:	2903      	cmp	r1, #3
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0x52>
	return 0;
     4c6:	2000      	movs	r0, #0
     4c8:	e7e4      	b.n	494 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ca:	4814      	ldr	r0, [pc, #80]	; (51c <_sercom_get_default_pad+0x9c>)
     4cc:	e7e2      	b.n	494 <_sercom_get_default_pad+0x14>
     4ce:	4814      	ldr	r0, [pc, #80]	; (520 <_sercom_get_default_pad+0xa0>)
     4d0:	e7e0      	b.n	494 <_sercom_get_default_pad+0x14>
     4d2:	4814      	ldr	r0, [pc, #80]	; (524 <_sercom_get_default_pad+0xa4>)
     4d4:	e7de      	b.n	494 <_sercom_get_default_pad+0x14>
     4d6:	2901      	cmp	r1, #1
     4d8:	d007      	beq.n	4ea <_sercom_get_default_pad+0x6a>
     4da:	2900      	cmp	r1, #0
     4dc:	d00f      	beq.n	4fe <_sercom_get_default_pad+0x7e>
     4de:	2902      	cmp	r1, #2
     4e0:	d005      	beq.n	4ee <_sercom_get_default_pad+0x6e>
     4e2:	2903      	cmp	r1, #3
     4e4:	d005      	beq.n	4f2 <_sercom_get_default_pad+0x72>
	return 0;
     4e6:	2000      	movs	r0, #0
     4e8:	e7d4      	b.n	494 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ea:	480f      	ldr	r0, [pc, #60]	; (528 <_sercom_get_default_pad+0xa8>)
     4ec:	e7d2      	b.n	494 <_sercom_get_default_pad+0x14>
     4ee:	480f      	ldr	r0, [pc, #60]	; (52c <_sercom_get_default_pad+0xac>)
     4f0:	e7d0      	b.n	494 <_sercom_get_default_pad+0x14>
     4f2:	480f      	ldr	r0, [pc, #60]	; (530 <_sercom_get_default_pad+0xb0>)
     4f4:	e7ce      	b.n	494 <_sercom_get_default_pad+0x14>
     4f6:	480f      	ldr	r0, [pc, #60]	; (534 <_sercom_get_default_pad+0xb4>)
     4f8:	e7cc      	b.n	494 <_sercom_get_default_pad+0x14>
     4fa:	480f      	ldr	r0, [pc, #60]	; (538 <_sercom_get_default_pad+0xb8>)
     4fc:	e7ca      	b.n	494 <_sercom_get_default_pad+0x14>
     4fe:	480f      	ldr	r0, [pc, #60]	; (53c <_sercom_get_default_pad+0xbc>)
     500:	e7c8      	b.n	494 <_sercom_get_default_pad+0x14>
     502:	46c0      	nop			; (mov r8, r8)
     504:	42000c00 	.word	0x42000c00
     508:	42001000 	.word	0x42001000
     50c:	42000800 	.word	0x42000800
     510:	00050003 	.word	0x00050003
     514:	00060003 	.word	0x00060003
     518:	00070003 	.word	0x00070003
     51c:	00170002 	.word	0x00170002
     520:	001e0003 	.word	0x001e0003
     524:	001f0003 	.word	0x001f0003
     528:	00170003 	.word	0x00170003
     52c:	00100003 	.word	0x00100003
     530:	00190003 	.word	0x00190003
     534:	00040003 	.word	0x00040003
     538:	00160002 	.word	0x00160002
     53c:	00160003 	.word	0x00160003

00000540 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     540:	b530      	push	{r4, r5, lr}
     542:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     544:	aa01      	add	r2, sp, #4
     546:	4b0b      	ldr	r3, [pc, #44]	; (574 <_sercom_get_sercom_inst_index+0x34>)
     548:	cb32      	ldmia	r3!, {r1, r4, r5}
     54a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     54c:	0003      	movs	r3, r0
     54e:	9a01      	ldr	r2, [sp, #4]
     550:	4282      	cmp	r2, r0
     552:	d00c      	beq.n	56e <_sercom_get_sercom_inst_index+0x2e>
     554:	9a02      	ldr	r2, [sp, #8]
     556:	4282      	cmp	r2, r0
     558:	d007      	beq.n	56a <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     55a:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     55c:	9a03      	ldr	r2, [sp, #12]
     55e:	429a      	cmp	r2, r3
     560:	d001      	beq.n	566 <_sercom_get_sercom_inst_index+0x26>
}
     562:	b005      	add	sp, #20
     564:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     566:	3002      	adds	r0, #2
     568:	e002      	b.n	570 <_sercom_get_sercom_inst_index+0x30>
     56a:	2001      	movs	r0, #1
     56c:	e000      	b.n	570 <_sercom_get_sercom_inst_index+0x30>
     56e:	2000      	movs	r0, #0
			return i;
     570:	b2c0      	uxtb	r0, r0
     572:	e7f6      	b.n	562 <_sercom_get_sercom_inst_index+0x22>
     574:	00002cc4 	.word	0x00002cc4

00000578 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     578:	2000      	movs	r0, #0
     57a:	4770      	bx	lr

0000057c <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     57c:	b530      	push	{r4, r5, lr}
     57e:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
     580:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
     582:	2903      	cmp	r1, #3
     584:	d900      	bls.n	588 <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
     586:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
     588:	4d11      	ldr	r5, [pc, #68]	; (5d0 <_tcc_set_compare_value+0x54>)
     58a:	42aa      	cmp	r2, r5
     58c:	d8fb      	bhi.n	586 <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
     58e:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
     590:	2b00      	cmp	r3, #0
     592:	d010      	beq.n	5b6 <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
     594:	2480      	movs	r4, #128	; 0x80
     596:	0264      	lsls	r4, r4, #9
     598:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
     59a:	6b03      	ldr	r3, [r0, #48]	; 0x30
     59c:	421c      	tst	r4, r3
     59e:	d1fc      	bne.n	59a <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
     5a0:	2480      	movs	r4, #128	; 0x80
     5a2:	0324      	lsls	r4, r4, #12
     5a4:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
     5a6:	6883      	ldr	r3, [r0, #8]
     5a8:	421c      	tst	r4, r3
     5aa:	d1fc      	bne.n	5a6 <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
     5ac:	311c      	adds	r1, #28
     5ae:	0089      	lsls	r1, r1, #2
     5b0:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
     5b2:	2000      	movs	r0, #0
     5b4:	e7e7      	b.n	586 <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     5b6:	2480      	movs	r4, #128	; 0x80
     5b8:	0064      	lsls	r4, r4, #1
     5ba:	408c      	lsls	r4, r1
     5bc:	6883      	ldr	r3, [r0, #8]
     5be:	421c      	tst	r4, r3
     5c0:	d1fc      	bne.n	5bc <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
     5c2:	3110      	adds	r1, #16
     5c4:	0089      	lsls	r1, r1, #2
     5c6:	1841      	adds	r1, r0, r1
     5c8:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
     5ca:	2000      	movs	r0, #0
     5cc:	e7db      	b.n	586 <_tcc_set_compare_value+0xa>
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	00ffffff 	.word	0x00ffffff

000005d4 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
     5d4:	2300      	movs	r3, #0
     5d6:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
     5d8:	4a4c      	ldr	r2, [pc, #304]	; (70c <tcc_get_config_defaults+0x138>)
     5da:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
     5dc:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     5de:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     5e0:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     5e2:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
     5e4:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
     5e6:	61c3      	str	r3, [r0, #28]
     5e8:	6203      	str	r3, [r0, #32]
     5ea:	6243      	str	r3, [r0, #36]	; 0x24
     5ec:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
     5ee:	7503      	strb	r3, [r0, #20]
     5f0:	7543      	strb	r3, [r0, #21]
     5f2:	7583      	strb	r3, [r0, #22]
     5f4:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     5f6:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     5f8:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
     5fa:	7403      	strb	r3, [r0, #16]
     5fc:	7443      	strb	r3, [r0, #17]
     5fe:	7483      	strb	r3, [r0, #18]
     600:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     602:	222c      	movs	r2, #44	; 0x2c
     604:	5483      	strb	r3, [r0, r2]
     606:	3201      	adds	r2, #1
     608:	5483      	strb	r3, [r0, r2]
     60a:	3201      	adds	r2, #1
     60c:	5483      	strb	r3, [r0, r2]
     60e:	3201      	adds	r2, #1
     610:	5483      	strb	r3, [r0, r2]
     612:	3201      	adds	r2, #1
     614:	5483      	strb	r3, [r0, r2]
     616:	3201      	adds	r2, #1
     618:	5483      	strb	r3, [r0, r2]
     61a:	3201      	adds	r2, #1
     61c:	5483      	strb	r3, [r0, r2]
     61e:	3201      	adds	r2, #1
     620:	5483      	strb	r3, [r0, r2]
     622:	3201      	adds	r2, #1
     624:	5483      	strb	r3, [r0, r2]
     626:	3201      	adds	r2, #1
     628:	5483      	strb	r3, [r0, r2]
     62a:	3201      	adds	r2, #1
     62c:	5483      	strb	r3, [r0, r2]
     62e:	3201      	adds	r2, #1
     630:	5483      	strb	r3, [r0, r2]
     632:	3201      	adds	r2, #1
     634:	5483      	strb	r3, [r0, r2]
     636:	3201      	adds	r2, #1
     638:	5483      	strb	r3, [r0, r2]
     63a:	3201      	adds	r2, #1
     63c:	5483      	strb	r3, [r0, r2]
     63e:	3201      	adds	r2, #1
     640:	5483      	strb	r3, [r0, r2]
     642:	3201      	adds	r2, #1
     644:	5483      	strb	r3, [r0, r2]
     646:	3201      	adds	r2, #1
     648:	5483      	strb	r3, [r0, r2]
     64a:	3201      	adds	r2, #1
     64c:	5483      	strb	r3, [r0, r2]
     64e:	3201      	adds	r2, #1
     650:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     652:	3201      	adds	r2, #1
     654:	5483      	strb	r3, [r0, r2]
     656:	3201      	adds	r2, #1
     658:	5483      	strb	r3, [r0, r2]
     65a:	3201      	adds	r2, #1
     65c:	5483      	strb	r3, [r0, r2]
     65e:	3201      	adds	r2, #1
     660:	5483      	strb	r3, [r0, r2]
     662:	3201      	adds	r2, #1
     664:	5483      	strb	r3, [r0, r2]
     666:	3201      	adds	r2, #1
     668:	5483      	strb	r3, [r0, r2]
     66a:	3201      	adds	r2, #1
     66c:	5483      	strb	r3, [r0, r2]
     66e:	3201      	adds	r2, #1
     670:	5483      	strb	r3, [r0, r2]
     672:	3201      	adds	r2, #1
     674:	5483      	strb	r3, [r0, r2]
     676:	3201      	adds	r2, #1
     678:	5483      	strb	r3, [r0, r2]
     67a:	3201      	adds	r2, #1
     67c:	5483      	strb	r3, [r0, r2]
     67e:	3201      	adds	r2, #1
     680:	5483      	strb	r3, [r0, r2]
     682:	3201      	adds	r2, #1
     684:	5483      	strb	r3, [r0, r2]
     686:	3201      	adds	r2, #1
     688:	5483      	strb	r3, [r0, r2]
     68a:	3201      	adds	r2, #1
     68c:	5483      	strb	r3, [r0, r2]
     68e:	3201      	adds	r2, #1
     690:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     692:	3201      	adds	r2, #1
     694:	5483      	strb	r3, [r0, r2]
     696:	3201      	adds	r2, #1
     698:	5483      	strb	r3, [r0, r2]
     69a:	3201      	adds	r2, #1
     69c:	5483      	strb	r3, [r0, r2]
     69e:	3201      	adds	r2, #1
     6a0:	5483      	strb	r3, [r0, r2]
     6a2:	3201      	adds	r2, #1
     6a4:	5483      	strb	r3, [r0, r2]
     6a6:	3201      	adds	r2, #1
     6a8:	5483      	strb	r3, [r0, r2]
     6aa:	3201      	adds	r2, #1
     6ac:	5483      	strb	r3, [r0, r2]
     6ae:	3201      	adds	r2, #1
     6b0:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     6b2:	3241      	adds	r2, #65	; 0x41
     6b4:	5483      	strb	r3, [r0, r2]
     6b6:	6583      	str	r3, [r0, #88]	; 0x58
     6b8:	6783      	str	r3, [r0, #120]	; 0x78
     6ba:	3201      	adds	r2, #1
     6bc:	5483      	strb	r3, [r0, r2]
     6be:	65c3      	str	r3, [r0, #92]	; 0x5c
     6c0:	67c3      	str	r3, [r0, #124]	; 0x7c
     6c2:	3201      	adds	r2, #1
     6c4:	5483      	strb	r3, [r0, r2]
     6c6:	6603      	str	r3, [r0, #96]	; 0x60
     6c8:	3a1a      	subs	r2, #26
     6ca:	5083      	str	r3, [r0, r2]
     6cc:	321b      	adds	r2, #27
     6ce:	5483      	strb	r3, [r0, r2]
     6d0:	6643      	str	r3, [r0, #100]	; 0x64
     6d2:	3a17      	subs	r2, #23
     6d4:	5083      	str	r3, [r0, r2]
     6d6:	3218      	adds	r2, #24
     6d8:	5483      	strb	r3, [r0, r2]
     6da:	6683      	str	r3, [r0, #104]	; 0x68
     6dc:	3a14      	subs	r2, #20
     6de:	5083      	str	r3, [r0, r2]
     6e0:	3215      	adds	r2, #21
     6e2:	5483      	strb	r3, [r0, r2]
     6e4:	66c3      	str	r3, [r0, #108]	; 0x6c
     6e6:	3a11      	subs	r2, #17
     6e8:	5083      	str	r3, [r0, r2]
     6ea:	3212      	adds	r2, #18
     6ec:	5483      	strb	r3, [r0, r2]
     6ee:	6703      	str	r3, [r0, #112]	; 0x70
     6f0:	3a0e      	subs	r2, #14
     6f2:	5083      	str	r3, [r0, r2]
     6f4:	320f      	adds	r2, #15
     6f6:	5483      	strb	r3, [r0, r2]
     6f8:	6743      	str	r3, [r0, #116]	; 0x74
     6fa:	3a0b      	subs	r2, #11
     6fc:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
     6fe:	2101      	movs	r1, #1
     700:	320c      	adds	r2, #12
     702:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
     704:	3201      	adds	r2, #1
     706:	5483      	strb	r3, [r0, r2]
}
     708:	4770      	bx	lr
     70a:	46c0      	nop			; (mov r8, r8)
     70c:	00ffffff 	.word	0x00ffffff

00000710 <tcc_init>:
{
     710:	b5f0      	push	{r4, r5, r6, r7, lr}
     712:	46de      	mov	lr, fp
     714:	4657      	mov	r7, sl
     716:	464e      	mov	r6, r9
     718:	4645      	mov	r5, r8
     71a:	b5e0      	push	{r5, r6, r7, lr}
     71c:	b08d      	sub	sp, #52	; 0x34
     71e:	0006      	movs	r6, r0
     720:	000c      	movs	r4, r1
     722:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
     724:	0008      	movs	r0, r1
     726:	4bcd      	ldr	r3, [pc, #820]	; (a5c <tcc_init+0x34c>)
     728:	4798      	blx	r3
     72a:	0003      	movs	r3, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     72c:	49cc      	ldr	r1, [pc, #816]	; (a60 <tcc_init+0x350>)
     72e:	6a0a      	ldr	r2, [r1, #32]
     730:	2020      	movs	r0, #32
     732:	4302      	orrs	r2, r0
     734:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     736:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     738:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     73a:	0792      	lsls	r2, r2, #30
     73c:	d506      	bpl.n	74c <tcc_init+0x3c>
}
     73e:	b00d      	add	sp, #52	; 0x34
     740:	bc3c      	pop	{r2, r3, r4, r5}
     742:	4690      	mov	r8, r2
     744:	4699      	mov	r9, r3
     746:	46a2      	mov	sl, r4
     748:	46ab      	mov	fp, r5
     74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     74c:	6822      	ldr	r2, [r4, #0]
     74e:	2701      	movs	r7, #1
     750:	4017      	ands	r7, r2
     752:	d1f4      	bne.n	73e <tcc_init+0x2e>
	if ((config->counter.count > count_max)
     754:	4ac3      	ldr	r2, [pc, #780]	; (a64 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
     756:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
     758:	6829      	ldr	r1, [r5, #0]
     75a:	4291      	cmp	r1, r2
     75c:	d8ef      	bhi.n	73e <tcc_init+0x2e>
		|| (config->counter.period > count_max)
     75e:	6869      	ldr	r1, [r5, #4]
     760:	4291      	cmp	r1, r2
     762:	d8ec      	bhi.n	73e <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
     764:	69e9      	ldr	r1, [r5, #28]
     766:	4291      	cmp	r1, r2
     768:	d900      	bls.n	76c <tcc_init+0x5c>
     76a:	e18b      	b.n	a84 <tcc_init+0x374>
     76c:	6a29      	ldr	r1, [r5, #32]
     76e:	4291      	cmp	r1, r2
     770:	d900      	bls.n	774 <tcc_init+0x64>
     772:	e189      	b.n	a88 <tcc_init+0x378>
     774:	6a69      	ldr	r1, [r5, #36]	; 0x24
     776:	4291      	cmp	r1, r2
     778:	d900      	bls.n	77c <tcc_init+0x6c>
     77a:	e187      	b.n	a8c <tcc_init+0x37c>
     77c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     77e:	4291      	cmp	r1, r2
     780:	d900      	bls.n	784 <tcc_init+0x74>
     782:	e185      	b.n	a90 <tcc_init+0x380>
		if (config->capture.channel_function[i] ==
     784:	7c2a      	ldrb	r2, [r5, #16]
     786:	3a01      	subs	r2, #1
     788:	4250      	negs	r0, r2
     78a:	4150      	adcs	r0, r2
     78c:	0602      	lsls	r2, r0, #24
     78e:	9201      	str	r2, [sp, #4]
     790:	7c6a      	ldrb	r2, [r5, #17]
     792:	2a01      	cmp	r2, #1
     794:	d031      	beq.n	7fa <tcc_init+0xea>
     796:	7caa      	ldrb	r2, [r5, #18]
     798:	2a01      	cmp	r2, #1
     79a:	d034      	beq.n	806 <tcc_init+0xf6>
     79c:	7cea      	ldrb	r2, [r5, #19]
     79e:	2a01      	cmp	r2, #1
     7a0:	d037      	beq.n	812 <tcc_init+0x102>
	if (config->run_in_standby) {
     7a2:	22a1      	movs	r2, #161	; 0xa1
     7a4:	5caa      	ldrb	r2, [r5, r2]
     7a6:	2a00      	cmp	r2, #0
     7a8:	d004      	beq.n	7b4 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     7aa:	2280      	movs	r2, #128	; 0x80
     7ac:	0112      	lsls	r2, r2, #4
     7ae:	9901      	ldr	r1, [sp, #4]
     7b0:	4311      	orrs	r1, r2
     7b2:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
     7b4:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
     7b6:	1e51      	subs	r1, r2, #1
     7b8:	418a      	sbcs	r2, r1
     7ba:	0092      	lsls	r2, r2, #2
     7bc:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     7be:	7a6a      	ldrb	r2, [r5, #9]
     7c0:	2a01      	cmp	r2, #1
     7c2:	d02c      	beq.n	81e <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
     7c4:	2235      	movs	r2, #53	; 0x35
     7c6:	5caa      	ldrb	r2, [r5, r2]
     7c8:	2a03      	cmp	r2, #3
     7ca:	d900      	bls.n	7ce <tcc_init+0xbe>
     7cc:	e162      	b.n	a94 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     7ce:	212c      	movs	r1, #44	; 0x2c
     7d0:	5c69      	ldrb	r1, [r5, r1]
     7d2:	290f      	cmp	r1, #15
     7d4:	d900      	bls.n	7d8 <tcc_init+0xc8>
     7d6:	e15d      	b.n	a94 <tcc_init+0x384>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     7d8:	7b28      	ldrb	r0, [r5, #12]
     7da:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     7dc:	7ae8      	ldrb	r0, [r5, #11]
     7de:	9005      	str	r0, [sp, #20]
     7e0:	202d      	movs	r0, #45	; 0x2d
     7e2:	4682      	mov	sl, r0
     7e4:	44aa      	add	sl, r5
     7e6:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     7e8:	9702      	str	r7, [sp, #8]
     7ea:	4684      	mov	ip, r0
     7ec:	9606      	str	r6, [sp, #24]
     7ee:	000e      	movs	r6, r1
     7f0:	46a0      	mov	r8, r4
     7f2:	4654      	mov	r4, sl
     7f4:	46a9      	mov	r9, r5
     7f6:	9307      	str	r3, [sp, #28]
     7f8:	e047      	b.n	88a <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     7fa:	2280      	movs	r2, #128	; 0x80
     7fc:	0492      	lsls	r2, r2, #18
     7fe:	9901      	ldr	r1, [sp, #4]
     800:	4311      	orrs	r1, r2
     802:	9101      	str	r1, [sp, #4]
     804:	e7c7      	b.n	796 <tcc_init+0x86>
     806:	2280      	movs	r2, #128	; 0x80
     808:	04d2      	lsls	r2, r2, #19
     80a:	9901      	ldr	r1, [sp, #4]
     80c:	4311      	orrs	r1, r2
     80e:	9101      	str	r1, [sp, #4]
     810:	e7c4      	b.n	79c <tcc_init+0x8c>
     812:	2280      	movs	r2, #128	; 0x80
     814:	0512      	lsls	r2, r2, #20
     816:	9901      	ldr	r1, [sp, #4]
     818:	4311      	orrs	r1, r2
     81a:	9101      	str	r1, [sp, #4]
     81c:	e7c1      	b.n	7a2 <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
     81e:	9903      	ldr	r1, [sp, #12]
     820:	4311      	orrs	r1, r2
     822:	9103      	str	r1, [sp, #12]
     824:	e7ce      	b.n	7c4 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     826:	0292      	lsls	r2, r2, #10
     828:	25c0      	movs	r5, #192	; 0xc0
     82a:	012d      	lsls	r5, r5, #4
     82c:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     82e:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
     830:	790d      	ldrb	r5, [r1, #4]
     832:	2603      	movs	r6, #3
     834:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     836:	4332      	orrs	r2, r6
     838:	4655      	mov	r5, sl
     83a:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
     83c:	794e      	ldrb	r6, [r1, #5]
     83e:	0176      	lsls	r6, r6, #5
     840:	2560      	movs	r5, #96	; 0x60
     842:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     844:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
     846:	798d      	ldrb	r5, [r1, #6]
     848:	022d      	lsls	r5, r5, #8
     84a:	26c0      	movs	r6, #192	; 0xc0
     84c:	00b6      	lsls	r6, r6, #2
     84e:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     850:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     852:	79cd      	ldrb	r5, [r1, #7]
     854:	032d      	lsls	r5, r5, #12
     856:	26e0      	movs	r6, #224	; 0xe0
     858:	01f6      	lsls	r6, r6, #7
     85a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     85c:	432a      	orrs	r2, r5
     85e:	4310      	orrs	r0, r2
     860:	4303      	orrs	r3, r0
     862:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
     864:	ab08      	add	r3, sp, #32
     866:	4662      	mov	r2, ip
     868:	2008      	movs	r0, #8
     86a:	181b      	adds	r3, r3, r0
     86c:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     86e:	2a04      	cmp	r2, #4
     870:	d028      	beq.n	8c4 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
     872:	7c8a      	ldrb	r2, [r1, #18]
     874:	2a03      	cmp	r2, #3
     876:	d900      	bls.n	87a <tcc_init+0x16a>
     878:	e10c      	b.n	a94 <tcc_init+0x384>
		if (cfg->filter_value > 0xF) {
     87a:	7a4e      	ldrb	r6, [r1, #9]
     87c:	340a      	adds	r4, #10
     87e:	2304      	movs	r3, #4
     880:	469a      	mov	sl, r3
     882:	44d4      	add	ip, sl
     884:	2e0f      	cmp	r6, #15
     886:	d900      	bls.n	88a <tcc_init+0x17a>
     888:	e104      	b.n	a94 <tcc_init+0x384>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     88a:	0636      	lsls	r6, r6, #24
     88c:	23f0      	movs	r3, #240	; 0xf0
     88e:	051b      	lsls	r3, r3, #20
     890:	401e      	ands	r6, r3
     892:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     894:	7825      	ldrb	r5, [r4, #0]
     896:	042d      	lsls	r5, r5, #16
     898:	23ff      	movs	r3, #255	; 0xff
     89a:	041b      	lsls	r3, r3, #16
     89c:	401d      	ands	r5, r3
     89e:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     8a0:	7863      	ldrb	r3, [r4, #1]
     8a2:	2080      	movs	r0, #128	; 0x80
     8a4:	2b00      	cmp	r3, #0
     8a6:	d100      	bne.n	8aa <tcc_init+0x19a>
     8a8:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     8aa:	788f      	ldrb	r7, [r1, #2]
     8ac:	2308      	movs	r3, #8
     8ae:	2f00      	cmp	r7, #0
     8b0:	d100      	bne.n	8b4 <tcc_init+0x1a4>
     8b2:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     8b4:	78cf      	ldrb	r7, [r1, #3]
     8b6:	46bb      	mov	fp, r7
     8b8:	2710      	movs	r7, #16
     8ba:	465d      	mov	r5, fp
     8bc:	2d00      	cmp	r5, #0
     8be:	d1b2      	bne.n	826 <tcc_init+0x116>
     8c0:	9f02      	ldr	r7, [sp, #8]
     8c2:	e7b0      	b.n	826 <tcc_init+0x116>
     8c4:	9e06      	ldr	r6, [sp, #24]
     8c6:	4644      	mov	r4, r8
     8c8:	464d      	mov	r5, r9
     8ca:	9b07      	ldr	r3, [sp, #28]
     8cc:	4648      	mov	r0, r9
     8ce:	3050      	adds	r0, #80	; 0x50
     8d0:	4649      	mov	r1, r9
     8d2:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     8d4:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     8d6:	2780      	movs	r7, #128	; 0x80
     8d8:	027f      	lsls	r7, r7, #9
     8da:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     8dc:	2701      	movs	r7, #1
     8de:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     8e0:	2702      	movs	r7, #2
     8e2:	37ff      	adds	r7, #255	; 0xff
     8e4:	46ba      	mov	sl, r7
     8e6:	001f      	movs	r7, r3
     8e8:	0013      	movs	r3, r2
     8ea:	46a0      	mov	r8, r4
     8ec:	003c      	movs	r4, r7
     8ee:	e007      	b.n	900 <tcc_init+0x1f0>
     8f0:	4657      	mov	r7, sl
     8f2:	4097      	lsls	r7, r2
     8f4:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     8f6:	3201      	adds	r2, #1
     8f8:	3001      	adds	r0, #1
     8fa:	3102      	adds	r1, #2
     8fc:	2a08      	cmp	r2, #8
     8fe:	d00e      	beq.n	91e <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
     900:	7807      	ldrb	r7, [r0, #0]
     902:	2f00      	cmp	r7, #0
     904:	d002      	beq.n	90c <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     906:	4667      	mov	r7, ip
     908:	4097      	lsls	r7, r2
     90a:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
     90c:	780f      	ldrb	r7, [r1, #0]
     90e:	2f00      	cmp	r7, #0
     910:	d0f1      	beq.n	8f6 <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
     912:	2f02      	cmp	r7, #2
     914:	d0ec      	beq.n	8f0 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     916:	464f      	mov	r7, r9
     918:	4097      	lsls	r7, r2
     91a:	433b      	orrs	r3, r7
     91c:	e7eb      	b.n	8f6 <tcc_init+0x1e6>
     91e:	0022      	movs	r2, r4
     920:	4644      	mov	r4, r8
     922:	4698      	mov	r8, r3
     924:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     926:	7e6a      	ldrb	r2, [r5, #25]
     928:	0112      	lsls	r2, r2, #4
     92a:	2130      	movs	r1, #48	; 0x30
     92c:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     92e:	7e28      	ldrb	r0, [r5, #24]
     930:	2207      	movs	r2, #7
     932:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     934:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     936:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
     938:	2080      	movs	r0, #128	; 0x80
     93a:	0240      	lsls	r0, r0, #9
     93c:	000f      	movs	r7, r1
     93e:	e002      	b.n	946 <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     940:	3201      	adds	r2, #1
     942:	2a04      	cmp	r2, #4
     944:	d007      	beq.n	956 <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
     946:	18a9      	adds	r1, r5, r2
     948:	7d09      	ldrb	r1, [r1, #20]
     94a:	2900      	cmp	r1, #0
     94c:	d0f8      	beq.n	940 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
     94e:	0001      	movs	r1, r0
     950:	4091      	lsls	r1, r2
     952:	430f      	orrs	r7, r1
     954:	e7f4      	b.n	940 <tcc_init+0x230>
     956:	46b9      	mov	r9, r7
     958:	1d32      	adds	r2, r6, #4
     95a:	0030      	movs	r0, r6
     95c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
     95e:	2100      	movs	r1, #0
     960:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     962:	4290      	cmp	r0, r2
     964:	d1fc      	bne.n	960 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
     966:	2200      	movs	r2, #0
     968:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     96a:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     96c:	009b      	lsls	r3, r3, #2
     96e:	4a3e      	ldr	r2, [pc, #248]	; (a68 <tcc_init+0x358>)
     970:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
     972:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     974:	23a0      	movs	r3, #160	; 0xa0
     976:	5cea      	ldrb	r2, [r5, r3]
     978:	3b64      	subs	r3, #100	; 0x64
     97a:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
     97c:	a909      	add	r1, sp, #36	; 0x24
     97e:	7aab      	ldrb	r3, [r5, #10]
     980:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     982:	2011      	movs	r0, #17
     984:	4b39      	ldr	r3, [pc, #228]	; (a6c <tcc_init+0x35c>)
     986:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     988:	2011      	movs	r0, #17
     98a:	4b39      	ldr	r3, [pc, #228]	; (a70 <tcc_init+0x360>)
     98c:	4798      	blx	r3
     98e:	002f      	movs	r7, r5
     990:	3798      	adds	r7, #152	; 0x98
     992:	002e      	movs	r6, r5
     994:	3658      	adds	r6, #88	; 0x58
     996:	2378      	movs	r3, #120	; 0x78
     998:	469a      	mov	sl, r3
     99a:	44aa      	add	sl, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     99c:	3b77      	subs	r3, #119	; 0x77
     99e:	469b      	mov	fp, r3
		system_pinmux_pin_set_config(config->pins.wave_out_pin[i], &pin_config);
     9a0:	0023      	movs	r3, r4
     9a2:	4654      	mov	r4, sl
     9a4:	469a      	mov	sl, r3
     9a6:	e003      	b.n	9b0 <tcc_init+0x2a0>
     9a8:	3701      	adds	r7, #1
     9aa:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     9ac:	42b4      	cmp	r4, r6
     9ae:	d014      	beq.n	9da <tcc_init+0x2ca>
		if (!config->pins.enable_wave_out_pin[i]) {
     9b0:	783b      	ldrb	r3, [r7, #0]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d0f8      	beq.n	9a8 <tcc_init+0x298>
     9b6:	ab08      	add	r3, sp, #32
     9b8:	465a      	mov	r2, fp
     9ba:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     9bc:	2300      	movs	r3, #0
     9be:	aa08      	add	r2, sp, #32
     9c0:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     9c2:	0013      	movs	r3, r2
     9c4:	2220      	movs	r2, #32
     9c6:	18b2      	adds	r2, r6, r2
     9c8:	7812      	ldrb	r2, [r2, #0]
     9ca:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     9cc:	465a      	mov	r2, fp
     9ce:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(config->pins.wave_out_pin[i], &pin_config);
     9d0:	7830      	ldrb	r0, [r6, #0]
     9d2:	0019      	movs	r1, r3
     9d4:	4b27      	ldr	r3, [pc, #156]	; (a74 <tcc_init+0x364>)
     9d6:	4798      	blx	r3
     9d8:	e7e6      	b.n	9a8 <tcc_init+0x298>
     9da:	4654      	mov	r4, sl
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     9dc:	9b04      	ldr	r3, [sp, #16]
     9de:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     9e0:	9a05      	ldr	r2, [sp, #20]
     9e2:	0212      	lsls	r2, r2, #8
     9e4:	4313      	orrs	r3, r2
     9e6:	9a01      	ldr	r2, [sp, #4]
     9e8:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
     9ea:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     9ec:	2204      	movs	r2, #4
     9ee:	68a3      	ldr	r3, [r4, #8]
     9f0:	421a      	tst	r2, r3
     9f2:	d1fc      	bne.n	9ee <tcc_init+0x2de>
	hw->CTRLBCLR.reg = 0xFF;
     9f4:	23ff      	movs	r3, #255	; 0xff
     9f6:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     9f8:	2204      	movs	r2, #4
     9fa:	68a3      	ldr	r3, [r4, #8]
     9fc:	421a      	tst	r2, r3
     9fe:	d1fc      	bne.n	9fa <tcc_init+0x2ea>
	hw->CTRLBSET.reg = ctrlb;
     a00:	466b      	mov	r3, sp
     a02:	7b1b      	ldrb	r3, [r3, #12]
     a04:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
     a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     a08:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a0c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
     a0e:	4643      	mov	r3, r8
     a10:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     a12:	4a19      	ldr	r2, [pc, #100]	; (a78 <tcc_init+0x368>)
     a14:	68a3      	ldr	r3, [r4, #8]
     a16:	4213      	tst	r3, r2
     a18:	d1fc      	bne.n	a14 <tcc_init+0x304>
	hw->WAVE.reg = waves[0];
     a1a:	464b      	mov	r3, r9
     a1c:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     a1e:	2210      	movs	r2, #16
     a20:	68a3      	ldr	r3, [r4, #8]
     a22:	421a      	tst	r2, r3
     a24:	d1fc      	bne.n	a20 <tcc_init+0x310>
	hw->COUNT.reg = config->counter.count;
     a26:	682b      	ldr	r3, [r5, #0]
     a28:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     a2a:	4a14      	ldr	r2, [pc, #80]	; (a7c <tcc_init+0x36c>)
     a2c:	68a3      	ldr	r3, [r4, #8]
     a2e:	4213      	tst	r3, r2
     a30:	d1fc      	bne.n	a2c <tcc_init+0x31c>
	hw->PER.reg = (config->counter.period);
     a32:	686b      	ldr	r3, [r5, #4]
     a34:	6423      	str	r3, [r4, #64]	; 0x40
     a36:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     a38:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     a3a:	4811      	ldr	r0, [pc, #68]	; (a80 <tcc_init+0x370>)
     a3c:	0002      	movs	r2, r0
     a3e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
     a40:	68a3      	ldr	r3, [r4, #8]
     a42:	421a      	tst	r2, r3
     a44:	d1fc      	bne.n	a40 <tcc_init+0x330>
		hw->CC[i].reg = (config->compare.match[i]);
     a46:	cd04      	ldmia	r5!, {r2}
     a48:	000b      	movs	r3, r1
     a4a:	3310      	adds	r3, #16
     a4c:	009b      	lsls	r3, r3, #2
     a4e:	18e3      	adds	r3, r4, r3
     a50:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     a52:	3101      	adds	r1, #1
     a54:	2904      	cmp	r1, #4
     a56:	d1f1      	bne.n	a3c <tcc_init+0x32c>
	return STATUS_OK;
     a58:	2000      	movs	r0, #0
     a5a:	e670      	b.n	73e <tcc_init+0x2e>
     a5c:	00000579 	.word	0x00000579
     a60:	40000400 	.word	0x40000400
     a64:	00ffffff 	.word	0x00ffffff
     a68:	2000010c 	.word	0x2000010c
     a6c:	0000284d 	.word	0x0000284d
     a70:	000027c1 	.word	0x000027c1
     a74:	00002945 	.word	0x00002945
     a78:	00020040 	.word	0x00020040
     a7c:	00040080 	.word	0x00040080
     a80:	00080100 	.word	0x00080100
			return STATUS_ERR_INVALID_ARG;
     a84:	2017      	movs	r0, #23
     a86:	e65a      	b.n	73e <tcc_init+0x2e>
     a88:	2017      	movs	r0, #23
     a8a:	e658      	b.n	73e <tcc_init+0x2e>
     a8c:	2017      	movs	r0, #23
     a8e:	e656      	b.n	73e <tcc_init+0x2e>
     a90:	2017      	movs	r0, #23
     a92:	e654      	b.n	73e <tcc_init+0x2e>
     a94:	2017      	movs	r0, #23
     a96:	e652      	b.n	73e <tcc_init+0x2e>

00000a98 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
     a98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
     a9a:	233c      	movs	r3, #60	; 0x3c
     a9c:	5cc3      	ldrb	r3, [r0, r3]
     a9e:	4c01      	ldr	r4, [pc, #4]	; (aa4 <tcc_set_compare_value+0xc>)
     aa0:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
     aa2:	bd10      	pop	{r4, pc}
     aa4:	0000057d 	.word	0x0000057d

00000aa8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aaa:	46c6      	mov	lr, r8
     aac:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     aae:	0080      	lsls	r0, r0, #2
     ab0:	4b0e      	ldr	r3, [pc, #56]	; (aec <_tcc_interrupt_handler+0x44>)
     ab2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     ab4:	683b      	ldr	r3, [r7, #0]
     ab6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     abc:	4013      	ands	r3, r2
     abe:	401e      	ands	r6, r3
     ac0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     ac2:	4b0b      	ldr	r3, [pc, #44]	; (af0 <_tcc_interrupt_handler+0x48>)
     ac4:	4698      	mov	r8, r3
     ac6:	e002      	b.n	ace <_tcc_interrupt_handler+0x26>
     ac8:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     aca:	2c30      	cmp	r4, #48	; 0x30
     acc:	d00a      	beq.n	ae4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     ace:	4643      	mov	r3, r8
     ad0:	58e5      	ldr	r5, [r4, r3]
     ad2:	4235      	tst	r5, r6
     ad4:	d0f8      	beq.n	ac8 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     ad6:	193b      	adds	r3, r7, r4
     ad8:	685b      	ldr	r3, [r3, #4]
     ada:	0038      	movs	r0, r7
     adc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     ade:	683b      	ldr	r3, [r7, #0]
     ae0:	62dd      	str	r5, [r3, #44]	; 0x2c
     ae2:	e7f1      	b.n	ac8 <_tcc_interrupt_handler+0x20>
		}
	}
}
     ae4:	bc04      	pop	{r2}
     ae6:	4690      	mov	r8, r2
     ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	2000010c 	.word	0x2000010c
     af0:	00002cd0 	.word	0x00002cd0

00000af4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     af4:	b510      	push	{r4, lr}
     af6:	2000      	movs	r0, #0
     af8:	4b01      	ldr	r3, [pc, #4]	; (b00 <TCC0_Handler+0xc>)
     afa:	4798      	blx	r3
     afc:	bd10      	pop	{r4, pc}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	00000aa9 	.word	0x00000aa9

00000b04 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     b04:	4b06      	ldr	r3, [pc, #24]	; (b20 <_tc_get_inst_index+0x1c>)
     b06:	4298      	cmp	r0, r3
     b08:	d008      	beq.n	b1c <_tc_get_inst_index+0x18>
     b0a:	4a06      	ldr	r2, [pc, #24]	; (b24 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     b0c:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
     b0e:	4290      	cmp	r0, r2
     b10:	d001      	beq.n	b16 <_tc_get_inst_index+0x12>
}
     b12:	0018      	movs	r0, r3
     b14:	4770      	bx	lr
     b16:	3301      	adds	r3, #1
			return i;
     b18:	b2db      	uxtb	r3, r3
     b1a:	e7fa      	b.n	b12 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     b1c:	2300      	movs	r3, #0
     b1e:	e7fb      	b.n	b18 <_tc_get_inst_index+0x14>
     b20:	42001800 	.word	0x42001800
     b24:	42001c00 	.word	0x42001c00

00000b28 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     b28:	b5f0      	push	{r4, r5, r6, r7, lr}
     b2a:	b085      	sub	sp, #20
     b2c:	0004      	movs	r4, r0
     b2e:	000d      	movs	r5, r1
     b30:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     b32:	0008      	movs	r0, r1
     b34:	4b82      	ldr	r3, [pc, #520]	; (d40 <tc_init+0x218>)
     b36:	4798      	blx	r3
     b38:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     b3a:	ab03      	add	r3, sp, #12
     b3c:	2212      	movs	r2, #18
     b3e:	701a      	strb	r2, [r3, #0]
     b40:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     b42:	ab02      	add	r3, sp, #8
     b44:	322e      	adds	r2, #46	; 0x2e
     b46:	801a      	strh	r2, [r3, #0]
     b48:	3240      	adds	r2, #64	; 0x40
     b4a:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     b4c:	2300      	movs	r3, #0
     b4e:	60a3      	str	r3, [r4, #8]
     b50:	60e3      	str	r3, [r4, #12]
     b52:	6123      	str	r3, [r4, #16]
     b54:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     b56:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     b58:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     b5a:	0082      	lsls	r2, r0, #2
     b5c:	4b79      	ldr	r3, [pc, #484]	; (d44 <tc_init+0x21c>)
     b5e:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     b60:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     b62:	78b3      	ldrb	r3, [r6, #2]
     b64:	2b08      	cmp	r3, #8
     b66:	d006      	beq.n	b76 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     b68:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     b6a:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     b6c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     b6e:	07db      	lsls	r3, r3, #31
     b70:	d505      	bpl.n	b7e <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     b72:	b005      	add	sp, #20
     b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     b76:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     b78:	07fa      	lsls	r2, r7, #31
     b7a:	d4fa      	bmi.n	b72 <tc_init+0x4a>
     b7c:	e7f4      	b.n	b68 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     b7e:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
     b80:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     b82:	06db      	lsls	r3, r3, #27
     b84:	d4f5      	bmi.n	b72 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     b86:	882b      	ldrh	r3, [r5, #0]
     b88:	079b      	lsls	r3, r3, #30
     b8a:	d4f2      	bmi.n	b72 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
     b8c:	7c33      	ldrb	r3, [r6, #16]
     b8e:	2b00      	cmp	r3, #0
     b90:	d000      	beq.n	b94 <tc_init+0x6c>
     b92:	e07a      	b.n	c8a <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
     b94:	7f33      	ldrb	r3, [r6, #28]
     b96:	2b00      	cmp	r3, #0
     b98:	d000      	beq.n	b9c <tc_init+0x74>
     b9a:	e082      	b.n	ca2 <tc_init+0x17a>
     b9c:	496a      	ldr	r1, [pc, #424]	; (d48 <tc_init+0x220>)
     b9e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
     ba0:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     ba2:	ab02      	add	r3, sp, #8
     ba4:	5ad3      	ldrh	r3, [r2, r3]
     ba6:	4303      	orrs	r3, r0
     ba8:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     baa:	78b3      	ldrb	r3, [r6, #2]
     bac:	2b08      	cmp	r3, #8
     bae:	d100      	bne.n	bb2 <tc_init+0x8a>
     bb0:	e087      	b.n	cc2 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
     bb2:	7833      	ldrb	r3, [r6, #0]
     bb4:	466a      	mov	r2, sp
     bb6:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     bb8:	ab03      	add	r3, sp, #12
     bba:	5ddf      	ldrb	r7, [r3, r7]
     bbc:	4669      	mov	r1, sp
     bbe:	0038      	movs	r0, r7
     bc0:	4b62      	ldr	r3, [pc, #392]	; (d4c <tc_init+0x224>)
     bc2:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     bc4:	0038      	movs	r0, r7
     bc6:	4b62      	ldr	r3, [pc, #392]	; (d50 <tc_init+0x228>)
     bc8:	4798      	blx	r3
	ctrla_tmp =
     bca:	8931      	ldrh	r1, [r6, #8]
     bcc:	88b3      	ldrh	r3, [r6, #4]
     bce:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
     bd0:	78b1      	ldrb	r1, [r6, #2]
     bd2:	79b2      	ldrb	r2, [r6, #6]
     bd4:	4311      	orrs	r1, r2
	ctrla_tmp =
     bd6:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
     bd8:	7873      	ldrb	r3, [r6, #1]
     bda:	2b00      	cmp	r3, #0
     bdc:	d002      	beq.n	be4 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     bde:	2380      	movs	r3, #128	; 0x80
     be0:	011b      	lsls	r3, r3, #4
     be2:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     be4:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     be6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     be8:	b25b      	sxtb	r3, r3
     bea:	2b00      	cmp	r3, #0
     bec:	dbfb      	blt.n	be6 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     bee:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
     bf0:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     bf2:	1e4b      	subs	r3, r1, #1
     bf4:	4199      	sbcs	r1, r3
     bf6:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
     bf8:	7bb3      	ldrb	r3, [r6, #14]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d001      	beq.n	c02 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     bfe:	2301      	movs	r3, #1
     c00:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c02:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c04:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c06:	b25b      	sxtb	r3, r3
     c08:	2b00      	cmp	r3, #0
     c0a:	dbfb      	blt.n	c04 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     c0c:	23ff      	movs	r3, #255	; 0xff
     c0e:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
     c10:	2900      	cmp	r1, #0
     c12:	d005      	beq.n	c20 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c14:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c16:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
     c18:	b25b      	sxtb	r3, r3
     c1a:	2b00      	cmp	r3, #0
     c1c:	dbfb      	blt.n	c16 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     c1e:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
     c20:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
     c22:	7af3      	ldrb	r3, [r6, #11]
     c24:	2b00      	cmp	r3, #0
     c26:	d001      	beq.n	c2c <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     c28:	2310      	movs	r3, #16
     c2a:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
     c2c:	7b33      	ldrb	r3, [r6, #12]
     c2e:	2b00      	cmp	r3, #0
     c30:	d001      	beq.n	c36 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     c32:	2320      	movs	r3, #32
     c34:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c36:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c38:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c3a:	b25b      	sxtb	r3, r3
     c3c:	2b00      	cmp	r3, #0
     c3e:	dbfb      	blt.n	c38 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     c40:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c42:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c44:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     c46:	b25b      	sxtb	r3, r3
     c48:	2b00      	cmp	r3, #0
     c4a:	dbfb      	blt.n	c44 <tc_init+0x11c>
	switch (module_inst->counter_size) {
     c4c:	7923      	ldrb	r3, [r4, #4]
     c4e:	2b04      	cmp	r3, #4
     c50:	d03f      	beq.n	cd2 <tc_init+0x1aa>
     c52:	2b08      	cmp	r3, #8
     c54:	d05e      	beq.n	d14 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
     c56:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     c58:	2b00      	cmp	r3, #0
     c5a:	d000      	beq.n	c5e <tc_init+0x136>
     c5c:	e789      	b.n	b72 <tc_init+0x4a>
     c5e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c60:	b25b      	sxtb	r3, r3
     c62:	2b00      	cmp	r3, #0
     c64:	dbfb      	blt.n	c5e <tc_init+0x136>
				= config->counter_16_bit.value;
     c66:	8d33      	ldrh	r3, [r6, #40]	; 0x28
     c68:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c6a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c6c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c6e:	b25b      	sxtb	r3, r3
     c70:	2b00      	cmp	r3, #0
     c72:	dbfb      	blt.n	c6c <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
     c74:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
     c76:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     c78:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     c7a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     c7c:	b25b      	sxtb	r3, r3
     c7e:	2b00      	cmp	r3, #0
     c80:	dbfb      	blt.n	c7a <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
     c82:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
     c84:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
     c86:	2000      	movs	r0, #0
     c88:	e773      	b.n	b72 <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     c8a:	a901      	add	r1, sp, #4
     c8c:	2301      	movs	r3, #1
     c8e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     c90:	2200      	movs	r2, #0
     c92:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     c94:	7e32      	ldrb	r2, [r6, #24]
     c96:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     c98:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     c9a:	7d30      	ldrb	r0, [r6, #20]
     c9c:	4b2d      	ldr	r3, [pc, #180]	; (d54 <tc_init+0x22c>)
     c9e:	4798      	blx	r3
     ca0:	e778      	b.n	b94 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ca2:	a901      	add	r1, sp, #4
     ca4:	2301      	movs	r3, #1
     ca6:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     ca8:	2200      	movs	r2, #0
     caa:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     cac:	3224      	adds	r2, #36	; 0x24
     cae:	18b2      	adds	r2, r6, r2
     cb0:	7812      	ldrb	r2, [r2, #0]
     cb2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     cb4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     cb6:	331f      	adds	r3, #31
     cb8:	18f3      	adds	r3, r6, r3
     cba:	7818      	ldrb	r0, [r3, #0]
     cbc:	4b25      	ldr	r3, [pc, #148]	; (d54 <tc_init+0x22c>)
     cbe:	4798      	blx	r3
     cc0:	e76c      	b.n	b9c <tc_init+0x74>
     cc2:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
     cc4:	1c7a      	adds	r2, r7, #1
     cc6:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     cc8:	ab02      	add	r3, sp, #8
     cca:	5ad3      	ldrh	r3, [r2, r3]
     ccc:	4303      	orrs	r3, r0
     cce:	620b      	str	r3, [r1, #32]
     cd0:	e76f      	b.n	bb2 <tc_init+0x8a>
     cd2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     cd4:	b25b      	sxtb	r3, r3
     cd6:	2b00      	cmp	r3, #0
     cd8:	dbfb      	blt.n	cd2 <tc_init+0x1aa>
					config->counter_8_bit.value;
     cda:	2328      	movs	r3, #40	; 0x28
     cdc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
     cde:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     ce0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ce2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     ce4:	b25b      	sxtb	r3, r3
     ce6:	2b00      	cmp	r3, #0
     ce8:	dbfb      	blt.n	ce2 <tc_init+0x1ba>
					config->counter_8_bit.period;
     cea:	2329      	movs	r3, #41	; 0x29
     cec:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
     cee:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     cf0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     cf2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     cf4:	b25b      	sxtb	r3, r3
     cf6:	2b00      	cmp	r3, #0
     cf8:	dbfb      	blt.n	cf2 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
     cfa:	232a      	movs	r3, #42	; 0x2a
     cfc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
     cfe:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d00:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d02:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d04:	b25b      	sxtb	r3, r3
     d06:	2b00      	cmp	r3, #0
     d08:	dbfb      	blt.n	d02 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
     d0a:	232b      	movs	r3, #43	; 0x2b
     d0c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
     d0e:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
     d10:	2000      	movs	r0, #0
     d12:	e72e      	b.n	b72 <tc_init+0x4a>
     d14:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d16:	b25b      	sxtb	r3, r3
     d18:	2b00      	cmp	r3, #0
     d1a:	dbfb      	blt.n	d14 <tc_init+0x1ec>
				= config->counter_32_bit.value;
     d1c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     d1e:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d20:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d22:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d24:	b25b      	sxtb	r3, r3
     d26:	2b00      	cmp	r3, #0
     d28:	dbfb      	blt.n	d22 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
     d2a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     d2c:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     d2e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     d30:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
     d32:	b25b      	sxtb	r3, r3
     d34:	2b00      	cmp	r3, #0
     d36:	dbfb      	blt.n	d30 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
     d38:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
     d3a:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
     d3c:	2000      	movs	r0, #0
     d3e:	e718      	b.n	b72 <tc_init+0x4a>
     d40:	00000b05 	.word	0x00000b05
     d44:	20000110 	.word	0x20000110
     d48:	40000400 	.word	0x40000400
     d4c:	0000284d 	.word	0x0000284d
     d50:	000027c1 	.word	0x000027c1
     d54:	00002945 	.word	0x00002945

00000d58 <tc_set_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
     d58:	6802      	ldr	r2, [r0, #0]
     d5a:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     d5c:	b25b      	sxtb	r3, r3
     d5e:	2b00      	cmp	r3, #0
     d60:	dbfb      	blt.n	d5a <tc_set_count_value+0x2>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
     d62:	7903      	ldrb	r3, [r0, #4]
     d64:	2b04      	cmp	r3, #4
     d66:	d005      	beq.n	d74 <tc_set_count_value+0x1c>
     d68:	2b08      	cmp	r3, #8
     d6a:	d00b      	beq.n	d84 <tc_set_count_value+0x2c>
		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
			return STATUS_OK;

		default:
			return STATUS_ERR_INVALID_ARG;
     d6c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     d6e:	2b00      	cmp	r3, #0
     d70:	d004      	beq.n	d7c <tc_set_count_value+0x24>
	}
}
     d72:	4770      	bx	lr
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
     d74:	b2c9      	uxtb	r1, r1
     d76:	7411      	strb	r1, [r2, #16]
			return STATUS_OK;
     d78:	2000      	movs	r0, #0
     d7a:	e7fa      	b.n	d72 <tc_set_count_value+0x1a>
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
     d7c:	b289      	uxth	r1, r1
     d7e:	8211      	strh	r1, [r2, #16]
			return STATUS_OK;
     d80:	2000      	movs	r0, #0
     d82:	e7f6      	b.n	d72 <tc_set_count_value+0x1a>
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
     d84:	6111      	str	r1, [r2, #16]
			return STATUS_OK;
     d86:	2000      	movs	r0, #0
     d88:	e7f3      	b.n	d72 <tc_set_count_value+0x1a>

00000d8a <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     d8a:	6802      	ldr	r2, [r0, #0]
     d8c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     d8e:	b25b      	sxtb	r3, r3
     d90:	2b00      	cmp	r3, #0
     d92:	dbfb      	blt.n	d8c <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
     d94:	7903      	ldrb	r3, [r0, #4]
     d96:	2b04      	cmp	r3, #4
     d98:	d005      	beq.n	da6 <tc_get_count_value+0x1c>
     d9a:	2b08      	cmp	r3, #8
     d9c:	d009      	beq.n	db2 <tc_get_count_value+0x28>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
     d9e:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
     da0:	2b00      	cmp	r3, #0
     da2:	d003      	beq.n	dac <tc_get_count_value+0x22>
}
     da4:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
     da6:	7c10      	ldrb	r0, [r2, #16]
     da8:	b2c0      	uxtb	r0, r0
     daa:	e7fb      	b.n	da4 <tc_get_count_value+0x1a>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
     dac:	8a10      	ldrh	r0, [r2, #16]
     dae:	b280      	uxth	r0, r0
     db0:	e7f8      	b.n	da4 <tc_get_count_value+0x1a>
			return tc_module->COUNT32.COUNT.reg;
     db2:	6910      	ldr	r0, [r2, #16]
     db4:	e7f6      	b.n	da4 <tc_get_count_value+0x1a>

00000db6 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
     db6:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
     db8:	6804      	ldr	r4, [r0, #0]
     dba:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
     dbc:	b25b      	sxtb	r3, r3
     dbe:	2b00      	cmp	r3, #0
     dc0:	dbfb      	blt.n	dba <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
     dc2:	7903      	ldrb	r3, [r0, #4]
     dc4:	2b04      	cmp	r3, #4
     dc6:	d005      	beq.n	dd4 <tc_set_compare_value+0x1e>
     dc8:	2b08      	cmp	r3, #8
     dca:	d014      	beq.n	df6 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
     dcc:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
     dce:	2b00      	cmp	r3, #0
     dd0:	d008      	beq.n	de4 <tc_set_compare_value+0x2e>
}
     dd2:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
     dd4:	2017      	movs	r0, #23
			if (channel_index <
     dd6:	2901      	cmp	r1, #1
     dd8:	d8fb      	bhi.n	dd2 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
     dda:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
     ddc:	1861      	adds	r1, r4, r1
     dde:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
     de0:	2000      	movs	r0, #0
     de2:	e7f6      	b.n	dd2 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
     de4:	2017      	movs	r0, #23
			if (channel_index <
     de6:	2901      	cmp	r1, #1
     de8:	d8f3      	bhi.n	dd2 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
     dea:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
     dec:	310c      	adds	r1, #12
     dee:	0049      	lsls	r1, r1, #1
     df0:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
     df2:	2000      	movs	r0, #0
     df4:	e7ed      	b.n	dd2 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
     df6:	2017      	movs	r0, #23
			if (channel_index <
     df8:	2901      	cmp	r1, #1
     dfa:	d8ea      	bhi.n	dd2 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
     dfc:	3106      	adds	r1, #6
     dfe:	0089      	lsls	r1, r1, #2
     e00:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
     e02:	2000      	movs	r0, #0
     e04:	e7e5      	b.n	dd2 <tc_set_compare_value+0x1c>

00000e06 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     e06:	1c93      	adds	r3, r2, #2
     e08:	009b      	lsls	r3, r3, #2
     e0a:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     e0c:	2a02      	cmp	r2, #2
     e0e:	d009      	beq.n	e24 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     e10:	2a03      	cmp	r2, #3
     e12:	d00c      	beq.n	e2e <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     e14:	2301      	movs	r3, #1
     e16:	4093      	lsls	r3, r2
     e18:	001a      	movs	r2, r3
     e1a:	7e03      	ldrb	r3, [r0, #24]
     e1c:	4313      	orrs	r3, r2
     e1e:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     e20:	2000      	movs	r0, #0
     e22:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     e24:	7e03      	ldrb	r3, [r0, #24]
     e26:	2210      	movs	r2, #16
     e28:	4313      	orrs	r3, r2
     e2a:	7603      	strb	r3, [r0, #24]
     e2c:	e7f8      	b.n	e20 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     e2e:	7e03      	ldrb	r3, [r0, #24]
     e30:	2220      	movs	r2, #32
     e32:	4313      	orrs	r3, r2
     e34:	7603      	strb	r3, [r0, #24]
     e36:	e7f3      	b.n	e20 <tc_register_callback+0x1a>

00000e38 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     e38:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     e3a:	0080      	lsls	r0, r0, #2
     e3c:	4b16      	ldr	r3, [pc, #88]	; (e98 <_tc_interrupt_handler+0x60>)
     e3e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     e40:	6823      	ldr	r3, [r4, #0]
     e42:	7b9d      	ldrb	r5, [r3, #14]
     e44:	7e22      	ldrb	r2, [r4, #24]
     e46:	7e63      	ldrb	r3, [r4, #25]
     e48:	4013      	ands	r3, r2
     e4a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     e4c:	07eb      	lsls	r3, r5, #31
     e4e:	d406      	bmi.n	e5e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     e50:	07ab      	lsls	r3, r5, #30
     e52:	d40b      	bmi.n	e6c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     e54:	06eb      	lsls	r3, r5, #27
     e56:	d410      	bmi.n	e7a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     e58:	06ab      	lsls	r3, r5, #26
     e5a:	d415      	bmi.n	e88 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     e5c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     e5e:	0020      	movs	r0, r4
     e60:	68a3      	ldr	r3, [r4, #8]
     e62:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     e64:	2301      	movs	r3, #1
     e66:	6822      	ldr	r2, [r4, #0]
     e68:	7393      	strb	r3, [r2, #14]
     e6a:	e7f1      	b.n	e50 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     e6c:	0020      	movs	r0, r4
     e6e:	68e3      	ldr	r3, [r4, #12]
     e70:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     e72:	2302      	movs	r3, #2
     e74:	6822      	ldr	r2, [r4, #0]
     e76:	7393      	strb	r3, [r2, #14]
     e78:	e7ec      	b.n	e54 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     e7a:	0020      	movs	r0, r4
     e7c:	6923      	ldr	r3, [r4, #16]
     e7e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     e80:	2310      	movs	r3, #16
     e82:	6822      	ldr	r2, [r4, #0]
     e84:	7393      	strb	r3, [r2, #14]
     e86:	e7e7      	b.n	e58 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     e88:	0020      	movs	r0, r4
     e8a:	6963      	ldr	r3, [r4, #20]
     e8c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     e8e:	6823      	ldr	r3, [r4, #0]
     e90:	2220      	movs	r2, #32
     e92:	739a      	strb	r2, [r3, #14]
}
     e94:	e7e2      	b.n	e5c <_tc_interrupt_handler+0x24>
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	20000110 	.word	0x20000110

00000e9c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     e9c:	b510      	push	{r4, lr}
     e9e:	2000      	movs	r0, #0
     ea0:	4b01      	ldr	r3, [pc, #4]	; (ea8 <TC1_Handler+0xc>)
     ea2:	4798      	blx	r3
     ea4:	bd10      	pop	{r4, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	00000e39 	.word	0x00000e39

00000eac <TC2_Handler>:
     eac:	b510      	push	{r4, lr}
     eae:	2001      	movs	r0, #1
     eb0:	4b01      	ldr	r3, [pc, #4]	; (eb8 <TC2_Handler+0xc>)
     eb2:	4798      	blx	r3
     eb4:	bd10      	pop	{r4, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000e39 	.word	0x00000e39

00000ebc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ebe:	46de      	mov	lr, fp
     ec0:	4657      	mov	r7, sl
     ec2:	464e      	mov	r6, r9
     ec4:	4645      	mov	r5, r8
     ec6:	b5e0      	push	{r5, r6, r7, lr}
     ec8:	b091      	sub	sp, #68	; 0x44
     eca:	0005      	movs	r5, r0
     ecc:	000c      	movs	r4, r1
     ece:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     ed0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ed2:	0008      	movs	r0, r1
     ed4:	4bbc      	ldr	r3, [pc, #752]	; (11c8 <usart_init+0x30c>)
     ed6:	4798      	blx	r3
     ed8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     eda:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     edc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ede:	07db      	lsls	r3, r3, #31
     ee0:	d506      	bpl.n	ef0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     ee2:	b011      	add	sp, #68	; 0x44
     ee4:	bc3c      	pop	{r2, r3, r4, r5}
     ee6:	4690      	mov	r8, r2
     ee8:	4699      	mov	r9, r3
     eea:	46a2      	mov	sl, r4
     eec:	46ab      	mov	fp, r5
     eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ef0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     ef2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ef4:	079b      	lsls	r3, r3, #30
     ef6:	d4f4      	bmi.n	ee2 <usart_init+0x26>
     ef8:	49b4      	ldr	r1, [pc, #720]	; (11cc <usart_init+0x310>)
     efa:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     efc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     efe:	2301      	movs	r3, #1
     f00:	40bb      	lsls	r3, r7
     f02:	4303      	orrs	r3, r0
     f04:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     f06:	a90f      	add	r1, sp, #60	; 0x3c
     f08:	272d      	movs	r7, #45	; 0x2d
     f0a:	5df3      	ldrb	r3, [r6, r7]
     f0c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f0e:	320e      	adds	r2, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f10:	b2d3      	uxtb	r3, r2
     f12:	9302      	str	r3, [sp, #8]
     f14:	0018      	movs	r0, r3
     f16:	4bae      	ldr	r3, [pc, #696]	; (11d0 <usart_init+0x314>)
     f18:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f1a:	9802      	ldr	r0, [sp, #8]
     f1c:	4bad      	ldr	r3, [pc, #692]	; (11d4 <usart_init+0x318>)
     f1e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f20:	5df0      	ldrb	r0, [r6, r7]
     f22:	2100      	movs	r1, #0
     f24:	4bac      	ldr	r3, [pc, #688]	; (11d8 <usart_init+0x31c>)
     f26:	4798      	blx	r3
	module->character_size = config->character_size;
     f28:	7af3      	ldrb	r3, [r6, #11]
     f2a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     f2c:	2324      	movs	r3, #36	; 0x24
     f2e:	5cf3      	ldrb	r3, [r6, r3]
     f30:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f32:	2325      	movs	r3, #37	; 0x25
     f34:	5cf3      	ldrb	r3, [r6, r3]
     f36:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     f38:	7ef3      	ldrb	r3, [r6, #27]
     f3a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f3c:	7f33      	ldrb	r3, [r6, #28]
     f3e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     f40:	682b      	ldr	r3, [r5, #0]
     f42:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f44:	0018      	movs	r0, r3
     f46:	4ba0      	ldr	r3, [pc, #640]	; (11c8 <usart_init+0x30c>)
     f48:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f4a:	300e      	adds	r0, #14
	uint16_t baud  = 0;
     f4c:	2200      	movs	r2, #0
     f4e:	230e      	movs	r3, #14
     f50:	a906      	add	r1, sp, #24
     f52:	468c      	mov	ip, r1
     f54:	4463      	add	r3, ip
     f56:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     f58:	8a32      	ldrh	r2, [r6, #16]
     f5a:	9202      	str	r2, [sp, #8]
     f5c:	2380      	movs	r3, #128	; 0x80
     f5e:	01db      	lsls	r3, r3, #7
     f60:	429a      	cmp	r2, r3
     f62:	d100      	bne.n	f66 <usart_init+0xaa>
     f64:	e09e      	b.n	10a4 <usart_init+0x1e8>
     f66:	d90f      	bls.n	f88 <usart_init+0xcc>
     f68:	23c0      	movs	r3, #192	; 0xc0
     f6a:	01db      	lsls	r3, r3, #7
     f6c:	9a02      	ldr	r2, [sp, #8]
     f6e:	429a      	cmp	r2, r3
     f70:	d100      	bne.n	f74 <usart_init+0xb8>
     f72:	e092      	b.n	109a <usart_init+0x1de>
     f74:	2380      	movs	r3, #128	; 0x80
     f76:	021b      	lsls	r3, r3, #8
     f78:	429a      	cmp	r2, r3
     f7a:	d000      	beq.n	f7e <usart_init+0xc2>
     f7c:	e11f      	b.n	11be <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f7e:	2303      	movs	r3, #3
     f80:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f82:	2300      	movs	r3, #0
     f84:	9307      	str	r3, [sp, #28]
     f86:	e008      	b.n	f9a <usart_init+0xde>
	switch (config->sample_rate) {
     f88:	2380      	movs	r3, #128	; 0x80
     f8a:	019b      	lsls	r3, r3, #6
     f8c:	429a      	cmp	r2, r3
     f8e:	d000      	beq.n	f92 <usart_init+0xd6>
     f90:	e115      	b.n	11be <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f92:	2310      	movs	r3, #16
     f94:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f96:	3b0f      	subs	r3, #15
     f98:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     f9a:	6833      	ldr	r3, [r6, #0]
     f9c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f9e:	68f3      	ldr	r3, [r6, #12]
     fa0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     fa2:	6973      	ldr	r3, [r6, #20]
     fa4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fa6:	7e33      	ldrb	r3, [r6, #24]
     fa8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     faa:	2326      	movs	r3, #38	; 0x26
     fac:	5cf3      	ldrb	r3, [r6, r3]
     fae:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     fb0:	6873      	ldr	r3, [r6, #4]
     fb2:	4699      	mov	r9, r3
	switch (transfer_mode)
     fb4:	2b00      	cmp	r3, #0
     fb6:	d100      	bne.n	fba <usart_init+0xfe>
     fb8:	e0a0      	b.n	10fc <usart_init+0x240>
     fba:	2380      	movs	r3, #128	; 0x80
     fbc:	055b      	lsls	r3, r3, #21
     fbe:	4599      	cmp	r9, r3
     fc0:	d100      	bne.n	fc4 <usart_init+0x108>
     fc2:	e084      	b.n	10ce <usart_init+0x212>
	if(config->encoding_format_enable) {
     fc4:	7e73      	ldrb	r3, [r6, #25]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     fca:	7eb3      	ldrb	r3, [r6, #26]
     fcc:	4642      	mov	r2, r8
     fce:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     fd0:	682a      	ldr	r2, [r5, #0]
     fd2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     fd4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     fd6:	2b00      	cmp	r3, #0
     fd8:	d1fc      	bne.n	fd4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     fda:	330e      	adds	r3, #14
     fdc:	aa06      	add	r2, sp, #24
     fde:	4694      	mov	ip, r2
     fe0:	4463      	add	r3, ip
     fe2:	881b      	ldrh	r3, [r3, #0]
     fe4:	4642      	mov	r2, r8
     fe6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     fe8:	9b05      	ldr	r3, [sp, #20]
     fea:	9a03      	ldr	r2, [sp, #12]
     fec:	4313      	orrs	r3, r2
     fee:	9a04      	ldr	r2, [sp, #16]
     ff0:	4313      	orrs	r3, r2
     ff2:	464a      	mov	r2, r9
     ff4:	4313      	orrs	r3, r2
     ff6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ff8:	465b      	mov	r3, fp
     ffa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     ffc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ffe:	4653      	mov	r3, sl
    1000:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1002:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1004:	2327      	movs	r3, #39	; 0x27
    1006:	5cf3      	ldrb	r3, [r6, r3]
    1008:	2b00      	cmp	r3, #0
    100a:	d101      	bne.n	1010 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    100c:	3304      	adds	r3, #4
    100e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1010:	7e73      	ldrb	r3, [r6, #25]
    1012:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1014:	7f32      	ldrb	r2, [r6, #28]
    1016:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1018:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    101a:	7f72      	ldrb	r2, [r6, #29]
    101c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    101e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1020:	2224      	movs	r2, #36	; 0x24
    1022:	5cb2      	ldrb	r2, [r6, r2]
    1024:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1026:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1028:	2225      	movs	r2, #37	; 0x25
    102a:	5cb2      	ldrb	r2, [r6, r2]
    102c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    102e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1030:	7ab1      	ldrb	r1, [r6, #10]
    1032:	7af2      	ldrb	r2, [r6, #11]
    1034:	4311      	orrs	r1, r2
    1036:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1038:	8933      	ldrh	r3, [r6, #8]
    103a:	2bff      	cmp	r3, #255	; 0xff
    103c:	d100      	bne.n	1040 <usart_init+0x184>
    103e:	e081      	b.n	1144 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1040:	2280      	movs	r2, #128	; 0x80
    1042:	0452      	lsls	r2, r2, #17
    1044:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1046:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1048:	232c      	movs	r3, #44	; 0x2c
    104a:	5cf3      	ldrb	r3, [r6, r3]
    104c:	2b00      	cmp	r3, #0
    104e:	d103      	bne.n	1058 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1050:	4b62      	ldr	r3, [pc, #392]	; (11dc <usart_init+0x320>)
    1052:	789b      	ldrb	r3, [r3, #2]
    1054:	079b      	lsls	r3, r3, #30
    1056:	d501      	bpl.n	105c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1058:	2380      	movs	r3, #128	; 0x80
    105a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    105c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    105e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1060:	2b00      	cmp	r3, #0
    1062:	d1fc      	bne.n	105e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1064:	4643      	mov	r3, r8
    1066:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1068:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    106a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    106c:	2b00      	cmp	r3, #0
    106e:	d1fc      	bne.n	106a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1070:	4643      	mov	r3, r8
    1072:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1074:	ab0e      	add	r3, sp, #56	; 0x38
    1076:	2280      	movs	r2, #128	; 0x80
    1078:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    107a:	2200      	movs	r2, #0
    107c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    107e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1080:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1082:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1084:	930a      	str	r3, [sp, #40]	; 0x28
    1086:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1088:	930b      	str	r3, [sp, #44]	; 0x2c
    108a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    108c:	930c      	str	r3, [sp, #48]	; 0x30
    108e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1090:	9302      	str	r3, [sp, #8]
    1092:	930d      	str	r3, [sp, #52]	; 0x34
    1094:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1096:	ae0a      	add	r6, sp, #40	; 0x28
    1098:	e063      	b.n	1162 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    109a:	2308      	movs	r3, #8
    109c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    109e:	3b07      	subs	r3, #7
    10a0:	9307      	str	r3, [sp, #28]
    10a2:	e77a      	b.n	f9a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    10a4:	6833      	ldr	r3, [r6, #0]
    10a6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    10a8:	68f3      	ldr	r3, [r6, #12]
    10aa:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    10ac:	6973      	ldr	r3, [r6, #20]
    10ae:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10b0:	7e33      	ldrb	r3, [r6, #24]
    10b2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10b4:	2326      	movs	r3, #38	; 0x26
    10b6:	5cf3      	ldrb	r3, [r6, r3]
    10b8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    10ba:	6873      	ldr	r3, [r6, #4]
    10bc:	4699      	mov	r9, r3
	switch (transfer_mode)
    10be:	2b00      	cmp	r3, #0
    10c0:	d018      	beq.n	10f4 <usart_init+0x238>
    10c2:	2380      	movs	r3, #128	; 0x80
    10c4:	055b      	lsls	r3, r3, #21
    10c6:	4599      	cmp	r9, r3
    10c8:	d001      	beq.n	10ce <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    10ca:	2000      	movs	r0, #0
    10cc:	e025      	b.n	111a <usart_init+0x25e>
			if (!config->use_external_clock) {
    10ce:	2327      	movs	r3, #39	; 0x27
    10d0:	5cf3      	ldrb	r3, [r6, r3]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d000      	beq.n	10d8 <usart_init+0x21c>
    10d6:	e775      	b.n	fc4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    10d8:	6a33      	ldr	r3, [r6, #32]
    10da:	001f      	movs	r7, r3
    10dc:	b2c0      	uxtb	r0, r0
    10de:	4b40      	ldr	r3, [pc, #256]	; (11e0 <usart_init+0x324>)
    10e0:	4798      	blx	r3
    10e2:	0001      	movs	r1, r0
    10e4:	220e      	movs	r2, #14
    10e6:	ab06      	add	r3, sp, #24
    10e8:	469c      	mov	ip, r3
    10ea:	4462      	add	r2, ip
    10ec:	0038      	movs	r0, r7
    10ee:	4b3d      	ldr	r3, [pc, #244]	; (11e4 <usart_init+0x328>)
    10f0:	4798      	blx	r3
    10f2:	e012      	b.n	111a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10f4:	2308      	movs	r3, #8
    10f6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10f8:	2300      	movs	r3, #0
    10fa:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    10fc:	2327      	movs	r3, #39	; 0x27
    10fe:	5cf3      	ldrb	r3, [r6, r3]
    1100:	2b00      	cmp	r3, #0
    1102:	d00e      	beq.n	1122 <usart_init+0x266>
				status_code =
    1104:	9b06      	ldr	r3, [sp, #24]
    1106:	9300      	str	r3, [sp, #0]
    1108:	9b07      	ldr	r3, [sp, #28]
    110a:	220e      	movs	r2, #14
    110c:	a906      	add	r1, sp, #24
    110e:	468c      	mov	ip, r1
    1110:	4462      	add	r2, ip
    1112:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1114:	6a30      	ldr	r0, [r6, #32]
    1116:	4f34      	ldr	r7, [pc, #208]	; (11e8 <usart_init+0x32c>)
    1118:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    111a:	2800      	cmp	r0, #0
    111c:	d000      	beq.n	1120 <usart_init+0x264>
    111e:	e6e0      	b.n	ee2 <usart_init+0x26>
    1120:	e750      	b.n	fc4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1122:	6a33      	ldr	r3, [r6, #32]
    1124:	001f      	movs	r7, r3
    1126:	b2c0      	uxtb	r0, r0
    1128:	4b2d      	ldr	r3, [pc, #180]	; (11e0 <usart_init+0x324>)
    112a:	4798      	blx	r3
    112c:	0001      	movs	r1, r0
				status_code =
    112e:	9b06      	ldr	r3, [sp, #24]
    1130:	9300      	str	r3, [sp, #0]
    1132:	9b07      	ldr	r3, [sp, #28]
    1134:	220e      	movs	r2, #14
    1136:	a806      	add	r0, sp, #24
    1138:	4684      	mov	ip, r0
    113a:	4462      	add	r2, ip
    113c:	0038      	movs	r0, r7
    113e:	4f2a      	ldr	r7, [pc, #168]	; (11e8 <usart_init+0x32c>)
    1140:	47b8      	blx	r7
    1142:	e7ea      	b.n	111a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1144:	7ef3      	ldrb	r3, [r6, #27]
    1146:	2b00      	cmp	r3, #0
    1148:	d100      	bne.n	114c <usart_init+0x290>
    114a:	e77d      	b.n	1048 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    114c:	2380      	movs	r3, #128	; 0x80
    114e:	04db      	lsls	r3, r3, #19
    1150:	431f      	orrs	r7, r3
    1152:	e779      	b.n	1048 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1154:	0020      	movs	r0, r4
    1156:	4b25      	ldr	r3, [pc, #148]	; (11ec <usart_init+0x330>)
    1158:	4798      	blx	r3
    115a:	e007      	b.n	116c <usart_init+0x2b0>
    115c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    115e:	2f04      	cmp	r7, #4
    1160:	d00d      	beq.n	117e <usart_init+0x2c2>
    1162:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1164:	00bb      	lsls	r3, r7, #2
    1166:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1168:	2800      	cmp	r0, #0
    116a:	d0f3      	beq.n	1154 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    116c:	1c43      	adds	r3, r0, #1
    116e:	d0f5      	beq.n	115c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1170:	a90e      	add	r1, sp, #56	; 0x38
    1172:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1174:	0c00      	lsrs	r0, r0, #16
    1176:	b2c0      	uxtb	r0, r0
    1178:	4b1d      	ldr	r3, [pc, #116]	; (11f0 <usart_init+0x334>)
    117a:	4798      	blx	r3
    117c:	e7ee      	b.n	115c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    117e:	2300      	movs	r3, #0
    1180:	60eb      	str	r3, [r5, #12]
    1182:	612b      	str	r3, [r5, #16]
    1184:	616b      	str	r3, [r5, #20]
    1186:	61ab      	str	r3, [r5, #24]
    1188:	61eb      	str	r3, [r5, #28]
    118a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    118c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    118e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1190:	2200      	movs	r2, #0
    1192:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1194:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1196:	3330      	adds	r3, #48	; 0x30
    1198:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    119a:	3301      	adds	r3, #1
    119c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    119e:	3301      	adds	r3, #1
    11a0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    11a2:	3301      	adds	r3, #1
    11a4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    11a6:	6828      	ldr	r0, [r5, #0]
    11a8:	4b07      	ldr	r3, [pc, #28]	; (11c8 <usart_init+0x30c>)
    11aa:	4798      	blx	r3
    11ac:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    11ae:	4911      	ldr	r1, [pc, #68]	; (11f4 <usart_init+0x338>)
    11b0:	4b11      	ldr	r3, [pc, #68]	; (11f8 <usart_init+0x33c>)
    11b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    11b4:	00a4      	lsls	r4, r4, #2
    11b6:	4b11      	ldr	r3, [pc, #68]	; (11fc <usart_init+0x340>)
    11b8:	50e5      	str	r5, [r4, r3]
	return status_code;
    11ba:	2000      	movs	r0, #0
    11bc:	e691      	b.n	ee2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11be:	2310      	movs	r3, #16
    11c0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11c2:	2300      	movs	r3, #0
    11c4:	9307      	str	r3, [sp, #28]
    11c6:	e6e8      	b.n	f9a <usart_init+0xde>
    11c8:	00000541 	.word	0x00000541
    11cc:	40000400 	.word	0x40000400
    11d0:	0000284d 	.word	0x0000284d
    11d4:	000027c1 	.word	0x000027c1
    11d8:	00000435 	.word	0x00000435
    11dc:	41002000 	.word	0x41002000
    11e0:	00002869 	.word	0x00002869
    11e4:	00000377 	.word	0x00000377
    11e8:	000003a1 	.word	0x000003a1
    11ec:	00000481 	.word	0x00000481
    11f0:	00002945 	.word	0x00002945
    11f4:	00001375 	.word	0x00001375
    11f8:	000014c9 	.word	0x000014c9
    11fc:	20000118 	.word	0x20000118

00001200 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1200:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1202:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1204:	2a00      	cmp	r2, #0
    1206:	d101      	bne.n	120c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1208:	0018      	movs	r0, r3
    120a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    120c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    120e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1210:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1212:	2a00      	cmp	r2, #0
    1214:	d1f8      	bne.n	1208 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1216:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1218:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    121a:	2a00      	cmp	r2, #0
    121c:	d1fc      	bne.n	1218 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    121e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1220:	2102      	movs	r1, #2
    1222:	7e1a      	ldrb	r2, [r3, #24]
    1224:	420a      	tst	r2, r1
    1226:	d0fc      	beq.n	1222 <usart_write_wait+0x22>
	return STATUS_OK;
    1228:	2300      	movs	r3, #0
    122a:	e7ed      	b.n	1208 <usart_write_wait+0x8>

0000122c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    122c:	b5f0      	push	{r4, r5, r6, r7, lr}
    122e:	46ce      	mov	lr, r9
    1230:	4647      	mov	r7, r8
    1232:	b580      	push	{r7, lr}
    1234:	b083      	sub	sp, #12
    1236:	0005      	movs	r5, r0
    1238:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    123a:	2017      	movs	r0, #23
	if (length == 0) {
    123c:	2a00      	cmp	r2, #0
    123e:	d104      	bne.n	124a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1240:	b003      	add	sp, #12
    1242:	bc0c      	pop	{r2, r3}
    1244:	4690      	mov	r8, r2
    1246:	4699      	mov	r9, r3
    1248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    124a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    124c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    124e:	2b00      	cmp	r3, #0
    1250:	d0f6      	beq.n	1240 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1252:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1254:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1256:	2b00      	cmp	r3, #0
    1258:	d1fc      	bne.n	1254 <usart_write_buffer_wait+0x28>
	while (length--) {
    125a:	3a01      	subs	r2, #1
    125c:	b293      	uxth	r3, r2
    125e:	4699      	mov	r9, r3
    1260:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1262:	2701      	movs	r7, #1
	while (length--) {
    1264:	4b1f      	ldr	r3, [pc, #124]	; (12e4 <usart_write_buffer_wait+0xb8>)
    1266:	4698      	mov	r8, r3
    1268:	e011      	b.n	128e <usart_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    126a:	1c73      	adds	r3, r6, #1
    126c:	b29b      	uxth	r3, r3
    126e:	9a01      	ldr	r2, [sp, #4]
    1270:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1272:	796a      	ldrb	r2, [r5, #5]
    1274:	2a01      	cmp	r2, #1
    1276:	d017      	beq.n	12a8 <usart_write_buffer_wait+0x7c>
		uint16_t data_to_send = tx_data[tx_pos++];
    1278:	b289      	uxth	r1, r1
    127a:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    127c:	0028      	movs	r0, r5
    127e:	4b1a      	ldr	r3, [pc, #104]	; (12e8 <usart_write_buffer_wait+0xbc>)
    1280:	4798      	blx	r3
	while (length--) {
    1282:	464b      	mov	r3, r9
    1284:	3b01      	subs	r3, #1
    1286:	b29b      	uxth	r3, r3
    1288:	4699      	mov	r9, r3
    128a:	4543      	cmp	r3, r8
    128c:	d013      	beq.n	12b6 <usart_write_buffer_wait+0x8a>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    128e:	7e23      	ldrb	r3, [r4, #24]
    1290:	423b      	tst	r3, r7
    1292:	d1ea      	bne.n	126a <usart_write_buffer_wait+0x3e>
    1294:	4b13      	ldr	r3, [pc, #76]	; (12e4 <usart_write_buffer_wait+0xb8>)
    1296:	7e22      	ldrb	r2, [r4, #24]
    1298:	423a      	tst	r2, r7
    129a:	d1e6      	bne.n	126a <usart_write_buffer_wait+0x3e>
			} else if (i == USART_TIMEOUT) {
    129c:	2b01      	cmp	r3, #1
    129e:	d019      	beq.n	12d4 <usart_write_buffer_wait+0xa8>
    12a0:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    12a2:	2b00      	cmp	r3, #0
    12a4:	d1f7      	bne.n	1296 <usart_write_buffer_wait+0x6a>
    12a6:	e7e0      	b.n	126a <usart_write_buffer_wait+0x3e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    12a8:	3602      	adds	r6, #2
    12aa:	b2b6      	uxth	r6, r6
    12ac:	9a01      	ldr	r2, [sp, #4]
    12ae:	5cd3      	ldrb	r3, [r2, r3]
    12b0:	021b      	lsls	r3, r3, #8
    12b2:	4319      	orrs	r1, r3
    12b4:	e7e2      	b.n	127c <usart_write_buffer_wait+0x50>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    12b6:	7e23      	ldrb	r3, [r4, #24]
    12b8:	079b      	lsls	r3, r3, #30
    12ba:	d40d      	bmi.n	12d8 <usart_write_buffer_wait+0xac>
    12bc:	4b09      	ldr	r3, [pc, #36]	; (12e4 <usart_write_buffer_wait+0xb8>)
    12be:	2102      	movs	r1, #2
    12c0:	7e22      	ldrb	r2, [r4, #24]
    12c2:	420a      	tst	r2, r1
    12c4:	d10a      	bne.n	12dc <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
    12c6:	2b01      	cmp	r3, #1
    12c8:	d00a      	beq.n	12e0 <usart_write_buffer_wait+0xb4>
    12ca:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    12cc:	2b00      	cmp	r3, #0
    12ce:	d1f7      	bne.n	12c0 <usart_write_buffer_wait+0x94>
	return STATUS_OK;
    12d0:	2000      	movs	r0, #0
    12d2:	e7b5      	b.n	1240 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    12d4:	2012      	movs	r0, #18
    12d6:	e7b3      	b.n	1240 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    12d8:	2000      	movs	r0, #0
    12da:	e7b1      	b.n	1240 <usart_write_buffer_wait+0x14>
    12dc:	2000      	movs	r0, #0
    12de:	e7af      	b.n	1240 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    12e0:	2012      	movs	r0, #18
    12e2:	e7ad      	b.n	1240 <usart_write_buffer_wait+0x14>
    12e4:	0000ffff 	.word	0x0000ffff
    12e8:	00001201 	.word	0x00001201

000012ec <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    12ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12ee:	0004      	movs	r4, r0
    12f0:	000d      	movs	r5, r1
    12f2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12f4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    12f6:	4b0f      	ldr	r3, [pc, #60]	; (1334 <_usart_read_buffer+0x48>)
    12f8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    12fa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    12fc:	b29b      	uxth	r3, r3
    12fe:	2b00      	cmp	r3, #0
    1300:	d003      	beq.n	130a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1302:	4b0d      	ldr	r3, [pc, #52]	; (1338 <_usart_read_buffer+0x4c>)
    1304:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1306:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    130a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    130c:	4b0a      	ldr	r3, [pc, #40]	; (1338 <_usart_read_buffer+0x4c>)
    130e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1310:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1312:	2205      	movs	r2, #5
    1314:	2332      	movs	r3, #50	; 0x32
    1316:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1318:	3b2e      	subs	r3, #46	; 0x2e
    131a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    131c:	7a23      	ldrb	r3, [r4, #8]
    131e:	2b00      	cmp	r3, #0
    1320:	d001      	beq.n	1326 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1322:	2320      	movs	r3, #32
    1324:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1326:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1328:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    132a:	2b00      	cmp	r3, #0
    132c:	d0ec      	beq.n	1308 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    132e:	2308      	movs	r3, #8
    1330:	75bb      	strb	r3, [r7, #22]
    1332:	e7e9      	b.n	1308 <_usart_read_buffer+0x1c>
    1334:	00002399 	.word	0x00002399
    1338:	000023d9 	.word	0x000023d9

0000133c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    133c:	1c93      	adds	r3, r2, #2
    133e:	009b      	lsls	r3, r3, #2
    1340:	18c3      	adds	r3, r0, r3
    1342:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1344:	2130      	movs	r1, #48	; 0x30
    1346:	2301      	movs	r3, #1
    1348:	4093      	lsls	r3, r2
    134a:	001a      	movs	r2, r3
    134c:	5c43      	ldrb	r3, [r0, r1]
    134e:	4313      	orrs	r3, r2
    1350:	5443      	strb	r3, [r0, r1]
}
    1352:	4770      	bx	lr

00001354 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1354:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1356:	2317      	movs	r3, #23
	if (length == 0) {
    1358:	2a00      	cmp	r2, #0
    135a:	d101      	bne.n	1360 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    135c:	0018      	movs	r0, r3
    135e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1360:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1362:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1364:	2c00      	cmp	r4, #0
    1366:	d0f9      	beq.n	135c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1368:	4b01      	ldr	r3, [pc, #4]	; (1370 <usart_read_buffer_job+0x1c>)
    136a:	4798      	blx	r3
    136c:	0003      	movs	r3, r0
    136e:	e7f5      	b.n	135c <usart_read_buffer_job+0x8>
    1370:	000012ed 	.word	0x000012ed

00001374 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1376:	0080      	lsls	r0, r0, #2
    1378:	4b51      	ldr	r3, [pc, #324]	; (14c0 <_usart_interrupt_handler+0x14c>)
    137a:	58c6      	ldr	r6, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    137c:	6834      	ldr	r4, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    137e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1380:	2b00      	cmp	r3, #0
    1382:	d1fc      	bne.n	137e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1384:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1386:	7da5      	ldrb	r5, [r4, #22]
    1388:	401d      	ands	r5, r3
	callback_status = module->callback_reg_mask &
    138a:	2330      	movs	r3, #48	; 0x30
    138c:	5cf3      	ldrb	r3, [r6, r3]
    138e:	2231      	movs	r2, #49	; 0x31
    1390:	5cb7      	ldrb	r7, [r6, r2]
    1392:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1394:	07eb      	lsls	r3, r5, #31
    1396:	d522      	bpl.n	13de <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1398:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    139a:	b29b      	uxth	r3, r3
    139c:	2b00      	cmp	r3, #0
    139e:	d01c      	beq.n	13da <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13a0:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    13a2:	7813      	ldrb	r3, [r2, #0]
    13a4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    13a6:	1c51      	adds	r1, r2, #1
    13a8:	62b1      	str	r1, [r6, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13aa:	7971      	ldrb	r1, [r6, #5]
    13ac:	2901      	cmp	r1, #1
    13ae:	d00e      	beq.n	13ce <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    13b0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    13b2:	05db      	lsls	r3, r3, #23
    13b4:	0ddb      	lsrs	r3, r3, #23
    13b6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    13b8:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    13ba:	3b01      	subs	r3, #1
    13bc:	b29b      	uxth	r3, r3
    13be:	85f3      	strh	r3, [r6, #46]	; 0x2e
    13c0:	2b00      	cmp	r3, #0
    13c2:	d10c      	bne.n	13de <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    13c4:	3301      	adds	r3, #1
    13c6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    13c8:	3301      	adds	r3, #1
    13ca:	75a3      	strb	r3, [r4, #22]
    13cc:	e007      	b.n	13de <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    13ce:	7851      	ldrb	r1, [r2, #1]
    13d0:	0209      	lsls	r1, r1, #8
    13d2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    13d4:	3202      	adds	r2, #2
    13d6:	62b2      	str	r2, [r6, #40]	; 0x28
    13d8:	e7eb      	b.n	13b2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    13da:	2301      	movs	r3, #1
    13dc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    13de:	07ab      	lsls	r3, r5, #30
    13e0:	d506      	bpl.n	13f0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    13e2:	2302      	movs	r3, #2
    13e4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    13e6:	2200      	movs	r2, #0
    13e8:	3331      	adds	r3, #49	; 0x31
    13ea:	54f2      	strb	r2, [r6, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    13ec:	07fb      	lsls	r3, r7, #31
    13ee:	d428      	bmi.n	1442 <_usart_interrupt_handler+0xce>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    13f0:	076b      	lsls	r3, r5, #29
    13f2:	d510      	bpl.n	1416 <_usart_interrupt_handler+0xa2>

		//if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    13f4:	8b63      	ldrh	r3, [r4, #26]
    13f6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    13f8:	071a      	lsls	r2, r3, #28
    13fa:	d426      	bmi.n	144a <_usart_interrupt_handler+0xd6>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    13fc:	223f      	movs	r2, #63	; 0x3f
    13fe:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1400:	2b00      	cmp	r3, #0
    1402:	d04a      	beq.n	149a <_usart_interrupt_handler+0x126>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1404:	079a      	lsls	r2, r3, #30
    1406:	d523      	bpl.n	1450 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1408:	221a      	movs	r2, #26
    140a:	2332      	movs	r3, #50	; 0x32
    140c:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    140e:	3b30      	subs	r3, #48	; 0x30
    1410:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1412:	077b      	lsls	r3, r7, #29
    1414:	d43d      	bmi.n	1492 <_usart_interrupt_handler+0x11e>
			//usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		//}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1416:	06eb      	lsls	r3, r5, #27
    1418:	d504      	bpl.n	1424 <_usart_interrupt_handler+0xb0>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    141a:	2310      	movs	r3, #16
    141c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    141e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1420:	06fb      	lsls	r3, r7, #27
    1422:	d440      	bmi.n	14a6 <_usart_interrupt_handler+0x132>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1424:	06ab      	lsls	r3, r5, #26
    1426:	d504      	bpl.n	1432 <_usart_interrupt_handler+0xbe>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1428:	2320      	movs	r3, #32
    142a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    142c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    142e:	073b      	lsls	r3, r7, #28
    1430:	d43d      	bmi.n	14ae <_usart_interrupt_handler+0x13a>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1432:	072b      	lsls	r3, r5, #28
    1434:	d504      	bpl.n	1440 <_usart_interrupt_handler+0xcc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1436:	2308      	movs	r3, #8
    1438:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    143a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    143c:	06bb      	lsls	r3, r7, #26
    143e:	d43a      	bmi.n	14b6 <_usart_interrupt_handler+0x142>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1442:	0030      	movs	r0, r6
    1444:	68f3      	ldr	r3, [r6, #12]
    1446:	4798      	blx	r3
    1448:	e7d2      	b.n	13f0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    144a:	2237      	movs	r2, #55	; 0x37
    144c:	4013      	ands	r3, r2
    144e:	e7d7      	b.n	1400 <_usart_interrupt_handler+0x8c>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1450:	075a      	lsls	r2, r3, #29
    1452:	d505      	bpl.n	1460 <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1454:	221e      	movs	r2, #30
    1456:	2332      	movs	r3, #50	; 0x32
    1458:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    145a:	3b2e      	subs	r3, #46	; 0x2e
    145c:	8363      	strh	r3, [r4, #26]
    145e:	e7d8      	b.n	1412 <_usart_interrupt_handler+0x9e>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1460:	07da      	lsls	r2, r3, #31
    1462:	d505      	bpl.n	1470 <_usart_interrupt_handler+0xfc>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1464:	2213      	movs	r2, #19
    1466:	2332      	movs	r3, #50	; 0x32
    1468:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    146a:	3b31      	subs	r3, #49	; 0x31
    146c:	8363      	strh	r3, [r4, #26]
    146e:	e7d0      	b.n	1412 <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1470:	06da      	lsls	r2, r3, #27
    1472:	d505      	bpl.n	1480 <_usart_interrupt_handler+0x10c>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1474:	2242      	movs	r2, #66	; 0x42
    1476:	2332      	movs	r3, #50	; 0x32
    1478:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    147a:	3b22      	subs	r3, #34	; 0x22
    147c:	8363      	strh	r3, [r4, #26]
    147e:	e7c8      	b.n	1412 <_usart_interrupt_handler+0x9e>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1480:	2220      	movs	r2, #32
    1482:	421a      	tst	r2, r3
    1484:	d0c5      	beq.n	1412 <_usart_interrupt_handler+0x9e>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1486:	3221      	adds	r2, #33	; 0x21
    1488:	2332      	movs	r3, #50	; 0x32
    148a:	54f2      	strb	r2, [r6, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    148c:	3b12      	subs	r3, #18
    148e:	8363      	strh	r3, [r4, #26]
    1490:	e7bf      	b.n	1412 <_usart_interrupt_handler+0x9e>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1492:	0030      	movs	r0, r6
    1494:	6973      	ldr	r3, [r6, #20]
    1496:	4798      	blx	r3
    1498:	e7bd      	b.n	1416 <_usart_interrupt_handler+0xa2>
			if (callback_status
    149a:	07bb      	lsls	r3, r7, #30
    149c:	d5bb      	bpl.n	1416 <_usart_interrupt_handler+0xa2>
				(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    149e:	0030      	movs	r0, r6
    14a0:	6933      	ldr	r3, [r6, #16]
    14a2:	4798      	blx	r3
    14a4:	e7b7      	b.n	1416 <_usart_interrupt_handler+0xa2>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    14a6:	0030      	movs	r0, r6
    14a8:	69f3      	ldr	r3, [r6, #28]
    14aa:	4798      	blx	r3
    14ac:	e7ba      	b.n	1424 <_usart_interrupt_handler+0xb0>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    14ae:	0030      	movs	r0, r6
    14b0:	69b3      	ldr	r3, [r6, #24]
    14b2:	4798      	blx	r3
    14b4:	e7bd      	b.n	1432 <_usart_interrupt_handler+0xbe>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    14b6:	6a33      	ldr	r3, [r6, #32]
    14b8:	0030      	movs	r0, r6
    14ba:	4798      	blx	r3
}
    14bc:	e7c0      	b.n	1440 <_usart_interrupt_handler+0xcc>
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	20000118 	.word	0x20000118

000014c4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    14c4:	4770      	bx	lr
	...

000014c8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    14c8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    14ca:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <_sercom_set_handler+0x2c>)
    14cc:	781b      	ldrb	r3, [r3, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d10c      	bne.n	14ec <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14d2:	4c09      	ldr	r4, [pc, #36]	; (14f8 <_sercom_set_handler+0x30>)
    14d4:	4d09      	ldr	r5, [pc, #36]	; (14fc <_sercom_set_handler+0x34>)
    14d6:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    14d8:	4b09      	ldr	r3, [pc, #36]	; (1500 <_sercom_set_handler+0x38>)
    14da:	2200      	movs	r2, #0
    14dc:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14de:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    14e0:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14e2:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    14e4:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    14e6:	3201      	adds	r2, #1
    14e8:	4b02      	ldr	r3, [pc, #8]	; (14f4 <_sercom_set_handler+0x2c>)
    14ea:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    14ec:	0080      	lsls	r0, r0, #2
    14ee:	4b02      	ldr	r3, [pc, #8]	; (14f8 <_sercom_set_handler+0x30>)
    14f0:	50c1      	str	r1, [r0, r3]
}
    14f2:	bd30      	pop	{r4, r5, pc}
    14f4:	2000002a 	.word	0x2000002a
    14f8:	2000002c 	.word	0x2000002c
    14fc:	000014c5 	.word	0x000014c5
    1500:	20000118 	.word	0x20000118

00001504 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1504:	b510      	push	{r4, lr}
    1506:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1508:	ac01      	add	r4, sp, #4
    150a:	2309      	movs	r3, #9
    150c:	7023      	strb	r3, [r4, #0]
    150e:	3301      	adds	r3, #1
    1510:	7063      	strb	r3, [r4, #1]
    1512:	3301      	adds	r3, #1
    1514:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1516:	4b02      	ldr	r3, [pc, #8]	; (1520 <_sercom_get_interrupt_vector+0x1c>)
    1518:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    151a:	5620      	ldrsb	r0, [r4, r0]
}
    151c:	b002      	add	sp, #8
    151e:	bd10      	pop	{r4, pc}
    1520:	00000541 	.word	0x00000541

00001524 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1524:	b510      	push	{r4, lr}
    1526:	4b02      	ldr	r3, [pc, #8]	; (1530 <SERCOM0_Handler+0xc>)
    1528:	681b      	ldr	r3, [r3, #0]
    152a:	2000      	movs	r0, #0
    152c:	4798      	blx	r3
    152e:	bd10      	pop	{r4, pc}
    1530:	2000002c 	.word	0x2000002c

00001534 <SERCOM1_Handler>:
    1534:	b510      	push	{r4, lr}
    1536:	4b02      	ldr	r3, [pc, #8]	; (1540 <SERCOM1_Handler+0xc>)
    1538:	685b      	ldr	r3, [r3, #4]
    153a:	2001      	movs	r0, #1
    153c:	4798      	blx	r3
    153e:	bd10      	pop	{r4, pc}
    1540:	2000002c 	.word	0x2000002c

00001544 <SERCOM2_Handler>:
    1544:	b510      	push	{r4, lr}
    1546:	4b02      	ldr	r3, [pc, #8]	; (1550 <SERCOM2_Handler+0xc>)
    1548:	689b      	ldr	r3, [r3, #8]
    154a:	2002      	movs	r0, #2
    154c:	4798      	blx	r3
    154e:	bd10      	pop	{r4, pc}
    1550:	2000002c 	.word	0x2000002c

00001554 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1554:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1556:	2a00      	cmp	r2, #0
    1558:	d001      	beq.n	155e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    155a:	0018      	movs	r0, r3
    155c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    155e:	008b      	lsls	r3, r1, #2
    1560:	4a06      	ldr	r2, [pc, #24]	; (157c <extint_register_callback+0x28>)
    1562:	589b      	ldr	r3, [r3, r2]
    1564:	2b00      	cmp	r3, #0
    1566:	d003      	beq.n	1570 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1568:	4283      	cmp	r3, r0
    156a:	d005      	beq.n	1578 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    156c:	231d      	movs	r3, #29
    156e:	e7f4      	b.n	155a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    1570:	0089      	lsls	r1, r1, #2
    1572:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    1574:	2300      	movs	r3, #0
    1576:	e7f0      	b.n	155a <extint_register_callback+0x6>
		return STATUS_OK;
    1578:	2300      	movs	r3, #0
    157a:	e7ee      	b.n	155a <extint_register_callback+0x6>
    157c:	200000cc 	.word	0x200000cc

00001580 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1580:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1582:	2900      	cmp	r1, #0
    1584:	d001      	beq.n	158a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    1586:	0018      	movs	r0, r3
    1588:	4770      	bx	lr
		return NULL;
    158a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    158c:	281f      	cmp	r0, #31
    158e:	d800      	bhi.n	1592 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    1590:	4a02      	ldr	r2, [pc, #8]	; (159c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    1592:	2301      	movs	r3, #1
    1594:	4083      	lsls	r3, r0
    1596:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    1598:	2300      	movs	r3, #0
    159a:	e7f4      	b.n	1586 <extint_chan_enable_callback+0x6>
    159c:	40001800 	.word	0x40001800

000015a0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    15a0:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    15a2:	2200      	movs	r2, #0
    15a4:	4b10      	ldr	r3, [pc, #64]	; (15e8 <EIC_Handler+0x48>)
    15a6:	701a      	strb	r2, [r3, #0]
    15a8:	2300      	movs	r3, #0
    15aa:	4910      	ldr	r1, [pc, #64]	; (15ec <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    15ac:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    15ae:	4e10      	ldr	r6, [pc, #64]	; (15f0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    15b0:	4c0d      	ldr	r4, [pc, #52]	; (15e8 <EIC_Handler+0x48>)
    15b2:	e00a      	b.n	15ca <EIC_Handler+0x2a>
		return eics[eic_index];
    15b4:	490d      	ldr	r1, [pc, #52]	; (15ec <EIC_Handler+0x4c>)
    15b6:	e008      	b.n	15ca <EIC_Handler+0x2a>
    15b8:	7823      	ldrb	r3, [r4, #0]
    15ba:	3301      	adds	r3, #1
    15bc:	b2db      	uxtb	r3, r3
    15be:	7023      	strb	r3, [r4, #0]
    15c0:	2b0f      	cmp	r3, #15
    15c2:	d810      	bhi.n	15e6 <EIC_Handler+0x46>
		return NULL;
    15c4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    15c6:	2b1f      	cmp	r3, #31
    15c8:	d9f4      	bls.n	15b4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    15ca:	0028      	movs	r0, r5
    15cc:	4018      	ands	r0, r3
    15ce:	2201      	movs	r2, #1
    15d0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    15d2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    15d4:	4210      	tst	r0, r2
    15d6:	d0ef      	beq.n	15b8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    15d8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    15da:	009b      	lsls	r3, r3, #2
    15dc:	599b      	ldr	r3, [r3, r6]
    15de:	2b00      	cmp	r3, #0
    15e0:	d0ea      	beq.n	15b8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    15e2:	4798      	blx	r3
    15e4:	e7e8      	b.n	15b8 <EIC_Handler+0x18>
			}
		}
	}
}
    15e6:	bd70      	pop	{r4, r5, r6, pc}
    15e8:	20000124 	.word	0x20000124
    15ec:	40001800 	.word	0x40001800
    15f0:	200000cc 	.word	0x200000cc

000015f4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    15f4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    15f6:	2000      	movs	r0, #0
    15f8:	4b08      	ldr	r3, [pc, #32]	; (161c <delay_init+0x28>)
    15fa:	4798      	blx	r3
    15fc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    15fe:	4c08      	ldr	r4, [pc, #32]	; (1620 <delay_init+0x2c>)
    1600:	21fa      	movs	r1, #250	; 0xfa
    1602:	0089      	lsls	r1, r1, #2
    1604:	47a0      	blx	r4
    1606:	4b07      	ldr	r3, [pc, #28]	; (1624 <delay_init+0x30>)
    1608:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    160a:	4907      	ldr	r1, [pc, #28]	; (1628 <delay_init+0x34>)
    160c:	0028      	movs	r0, r5
    160e:	47a0      	blx	r4
    1610:	4b06      	ldr	r3, [pc, #24]	; (162c <delay_init+0x38>)
    1612:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1614:	2205      	movs	r2, #5
    1616:	4b06      	ldr	r3, [pc, #24]	; (1630 <delay_init+0x3c>)
    1618:	601a      	str	r2, [r3, #0]
}
    161a:	bd70      	pop	{r4, r5, r6, pc}
    161c:	00002735 	.word	0x00002735
    1620:	00002b11 	.word	0x00002b11
    1624:	20000000 	.word	0x20000000
    1628:	000f4240 	.word	0x000f4240
    162c:	20000004 	.word	0x20000004
    1630:	e000e010 	.word	0xe000e010

00001634 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    1634:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    1636:	4b08      	ldr	r3, [pc, #32]	; (1658 <delay_cycles_us+0x24>)
    1638:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    163a:	4a08      	ldr	r2, [pc, #32]	; (165c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    163c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    163e:	2180      	movs	r1, #128	; 0x80
    1640:	0249      	lsls	r1, r1, #9
	while (n--) {
    1642:	3801      	subs	r0, #1
    1644:	d307      	bcc.n	1656 <delay_cycles_us+0x22>
	if (n > 0) {
    1646:	2c00      	cmp	r4, #0
    1648:	d0fb      	beq.n	1642 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    164a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    164c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    164e:	6813      	ldr	r3, [r2, #0]
    1650:	420b      	tst	r3, r1
    1652:	d0fc      	beq.n	164e <delay_cycles_us+0x1a>
    1654:	e7f5      	b.n	1642 <delay_cycles_us+0xe>
	}
}
    1656:	bd30      	pop	{r4, r5, pc}
    1658:	20000004 	.word	0x20000004
    165c:	e000e010 	.word	0xe000e010

00001660 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1660:	b500      	push	{lr}
    1662:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1664:	ab01      	add	r3, sp, #4
    1666:	2280      	movs	r2, #128	; 0x80
    1668:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    166a:	780a      	ldrb	r2, [r1, #0]
    166c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    166e:	784a      	ldrb	r2, [r1, #1]
    1670:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1672:	788a      	ldrb	r2, [r1, #2]
    1674:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1676:	0019      	movs	r1, r3
    1678:	4b01      	ldr	r3, [pc, #4]	; (1680 <port_pin_set_config+0x20>)
    167a:	4798      	blx	r3
}
    167c:	b003      	add	sp, #12
    167e:	bd00      	pop	{pc}
    1680:	00002945 	.word	0x00002945

00001684 <config_timer_waveform>:
static struct tcc_module tcc_instance0;
uint8_t old_left_dir = 0;
uint8_t old_right_dir = 0;

void config_timer_waveform()
{
    1684:	b570      	push	{r4, r5, r6, lr}
    1686:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
    1688:	4e18      	ldr	r6, [pc, #96]	; (16ec <config_timer_waveform+0x68>)
    168a:	ac01      	add	r4, sp, #4
    168c:	0031      	movs	r1, r6
    168e:	0020      	movs	r0, r4
    1690:	4b17      	ldr	r3, [pc, #92]	; (16f0 <config_timer_waveform+0x6c>)
    1692:	4798      	blx	r3
	struct port_config config_port_pin;
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
	
	//
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV256;
    1694:	2306      	movs	r3, #6
    1696:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = 0x00FF;
    1698:	33f9      	adds	r3, #249	; 0xf9
    169a:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    169c:	3bfd      	subs	r3, #253	; 0xfd
    169e:	7623      	strb	r3, [r4, #24]
	
	//
	config_tcc.compare.wave_polarity[LEFT_MOTOR_CH]		= TCC_WAVE_POLARITY_0;
    16a0:	2300      	movs	r3, #0
    16a2:	75a3      	strb	r3, [r4, #22]
	config_tcc.compare.wave_polarity[RIGHT_MOTOR_CH]	= TCC_WAVE_POLARITY_0;
    16a4:	75e3      	strb	r3, [r4, #23]
	
	
	//
	config_tcc.compare.match[LEFT_MOTOR_CH]				= 0x00;
    16a6:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.pins.enable_wave_out_pin[LEFT_MOTOR_WO]  = true;
    16a8:	2201      	movs	r2, #1
    16aa:	219a      	movs	r1, #154	; 0x9a
    16ac:	5462      	strb	r2, [r4, r1]
	config_tcc.pins.wave_out_pin[LEFT_MOTOR_WO]         = PIN_PA10F_TCC0_WO2; //this is no longer correct--- should be now
    16ae:	3990      	subs	r1, #144	; 0x90
    16b0:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[LEFT_MOTOR_WO]     = PINMUX_PA10F_TCC0_WO2; // this is no longer correct --- should be now
    16b2:	4810      	ldr	r0, [pc, #64]	; (16f4 <config_timer_waveform+0x70>)
    16b4:	3176      	adds	r1, #118	; 0x76
    16b6:	5060      	str	r0, [r4, r1]
	
	
	//
	config_tcc.compare.match[RIGHT_MOTOR_CH]			= 0x00;
    16b8:	62a3      	str	r3, [r4, #40]	; 0x28
	config_tcc.pins.enable_wave_out_pin[RIGHT_MOTOR_WO] = true;
    16ba:	339f      	adds	r3, #159	; 0x9f
    16bc:	54e2      	strb	r2, [r4, r3]
    config_tcc.pins.wave_out_pin[RIGHT_MOTOR_WO]        = PIN_PA17F_TCC0_WO7; // this is no longer correct --- should be now
    16be:	3b8e      	subs	r3, #142	; 0x8e
    16c0:	6763      	str	r3, [r4, #116]	; 0x74
	config_tcc.pins.wave_out_pin_mux[RIGHT_MOTOR_WO]    = PINMUX_PA17F_TCC0_WO7; // this is no longer correct --- should be now
    16c2:	4a0d      	ldr	r2, [pc, #52]	; (16f8 <config_timer_waveform+0x74>)
    16c4:	3383      	adds	r3, #131	; 0x83
    16c6:	50e2      	str	r2, [r4, r3]
	
	
	tcc_init(&tcc_instance0, TCC0, &config_tcc);
    16c8:	4d0c      	ldr	r5, [pc, #48]	; (16fc <config_timer_waveform+0x78>)
    16ca:	0022      	movs	r2, r4
    16cc:	0031      	movs	r1, r6
    16ce:	0028      	movs	r0, r5
    16d0:	4b0b      	ldr	r3, [pc, #44]	; (1700 <config_timer_waveform+0x7c>)
    16d2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    16d4:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    16d6:	2102      	movs	r1, #2
    16d8:	6893      	ldr	r3, [r2, #8]
    16da:	4219      	tst	r1, r3
    16dc:	d1fc      	bne.n	16d8 <config_timer_waveform+0x54>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    16de:	6813      	ldr	r3, [r2, #0]
    16e0:	2102      	movs	r1, #2
    16e2:	430b      	orrs	r3, r1
    16e4:	6013      	str	r3, [r2, #0]
	port_pin_set_config(PIN_PA11, &config_port_pin);
	port_pin_set_output_level(PIN_PA11, true);
	port_pin_set_config(PIN_PA16, &config_port_pin);
	port_pin_set_output_level(PIN_PA16, true);
	*/
}
    16e6:	b02a      	add	sp, #168	; 0xa8
    16e8:	bd70      	pop	{r4, r5, r6, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	42001400 	.word	0x42001400
    16f0:	000005d5 	.word	0x000005d5
    16f4:	000a0005 	.word	0x000a0005
    16f8:	00110005 	.word	0x00110005
    16fc:	20000040 	.word	0x20000040
    1700:	00000711 	.word	0x00000711

00001704 <set_motor_left>:

void set_motor_left(uint8_t dir, uint8_t speed)
{
    1704:	b530      	push	{r4, r5, lr}
    1706:	b083      	sub	sp, #12
	static uint8_t prev_channel = 0; 
	static bool init_left = false;
	speed = 0xFF - speed;
    1708:	43c9      	mvns	r1, r1
    170a:	b2cd      	uxtb	r5, r1
    170c:	2301      	movs	r3, #1
    170e:	4018      	ands	r0, r3
	dir = (~dir) & 0x01 ;
    1710:	4244      	negs	r4, r0
    1712:	4144      	adcs	r4, r0
    1714:	b2e4      	uxtb	r4, r4
	if((old_left_dir != dir) || (init_left == false))
    1716:	4b26      	ldr	r3, [pc, #152]	; (17b0 <set_motor_left+0xac>)
    1718:	781b      	ldrb	r3, [r3, #0]
    171a:	42a3      	cmp	r3, r4
    171c:	d025      	beq.n	176a <set_motor_left+0x66>
	{
		init_left = true;
    171e:	2301      	movs	r3, #1
    1720:	4a24      	ldr	r2, [pc, #144]	; (17b4 <set_motor_left+0xb0>)
    1722:	7013      	strb	r3, [r2, #0]
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    1724:	466a      	mov	r2, sp
    1726:	7013      	strb	r3, [r2, #0]
    1728:	aa01      	add	r2, sp, #4
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    172a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    172c:	2100      	movs	r1, #0
    172e:	70d1      	strb	r1, [r2, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1730:	7053      	strb	r3, [r2, #1]
		// need to configure PWM with opposite pins
		if(dir == 0)
    1732:	2800      	cmp	r0, #0
    1734:	d024      	beq.n	1780 <set_motor_left+0x7c>
		{
			pin_config.mux_position = (uint8_t)PINMUX_PA10F_TCC0_WO2;
    1736:	0011      	movs	r1, r2
    1738:	3304      	adds	r3, #4
    173a:	7013      	strb	r3, [r2, #0]
			system_pinmux_pin_set_config(PIN_PA10F_TCC0_WO2, &pin_config);
    173c:	200a      	movs	r0, #10
    173e:	4b1e      	ldr	r3, [pc, #120]	; (17b8 <set_motor_left+0xb4>)
    1740:	4798      	blx	r3
			port_pin_set_config(PIN_PA11, &config_port_pin);
    1742:	4669      	mov	r1, sp
    1744:	200b      	movs	r0, #11
    1746:	4b1d      	ldr	r3, [pc, #116]	; (17bc <set_motor_left+0xb8>)
    1748:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    174a:	2280      	movs	r2, #128	; 0x80
    174c:	0112      	lsls	r2, r2, #4
    174e:	4b1c      	ldr	r3, [pc, #112]	; (17c0 <set_motor_left+0xbc>)
    1750:	619a      	str	r2, [r3, #24]
			port_pin_set_output_level(PIN_PA11, true);
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CH, speed);
    1752:	002a      	movs	r2, r5
    1754:	2102      	movs	r1, #2
    1756:	481b      	ldr	r0, [pc, #108]	; (17c4 <set_motor_left+0xc0>)
    1758:	4b1b      	ldr	r3, [pc, #108]	; (17c8 <set_motor_left+0xc4>)
    175a:	4798      	blx	r3
			prev_channel = LEFT_MOTOR_CH;
    175c:	2202      	movs	r2, #2
    175e:	4b1b      	ldr	r3, [pc, #108]	; (17cc <set_motor_left+0xc8>)
    1760:	701a      	strb	r2, [r3, #0]
	else
	{
		tcc_set_compare_value(&tcc_instance0, prev_channel, speed);
	}
	
	old_left_dir = dir;
    1762:	4b13      	ldr	r3, [pc, #76]	; (17b0 <set_motor_left+0xac>)
    1764:	701c      	strb	r4, [r3, #0]
}
    1766:	b003      	add	sp, #12
    1768:	bd30      	pop	{r4, r5, pc}
	if((old_left_dir != dir) || (init_left == false))
    176a:	4b12      	ldr	r3, [pc, #72]	; (17b4 <set_motor_left+0xb0>)
    176c:	781b      	ldrb	r3, [r3, #0]
    176e:	2b00      	cmp	r3, #0
    1770:	d0d5      	beq.n	171e <set_motor_left+0x1a>
		tcc_set_compare_value(&tcc_instance0, prev_channel, speed);
    1772:	4b16      	ldr	r3, [pc, #88]	; (17cc <set_motor_left+0xc8>)
    1774:	7819      	ldrb	r1, [r3, #0]
    1776:	002a      	movs	r2, r5
    1778:	4812      	ldr	r0, [pc, #72]	; (17c4 <set_motor_left+0xc0>)
    177a:	4b13      	ldr	r3, [pc, #76]	; (17c8 <set_motor_left+0xc4>)
    177c:	4798      	blx	r3
    177e:	e7f0      	b.n	1762 <set_motor_left+0x5e>
			pin_config.mux_position = (uint8_t)PINMUX_PA11F_TCC0_WO3;
    1780:	a901      	add	r1, sp, #4
    1782:	2305      	movs	r3, #5
    1784:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA11F_TCC0_WO3, &pin_config);
    1786:	200b      	movs	r0, #11
    1788:	4b0b      	ldr	r3, [pc, #44]	; (17b8 <set_motor_left+0xb4>)
    178a:	4798      	blx	r3
			port_pin_set_config(PIN_PA10, &config_port_pin);
    178c:	4669      	mov	r1, sp
    178e:	200a      	movs	r0, #10
    1790:	4b0a      	ldr	r3, [pc, #40]	; (17bc <set_motor_left+0xb8>)
    1792:	4798      	blx	r3
    1794:	2280      	movs	r2, #128	; 0x80
    1796:	00d2      	lsls	r2, r2, #3
    1798:	4b09      	ldr	r3, [pc, #36]	; (17c0 <set_motor_left+0xbc>)
    179a:	619a      	str	r2, [r3, #24]
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CH, speed);
    179c:	002a      	movs	r2, r5
    179e:	2103      	movs	r1, #3
    17a0:	4808      	ldr	r0, [pc, #32]	; (17c4 <set_motor_left+0xc0>)
    17a2:	4b09      	ldr	r3, [pc, #36]	; (17c8 <set_motor_left+0xc4>)
    17a4:	4798      	blx	r3
			prev_channel = RIGHT_MOTOR_CH;
    17a6:	2203      	movs	r2, #3
    17a8:	4b08      	ldr	r3, [pc, #32]	; (17cc <set_motor_left+0xc8>)
    17aa:	701a      	strb	r2, [r3, #0]
	{
    17ac:	e7d9      	b.n	1762 <set_motor_left+0x5e>
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	2000003a 	.word	0x2000003a
    17b4:	20000039 	.word	0x20000039
    17b8:	00002945 	.word	0x00002945
    17bc:	00001661 	.word	0x00001661
    17c0:	41004400 	.word	0x41004400
    17c4:	20000040 	.word	0x20000040
    17c8:	00000a99 	.word	0x00000a99
    17cc:	2000003c 	.word	0x2000003c

000017d0 <set_motor_right>:

// PWM is on AIN1/AIN2 - PA12 and PA20
void set_motor_right(uint8_t dir, uint8_t speed)
{
    17d0:	b530      	push	{r4, r5, lr}
    17d2:	b083      	sub	sp, #12
	static uint8_t prev_channel = 0; 
	static bool init = false;
	speed = 0xFF - speed;
    17d4:	43c9      	mvns	r1, r1
    17d6:	b2cd      	uxtb	r5, r1
    17d8:	2301      	movs	r3, #1
    17da:	4018      	ands	r0, r3
	dir = (~dir) & 0x01 ;
    17dc:	4244      	negs	r4, r0
    17de:	4144      	adcs	r4, r0
    17e0:	b2e4      	uxtb	r4, r4
	if((old_right_dir != dir) || (init == false))
    17e2:	4b26      	ldr	r3, [pc, #152]	; (187c <set_motor_right+0xac>)
    17e4:	781b      	ldrb	r3, [r3, #0]
    17e6:	42a3      	cmp	r3, r4
    17e8:	d025      	beq.n	1836 <set_motor_right+0x66>
	{
		init = true;
    17ea:	2201      	movs	r2, #1
    17ec:	4b24      	ldr	r3, [pc, #144]	; (1880 <set_motor_right+0xb0>)
    17ee:	701a      	strb	r2, [r3, #0]
		struct system_pinmux_config pin_config;
		struct port_config config_port_pin;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    17f0:	466b      	mov	r3, sp
    17f2:	701a      	strb	r2, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    17f4:	ab01      	add	r3, sp, #4
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    17f6:	2100      	movs	r1, #0
    17f8:	7059      	strb	r1, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    17fa:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    17fc:	70d9      	strb	r1, [r3, #3]
		system_pinmux_get_config_defaults(&pin_config);
		// need to configure PWM with opposite pins
		if(dir == 0)
    17fe:	2800      	cmp	r0, #0
    1800:	d024      	beq.n	184c <set_motor_right+0x7c>
		{
			pin_config.mux_position = (uint8_t)PINMUX_PA17F_TCC0_WO7;
    1802:	0019      	movs	r1, r3
    1804:	2305      	movs	r3, #5
    1806:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA17F_TCC0_WO7, &pin_config);
    1808:	2011      	movs	r0, #17
    180a:	4b1e      	ldr	r3, [pc, #120]	; (1884 <set_motor_right+0xb4>)
    180c:	4798      	blx	r3
			port_pin_set_config(PIN_PA16, &config_port_pin);
    180e:	4669      	mov	r1, sp
    1810:	2010      	movs	r0, #16
    1812:	4b1d      	ldr	r3, [pc, #116]	; (1888 <set_motor_right+0xb8>)
    1814:	4798      	blx	r3
    1816:	2280      	movs	r2, #128	; 0x80
    1818:	0252      	lsls	r2, r2, #9
    181a:	4b1c      	ldr	r3, [pc, #112]	; (188c <set_motor_right+0xbc>)
    181c:	619a      	str	r2, [r3, #24]
			port_pin_set_output_level(PIN_PA16, true);
			tcc_set_compare_value(&tcc_instance0, RIGHT_MOTOR_CH, speed);
    181e:	002a      	movs	r2, r5
    1820:	2103      	movs	r1, #3
    1822:	481b      	ldr	r0, [pc, #108]	; (1890 <set_motor_right+0xc0>)
    1824:	4b1b      	ldr	r3, [pc, #108]	; (1894 <set_motor_right+0xc4>)
    1826:	4798      	blx	r3
			prev_channel = RIGHT_MOTOR_CH;
    1828:	2203      	movs	r2, #3
    182a:	4b1b      	ldr	r3, [pc, #108]	; (1898 <set_motor_right+0xc8>)
    182c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		tcc_set_compare_value(&tcc_instance0, prev_channel, speed);
	}
	old_right_dir = dir;
    182e:	4b13      	ldr	r3, [pc, #76]	; (187c <set_motor_right+0xac>)
    1830:	701c      	strb	r4, [r3, #0]
}
    1832:	b003      	add	sp, #12
    1834:	bd30      	pop	{r4, r5, pc}
	if((old_right_dir != dir) || (init == false))
    1836:	4b12      	ldr	r3, [pc, #72]	; (1880 <set_motor_right+0xb0>)
    1838:	781b      	ldrb	r3, [r3, #0]
    183a:	2b00      	cmp	r3, #0
    183c:	d0d5      	beq.n	17ea <set_motor_right+0x1a>
		tcc_set_compare_value(&tcc_instance0, prev_channel, speed);
    183e:	4b16      	ldr	r3, [pc, #88]	; (1898 <set_motor_right+0xc8>)
    1840:	7819      	ldrb	r1, [r3, #0]
    1842:	002a      	movs	r2, r5
    1844:	4812      	ldr	r0, [pc, #72]	; (1890 <set_motor_right+0xc0>)
    1846:	4b13      	ldr	r3, [pc, #76]	; (1894 <set_motor_right+0xc4>)
    1848:	4798      	blx	r3
    184a:	e7f0      	b.n	182e <set_motor_right+0x5e>
			pin_config.mux_position = (uint8_t)PINMUX_PA16F_TCC0_WO6;
    184c:	a901      	add	r1, sp, #4
    184e:	2305      	movs	r3, #5
    1850:	700b      	strb	r3, [r1, #0]
			system_pinmux_pin_set_config(PIN_PA16F_TCC0_WO6, &pin_config);
    1852:	2010      	movs	r0, #16
    1854:	4b0b      	ldr	r3, [pc, #44]	; (1884 <set_motor_right+0xb4>)
    1856:	4798      	blx	r3
			port_pin_set_config(PIN_PA17, &config_port_pin);
    1858:	4669      	mov	r1, sp
    185a:	2011      	movs	r0, #17
    185c:	4b0a      	ldr	r3, [pc, #40]	; (1888 <set_motor_right+0xb8>)
    185e:	4798      	blx	r3
    1860:	2280      	movs	r2, #128	; 0x80
    1862:	0292      	lsls	r2, r2, #10
    1864:	4b09      	ldr	r3, [pc, #36]	; (188c <set_motor_right+0xbc>)
    1866:	619a      	str	r2, [r3, #24]
			tcc_set_compare_value(&tcc_instance0, LEFT_MOTOR_CH, speed);
    1868:	002a      	movs	r2, r5
    186a:	2102      	movs	r1, #2
    186c:	4808      	ldr	r0, [pc, #32]	; (1890 <set_motor_right+0xc0>)
    186e:	4b09      	ldr	r3, [pc, #36]	; (1894 <set_motor_right+0xc4>)
    1870:	4798      	blx	r3
			prev_channel = LEFT_MOTOR_CH;
    1872:	2202      	movs	r2, #2
    1874:	4b08      	ldr	r3, [pc, #32]	; (1898 <set_motor_right+0xc8>)
    1876:	701a      	strb	r2, [r3, #0]
	{
    1878:	e7d9      	b.n	182e <set_motor_right+0x5e>
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	2000003b 	.word	0x2000003b
    1880:	20000038 	.word	0x20000038
    1884:	00002945 	.word	0x00002945
    1888:	00001661 	.word	0x00001661
    188c:	41004400 	.word	0x41004400
    1890:	20000040 	.word	0x20000040
    1894:	00000a99 	.word	0x00000a99
    1898:	2000003d 	.word	0x2000003d

0000189c <configure_motors>:
	set_motor_left(0,0);
	set_motor_right(0,0);
}

void configure_motors()
{
    189c:	b510      	push	{r4, lr}
	config_timer_waveform();
    189e:	4b01      	ldr	r3, [pc, #4]	; (18a4 <configure_motors+0x8>)
    18a0:	4798      	blx	r3
    18a2:	bd10      	pop	{r4, pc}
    18a4:	00001685 	.word	0x00001685

000018a8 <init_power_pin>:
 *  Author: raghu
 */ 
#include <asf.h>
#include "PowerOn.h"
void init_power_pin()
{
    18a8:	b500      	push	{lr}
    18aa:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    18ac:	a901      	add	r1, sp, #4
    18ae:	2301      	movs	r3, #1
    18b0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    18b2:	2200      	movs	r2, #0
    18b4:	708a      	strb	r2, [r1, #2]
	struct port_config power_button_config;
	port_get_config_defaults(&power_button_config);
	power_button_config.direction = PORT_PIN_DIR_OUTPUT;
    18b6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(POWER_ON_PIN,&power_button_config);
    18b8:	2009      	movs	r0, #9
    18ba:	4b02      	ldr	r3, [pc, #8]	; (18c4 <init_power_pin+0x1c>)
    18bc:	4798      	blx	r3
	
}
    18be:	b003      	add	sp, #12
    18c0:	bd00      	pop	{pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	00001661 	.word	0x00001661

000018c8 <power_button_init>:
		}
	}
}
*/
void power_button_init()
{
    18c8:	b510      	push	{r4, lr}
	init_power_pin();
    18ca:	4b03      	ldr	r3, [pc, #12]	; (18d8 <power_button_init+0x10>)
    18cc:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    18ce:	2280      	movs	r2, #128	; 0x80
    18d0:	0092      	lsls	r2, r2, #2
    18d2:	4b02      	ldr	r3, [pc, #8]	; (18dc <power_button_init+0x14>)
    18d4:	619a      	str	r2, [r3, #24]
	power_button_on();
    18d6:	bd10      	pop	{r4, pc}
    18d8:	000018a9 	.word	0x000018a9
    18dc:	41004400 	.word	0x41004400

000018e0 <tc_callback_PWM>:
	}
	//tc_set_inital_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
}

void tc_callback_PWM(struct tc_module *const module_inst)
{
    18e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e2:	46de      	mov	lr, fp
    18e4:	4657      	mov	r7, sl
    18e6:	4646      	mov	r6, r8
    18e8:	b5c0      	push	{r6, r7, lr}
    18ea:	b082      	sub	sp, #8
    18ec:	9001      	str	r0, [sp, #4]
	static uint8_t compare_value_last=0;
	static uint8_t compare_value_current=0;
	static bool first_time = true;
	volatile uint32_t count;
	
	if(first_time == false)
    18ee:	4b4f      	ldr	r3, [pc, #316]	; (1a2c <tc_callback_PWM+0x14c>)
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d000      	beq.n	18f8 <tc_callback_PWM+0x18>
    18f6:	e091      	b.n	1a1c <tc_callback_PWM+0x13c>
	{
		port_pin_set_output_level(pin_array[pin_array_ID++], RGB_ON);
    18f8:	494d      	ldr	r1, [pc, #308]	; (1a30 <tc_callback_PWM+0x150>)
    18fa:	780b      	ldrb	r3, [r1, #0]
    18fc:	1c5a      	adds	r2, r3, #1
    18fe:	b2d2      	uxtb	r2, r2
    1900:	700a      	strb	r2, [r1, #0]
    1902:	494c      	ldr	r1, [pc, #304]	; (1a34 <tc_callback_PWM+0x154>)
    1904:	5cc9      	ldrb	r1, [r1, r3]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1906:	09c8      	lsrs	r0, r1, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1908:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    190a:	2800      	cmp	r0, #0
    190c:	d104      	bne.n	1918 <tc_callback_PWM+0x38>
		return &(ports[port_index]->Group[group_index]);
    190e:	094b      	lsrs	r3, r1, #5
    1910:	01db      	lsls	r3, r3, #7
    1912:	4849      	ldr	r0, [pc, #292]	; (1a38 <tc_callback_PWM+0x158>)
    1914:	4684      	mov	ip, r0
    1916:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1918:	201f      	movs	r0, #31
    191a:	4008      	ands	r0, r1
    191c:	2101      	movs	r1, #1
    191e:	4081      	lsls	r1, r0
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1920:	6159      	str	r1, [r3, #20]
		
		if(compare_array_ID < N_valid_compares-1 )
    1922:	4b46      	ldr	r3, [pc, #280]	; (1a3c <tc_callback_PWM+0x15c>)
    1924:	781e      	ldrb	r6, [r3, #0]
    1926:	4b46      	ldr	r3, [pc, #280]	; (1a40 <tc_callback_PWM+0x160>)
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	3b01      	subs	r3, #1
    192c:	4698      	mov	r8, r3
    192e:	429e      	cmp	r6, r3
    1930:	da6e      	bge.n	1a10 <tc_callback_PWM+0x130>
		{
			compare_value_last = compare_array[compare_array_ID];
    1932:	4844      	ldr	r0, [pc, #272]	; (1a44 <tc_callback_PWM+0x164>)
    1934:	5d81      	ldrb	r1, [r0, r6]
    1936:	4b44      	ldr	r3, [pc, #272]	; (1a48 <tc_callback_PWM+0x168>)
    1938:	7019      	strb	r1, [r3, #0]
			compare_value_current = compare_array[++compare_array_ID];
    193a:	3601      	adds	r6, #1
    193c:	b2f6      	uxtb	r6, r6
    193e:	4b3f      	ldr	r3, [pc, #252]	; (1a3c <tc_callback_PWM+0x15c>)
    1940:	701e      	strb	r6, [r3, #0]
    1942:	0033      	movs	r3, r6
    1944:	5d85      	ldrb	r5, [r0, r6]
    1946:	4841      	ldr	r0, [pc, #260]	; (1a4c <tc_callback_PWM+0x16c>)
    1948:	7005      	strb	r5, [r0, #0]
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    194a:	42a9      	cmp	r1, r5
    194c:	d135      	bne.n	19ba <tc_callback_PWM+0xda>
    194e:	45b0      	cmp	r8, r6
    1950:	db52      	blt.n	19f8 <tc_callback_PWM+0x118>
    1952:	0010      	movs	r0, r2
			{
				//Enable the LED
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    1954:	4937      	ldr	r1, [pc, #220]	; (1a34 <tc_callback_PWM+0x154>)
    1956:	468b      	mov	fp, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1958:	211f      	movs	r1, #31
    195a:	468a      	mov	sl, r1
    195c:	2701      	movs	r7, #1
				compare_value_last = compare_array[compare_array_ID];
    195e:	4c39      	ldr	r4, [pc, #228]	; (1a44 <tc_callback_PWM+0x164>)
    1960:	1ab6      	subs	r6, r6, r2
    1962:	e00f      	b.n	1984 <tc_callback_PWM+0xa4>
    1964:	4655      	mov	r5, sl
    1966:	4029      	ands	r1, r5
    1968:	003d      	movs	r5, r7
    196a:	408d      	lsls	r5, r1
		port_base->OUTCLR.reg = pin_mask;
    196c:	6145      	str	r5, [r0, #20]
    196e:	5ce1      	ldrb	r1, [r4, r3]
    1970:	1993      	adds	r3, r2, r6
    1972:	b2db      	uxtb	r3, r3
				compare_value_current = compare_array[++compare_array_ID];
    1974:	9300      	str	r3, [sp, #0]
    1976:	5ce0      	ldrb	r0, [r4, r3]
    1978:	4684      	mov	ip, r0
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    197a:	4281      	cmp	r1, r0
    197c:	d112      	bne.n	19a4 <tc_callback_PWM+0xc4>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    197e:	0010      	movs	r0, r2
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    1980:	4598      	cmp	r8, r3
    1982:	db2c      	blt.n	19de <tc_callback_PWM+0xfe>
				port_pin_set_output_level(pin_array[pin_array_ID++],RGB_ON);
    1984:	1c42      	adds	r2, r0, #1
    1986:	b2d2      	uxtb	r2, r2
    1988:	4659      	mov	r1, fp
    198a:	5c09      	ldrb	r1, [r1, r0]
	if (port_index < PORT_INST_NUM) {
    198c:	09c8      	lsrs	r0, r1, #7
    198e:	4684      	mov	ip, r0
		return NULL;
    1990:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1992:	4665      	mov	r5, ip
    1994:	2d00      	cmp	r5, #0
    1996:	d1e5      	bne.n	1964 <tc_callback_PWM+0x84>
		return &(ports[port_index]->Group[group_index]);
    1998:	0948      	lsrs	r0, r1, #5
    199a:	01c0      	lsls	r0, r0, #7
    199c:	4d26      	ldr	r5, [pc, #152]	; (1a38 <tc_callback_PWM+0x158>)
    199e:	46ac      	mov	ip, r5
    19a0:	4460      	add	r0, ip
    19a2:	e7df      	b.n	1964 <tc_callback_PWM+0x84>
    19a4:	0005      	movs	r5, r0
    19a6:	4b28      	ldr	r3, [pc, #160]	; (1a48 <tc_callback_PWM+0x168>)
    19a8:	7019      	strb	r1, [r3, #0]
    19aa:	4b24      	ldr	r3, [pc, #144]	; (1a3c <tc_callback_PWM+0x15c>)
    19ac:	4668      	mov	r0, sp
    19ae:	7800      	ldrb	r0, [r0, #0]
    19b0:	7018      	strb	r0, [r3, #0]
    19b2:	4b26      	ldr	r3, [pc, #152]	; (1a4c <tc_callback_PWM+0x16c>)
    19b4:	701d      	strb	r5, [r3, #0]
    19b6:	4b1e      	ldr	r3, [pc, #120]	; (1a30 <tc_callback_PWM+0x150>)
    19b8:	701a      	strb	r2, [r3, #0]
			}
			if(compare_value_current != 255)
    19ba:	2dff      	cmp	r5, #255	; 0xff
    19bc:	d01e      	beq.n	19fc <tc_callback_PWM+0x11c>
			{
				tc_set_count_value(module_inst, compare_value_last);
    19be:	9c01      	ldr	r4, [sp, #4]
    19c0:	0020      	movs	r0, r4
    19c2:	4b23      	ldr	r3, [pc, #140]	; (1a50 <tc_callback_PWM+0x170>)
    19c4:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value_current);
    19c6:	4b21      	ldr	r3, [pc, #132]	; (1a4c <tc_callback_PWM+0x16c>)
    19c8:	781a      	ldrb	r2, [r3, #0]
    19ca:	2100      	movs	r1, #0
    19cc:	0020      	movs	r0, r4
    19ce:	4b21      	ldr	r3, [pc, #132]	; (1a54 <tc_callback_PWM+0x174>)
    19d0:	4798      	blx	r3
	else
	{
		first_time = false;
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
	}
}
    19d2:	b002      	add	sp, #8
    19d4:	bc1c      	pop	{r2, r3, r4}
    19d6:	4690      	mov	r8, r2
    19d8:	469a      	mov	sl, r3
    19da:	46a3      	mov	fp, r4
    19dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19de:	4665      	mov	r5, ip
    19e0:	4b19      	ldr	r3, [pc, #100]	; (1a48 <tc_callback_PWM+0x168>)
    19e2:	7019      	strb	r1, [r3, #0]
    19e4:	4b15      	ldr	r3, [pc, #84]	; (1a3c <tc_callback_PWM+0x15c>)
    19e6:	4668      	mov	r0, sp
    19e8:	7800      	ldrb	r0, [r0, #0]
    19ea:	7018      	strb	r0, [r3, #0]
    19ec:	4b17      	ldr	r3, [pc, #92]	; (1a4c <tc_callback_PWM+0x16c>)
    19ee:	7019      	strb	r1, [r3, #0]
    19f0:	4b0f      	ldr	r3, [pc, #60]	; (1a30 <tc_callback_PWM+0x150>)
    19f2:	701a      	strb	r2, [r3, #0]
				compare_value_current = compare_array[++compare_array_ID];
    19f4:	4661      	mov	r1, ip
    19f6:	e7e0      	b.n	19ba <tc_callback_PWM+0xda>
			while(compare_value_last == compare_value_current && compare_array_ID <= N_valid_compares - 1)
    19f8:	000d      	movs	r5, r1
    19fa:	e7de      	b.n	19ba <tc_callback_PWM+0xda>
				tc_set_count_value(module_inst, compare_value_last);
    19fc:	9c01      	ldr	r4, [sp, #4]
    19fe:	0020      	movs	r0, r4
    1a00:	4b13      	ldr	r3, [pc, #76]	; (1a50 <tc_callback_PWM+0x170>)
    1a02:	4798      	blx	r3
				tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    1a04:	2200      	movs	r2, #0
    1a06:	2100      	movs	r1, #0
    1a08:	0020      	movs	r0, r4
    1a0a:	4b12      	ldr	r3, [pc, #72]	; (1a54 <tc_callback_PWM+0x174>)
    1a0c:	4798      	blx	r3
    1a0e:	e7e0      	b.n	19d2 <tc_callback_PWM+0xf2>
			tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    1a10:	2200      	movs	r2, #0
    1a12:	2100      	movs	r1, #0
    1a14:	9801      	ldr	r0, [sp, #4]
    1a16:	4b0f      	ldr	r3, [pc, #60]	; (1a54 <tc_callback_PWM+0x174>)
    1a18:	4798      	blx	r3
    1a1a:	e7da      	b.n	19d2 <tc_callback_PWM+0xf2>
		first_time = false;
    1a1c:	2200      	movs	r2, #0
    1a1e:	4b03      	ldr	r3, [pc, #12]	; (1a2c <tc_callback_PWM+0x14c>)
    1a20:	701a      	strb	r2, [r3, #0]
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, 0);
    1a22:	2100      	movs	r1, #0
    1a24:	9801      	ldr	r0, [sp, #4]
    1a26:	4b0b      	ldr	r3, [pc, #44]	; (1a54 <tc_callback_PWM+0x174>)
    1a28:	4798      	blx	r3
}
    1a2a:	e7d2      	b.n	19d2 <tc_callback_PWM+0xf2>
    1a2c:	20000009 	.word	0x20000009
    1a30:	2000014f 	.word	0x2000014f
    1a34:	20000144 	.word	0x20000144
    1a38:	41004400 	.word	0x41004400
    1a3c:	20000157 	.word	0x20000157
    1a40:	20000008 	.word	0x20000008
    1a44:	2000014c 	.word	0x2000014c
    1a48:	20000081 	.word	0x20000081
    1a4c:	20000080 	.word	0x20000080
    1a50:	00000d59 	.word	0x00000d59
    1a54:	00000db7 	.word	0x00000db7

00001a58 <transfer_temp_2>:
		temp_compare_array[i] = temp_compare_array_2[i] ;
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <transfer_temp_2+0x14>)
    1a5a:	4a05      	ldr	r2, [pc, #20]	; (1a70 <transfer_temp_2+0x18>)
    1a5c:	7811      	ldrb	r1, [r2, #0]
    1a5e:	7019      	strb	r1, [r3, #0]
    1a60:	7851      	ldrb	r1, [r2, #1]
    1a62:	7059      	strb	r1, [r3, #1]
    1a64:	7892      	ldrb	r2, [r2, #2]
    1a66:	709a      	strb	r2, [r3, #2]
}
    1a68:	4770      	bx	lr
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	20000148 	.word	0x20000148
    1a70:	20000154 	.word	0x20000154

00001a74 <increasing_sort_tag>:
{
    1a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	transfer_temp_2();
    1a76:	4b18      	ldr	r3, [pc, #96]	; (1ad8 <increasing_sort_tag+0x64>)
    1a78:	4798      	blx	r3
    1a7a:	2200      	movs	r2, #0
    1a7c:	2300      	movs	r3, #0
			if(temp_compare_array[j]>temp_compare_array[j+1])
    1a7e:	4d17      	ldr	r5, [pc, #92]	; (1adc <increasing_sort_tag+0x68>)
				temp_compare_array[j] = temp_compare_array[j+1];
    1a80:	002f      	movs	r7, r5
				temp = temp_pin_array[j];
    1a82:	4e17      	ldr	r6, [pc, #92]	; (1ae0 <increasing_sort_tag+0x6c>)
    1a84:	e004      	b.n	1a90 <increasing_sort_tag+0x1c>
		for(j=0;j<TOTAL_LEDS-i-1;j++)
    1a86:	3301      	adds	r3, #1
    1a88:	b2db      	uxtb	r3, r3
    1a8a:	001a      	movs	r2, r3
    1a8c:	2b01      	cmp	r3, #1
    1a8e:	dc0b      	bgt.n	1aa8 <increasing_sort_tag+0x34>
			if(temp_compare_array[j]>temp_compare_array[j+1])
    1a90:	5ca8      	ldrb	r0, [r5, r2]
    1a92:	1c51      	adds	r1, r2, #1
    1a94:	5c6c      	ldrb	r4, [r5, r1]
    1a96:	42a0      	cmp	r0, r4
    1a98:	d9f5      	bls.n	1a86 <increasing_sort_tag+0x12>
				temp_compare_array[j] = temp_compare_array[j+1];
    1a9a:	54bc      	strb	r4, [r7, r2]
				temp_compare_array[j+1]= temp;
    1a9c:	5478      	strb	r0, [r7, r1]
				temp = temp_pin_array[j];
    1a9e:	5cb0      	ldrb	r0, [r6, r2]
				temp_pin_array[j] = temp_pin_array[j+1];
    1aa0:	5c74      	ldrb	r4, [r6, r1]
    1aa2:	54b4      	strb	r4, [r6, r2]
				temp_pin_array[j+1] = temp;
    1aa4:	5470      	strb	r0, [r6, r1]
    1aa6:	e7ee      	b.n	1a86 <increasing_sort_tag+0x12>
		for(j=0;j<TOTAL_LEDS-i-1;j++)
    1aa8:	2200      	movs	r2, #0
    1aaa:	2300      	movs	r3, #0
			if(temp_compare_array[j]>temp_compare_array[j+1])
    1aac:	4d0b      	ldr	r5, [pc, #44]	; (1adc <increasing_sort_tag+0x68>)
				temp_compare_array[j] = temp_compare_array[j+1];
    1aae:	002f      	movs	r7, r5
				temp = temp_pin_array[j];
    1ab0:	4e0b      	ldr	r6, [pc, #44]	; (1ae0 <increasing_sort_tag+0x6c>)
    1ab2:	e003      	b.n	1abc <increasing_sort_tag+0x48>
		for(j=0;j<TOTAL_LEDS-i-1;j++)
    1ab4:	3301      	adds	r3, #1
    1ab6:	b2db      	uxtb	r3, r3
    1ab8:	1e1a      	subs	r2, r3, #0
    1aba:	dc0b      	bgt.n	1ad4 <increasing_sort_tag+0x60>
			if(temp_compare_array[j]>temp_compare_array[j+1])
    1abc:	5ca8      	ldrb	r0, [r5, r2]
    1abe:	1c51      	adds	r1, r2, #1
    1ac0:	5c6c      	ldrb	r4, [r5, r1]
    1ac2:	42a0      	cmp	r0, r4
    1ac4:	d9f6      	bls.n	1ab4 <increasing_sort_tag+0x40>
				temp_compare_array[j] = temp_compare_array[j+1];
    1ac6:	54bc      	strb	r4, [r7, r2]
				temp_compare_array[j+1]= temp;
    1ac8:	5478      	strb	r0, [r7, r1]
				temp = temp_pin_array[j];
    1aca:	5cb0      	ldrb	r0, [r6, r2]
				temp_pin_array[j] = temp_pin_array[j+1];
    1acc:	5c74      	ldrb	r4, [r6, r1]
    1ace:	54b4      	strb	r4, [r6, r2]
				temp_pin_array[j+1] = temp;
    1ad0:	5470      	strb	r0, [r6, r1]
    1ad2:	e7ef      	b.n	1ab4 <increasing_sort_tag+0x40>
}
    1ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	00001a59 	.word	0x00001a59
    1adc:	20000148 	.word	0x20000148
    1ae0:	20000150 	.word	0x20000150

00001ae4 <transfer_temp>:
{
    1ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	N_valid_compares = 0;
    1ae6:	2200      	movs	r2, #0
    1ae8:	4b0d      	ldr	r3, [pc, #52]	; (1b20 <transfer_temp+0x3c>)
    1aea:	701a      	strb	r2, [r3, #0]
    1aec:	2300      	movs	r3, #0
    1aee:	2000      	movs	r0, #0
		if(temp_compare_array[i] != 255)
    1af0:	4d0c      	ldr	r5, [pc, #48]	; (1b24 <transfer_temp+0x40>)
		compare_array[i] = temp_compare_array[i] ;
    1af2:	4f0d      	ldr	r7, [pc, #52]	; (1b28 <transfer_temp+0x44>)
		pin_array[i]  = temp_pin_array[i];
    1af4:	4e0d      	ldr	r6, [pc, #52]	; (1b2c <transfer_temp+0x48>)
    1af6:	4c0e      	ldr	r4, [pc, #56]	; (1b30 <transfer_temp+0x4c>)
    1af8:	e005      	b.n	1b06 <transfer_temp+0x22>
		compare_array[i] = temp_compare_array[i] ;
    1afa:	54f9      	strb	r1, [r7, r3]
		pin_array[i]  = temp_pin_array[i];
    1afc:	5ce1      	ldrb	r1, [r4, r3]
    1afe:	54f1      	strb	r1, [r6, r3]
    1b00:	3301      	adds	r3, #1
	for(i=0;i<TOTAL_LEDS;i++)
    1b02:	2b03      	cmp	r3, #3
    1b04:	d006      	beq.n	1b14 <transfer_temp+0x30>
		if(temp_compare_array[i] != 255)
    1b06:	5ce9      	ldrb	r1, [r5, r3]
    1b08:	29ff      	cmp	r1, #255	; 0xff
    1b0a:	d0f6      	beq.n	1afa <transfer_temp+0x16>
			N_valid_compares++;
    1b0c:	3201      	adds	r2, #1
    1b0e:	b2d2      	uxtb	r2, r2
    1b10:	2001      	movs	r0, #1
    1b12:	e7f2      	b.n	1afa <transfer_temp+0x16>
    1b14:	2800      	cmp	r0, #0
    1b16:	d100      	bne.n	1b1a <transfer_temp+0x36>
}
    1b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b1a:	4b01      	ldr	r3, [pc, #4]	; (1b20 <transfer_temp+0x3c>)
    1b1c:	701a      	strb	r2, [r3, #0]
    1b1e:	e7fb      	b.n	1b18 <transfer_temp+0x34>
    1b20:	20000008 	.word	0x20000008
    1b24:	20000148 	.word	0x20000148
    1b28:	2000014c 	.word	0x2000014c
    1b2c:	20000144 	.word	0x20000144
    1b30:	20000150 	.word	0x20000150

00001b34 <tc_callback_OF>:
{
    1b34:	b570      	push	{r4, r5, r6, lr}
    1b36:	0004      	movs	r4, r0
	port_base->OUTSET.reg = CLEAR_ORB ;
    1b38:	4a1a      	ldr	r2, [pc, #104]	; (1ba4 <tc_callback_OF+0x70>)
    1b3a:	4b1b      	ldr	r3, [pc, #108]	; (1ba8 <tc_callback_OF+0x74>)
    1b3c:	619a      	str	r2, [r3, #24]
	if(update_compare_array == true)
    1b3e:	4b1b      	ldr	r3, [pc, #108]	; (1bac <tc_callback_OF+0x78>)
    1b40:	781b      	ldrb	r3, [r3, #0]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d110      	bne.n	1b68 <tc_callback_OF+0x34>
	compare_array_ID = 0;
    1b46:	2300      	movs	r3, #0
    1b48:	4a19      	ldr	r2, [pc, #100]	; (1bb0 <tc_callback_OF+0x7c>)
    1b4a:	7013      	strb	r3, [r2, #0]
	pin_array_ID  = 0;
    1b4c:	4a19      	ldr	r2, [pc, #100]	; (1bb4 <tc_callback_OF+0x80>)
    1b4e:	7013      	strb	r3, [r2, #0]
	compare_value = compare_array[0];
    1b50:	4b19      	ldr	r3, [pc, #100]	; (1bb8 <tc_callback_OF+0x84>)
    1b52:	781a      	ldrb	r2, [r3, #0]
	if(compare_value != 255)
    1b54:	2aff      	cmp	r2, #255	; 0xff
    1b56:	d120      	bne.n	1b9a <tc_callback_OF+0x66>
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    1b58:	4b18      	ldr	r3, [pc, #96]	; (1bbc <tc_callback_OF+0x88>)
    1b5a:	2110      	movs	r1, #16
    1b5c:	681a      	ldr	r2, [r3, #0]
    1b5e:	7311      	strb	r1, [r2, #12]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    1b60:	7e5a      	ldrb	r2, [r3, #25]
    1b62:	438a      	bics	r2, r1
    1b64:	765a      	strb	r2, [r3, #25]
}
    1b66:	bd70      	pop	{r4, r5, r6, pc}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1b68:	4d14      	ldr	r5, [pc, #80]	; (1bbc <tc_callback_OF+0x88>)
    1b6a:	6828      	ldr	r0, [r5, #0]
    1b6c:	4b14      	ldr	r3, [pc, #80]	; (1bc0 <tc_callback_OF+0x8c>)
    1b6e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1b70:	4b14      	ldr	r3, [pc, #80]	; (1bc4 <tc_callback_OF+0x90>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b72:	5c1b      	ldrb	r3, [r3, r0]
    1b74:	221f      	movs	r2, #31
    1b76:	401a      	ands	r2, r3
    1b78:	2301      	movs	r3, #1
    1b7a:	4093      	lsls	r3, r2
    1b7c:	4a12      	ldr	r2, [pc, #72]	; (1bc8 <tc_callback_OF+0x94>)
    1b7e:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1b80:	7e6b      	ldrb	r3, [r5, #25]
    1b82:	2210      	movs	r2, #16
    1b84:	4313      	orrs	r3, r2
    1b86:	766b      	strb	r3, [r5, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1b88:	682b      	ldr	r3, [r5, #0]
    1b8a:	2210      	movs	r2, #16
    1b8c:	735a      	strb	r2, [r3, #13]
		transfer_temp();
    1b8e:	4b0f      	ldr	r3, [pc, #60]	; (1bcc <tc_callback_OF+0x98>)
    1b90:	4798      	blx	r3
		update_compare_array = false;
    1b92:	2200      	movs	r2, #0
    1b94:	4b05      	ldr	r3, [pc, #20]	; (1bac <tc_callback_OF+0x78>)
    1b96:	701a      	strb	r2, [r3, #0]
    1b98:	e7d5      	b.n	1b46 <tc_callback_OF+0x12>
		tc_set_compare_value(module_inst, TC_COMPARE_CAPTURE_CHANNEL_0, compare_value);
    1b9a:	2100      	movs	r1, #0
    1b9c:	0020      	movs	r0, r4
    1b9e:	4b0c      	ldr	r3, [pc, #48]	; (1bd0 <tc_callback_OF+0x9c>)
    1ba0:	4798      	blx	r3
    1ba2:	e7e0      	b.n	1b66 <tc_callback_OF+0x32>
    1ba4:	c0000100 	.word	0xc0000100
    1ba8:	41004400 	.word	0x41004400
    1bac:	20000082 	.word	0x20000082
    1bb0:	20000157 	.word	0x20000157
    1bb4:	2000014f 	.word	0x2000014f
    1bb8:	2000014c 	.word	0x2000014c
    1bbc:	20000128 	.word	0x20000128
    1bc0:	00000b05 	.word	0x00000b05
    1bc4:	00002d00 	.word	0x00002d00
    1bc8:	e000e100 	.word	0xe000e100
    1bcc:	00001ae5 	.word	0x00001ae5
    1bd0:	00000db7 	.word	0x00000db7

00001bd4 <ORB_timer_init>:
{
    1bd4:	b510      	push	{r4, lr}
    1bd6:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    1bd8:	aa01      	add	r2, sp, #4
    1bda:	2300      	movs	r3, #0
    1bdc:	2100      	movs	r1, #0
    1bde:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    1be0:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    1be2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1be4:	2000      	movs	r0, #0
    1be6:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1be8:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1bea:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1bec:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    1bee:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    1bf0:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    1bf2:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    1bf4:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1bf6:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1bf8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1bfa:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1bfc:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    1bfe:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    1c00:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    1c02:	8593      	strh	r3, [r2, #44]	; 0x2c
	orb_tc_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV256;
    1c04:	23c0      	movs	r3, #192	; 0xc0
    1c06:	00db      	lsls	r3, r3, #3
    1c08:	8093      	strh	r3, [r2, #4]
	orb_tc_config.counter_size = TC_COUNTER_SIZE_8BIT;
    1c0a:	2304      	movs	r3, #4
    1c0c:	7093      	strb	r3, [r2, #2]
	orb_tc_config.counter_8_bit.period = 0XFF;
    1c0e:	21ff      	movs	r1, #255	; 0xff
    1c10:	3325      	adds	r3, #37	; 0x25
    1c12:	54d1      	strb	r1, [r2, r3]
	tc_init(&orb_tc_instance, TC1, &orb_tc_config);
    1c14:	4c07      	ldr	r4, [pc, #28]	; (1c34 <ORB_timer_init+0x60>)
    1c16:	4908      	ldr	r1, [pc, #32]	; (1c38 <ORB_timer_init+0x64>)
    1c18:	0020      	movs	r0, r4
    1c1a:	4b08      	ldr	r3, [pc, #32]	; (1c3c <ORB_timer_init+0x68>)
    1c1c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    1c1e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1c20:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
    1c22:	b25b      	sxtb	r3, r3
    1c24:	2b00      	cmp	r3, #0
    1c26:	dbfb      	blt.n	1c20 <ORB_timer_init+0x4c>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1c28:	8813      	ldrh	r3, [r2, #0]
    1c2a:	2102      	movs	r1, #2
    1c2c:	430b      	orrs	r3, r1
    1c2e:	8013      	strh	r3, [r2, #0]
}
    1c30:	b00e      	add	sp, #56	; 0x38
    1c32:	bd10      	pop	{r4, pc}
    1c34:	20000128 	.word	0x20000128
    1c38:	42001800 	.word	0x42001800
    1c3c:	00000b29 	.word	0x00000b29

00001c40 <set_drivestrength_ORB>:
{
    1c40:	b510      	push	{r4, lr}
	system_pinmux_group_set_output_strength(port_base,CLEAR_ORB,SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    1c42:	2201      	movs	r2, #1
    1c44:	4902      	ldr	r1, [pc, #8]	; (1c50 <set_drivestrength_ORB+0x10>)
    1c46:	4803      	ldr	r0, [pc, #12]	; (1c54 <set_drivestrength_ORB+0x14>)
    1c48:	4b03      	ldr	r3, [pc, #12]	; (1c58 <set_drivestrength_ORB+0x18>)
    1c4a:	4798      	blx	r3
}
    1c4c:	bd10      	pop	{r4, pc}
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	c0000100 	.word	0xc0000100
    1c54:	41004400 	.word	0x41004400
    1c58:	00002975 	.word	0x00002975

00001c5c <ORB_setup_pins>:
{
    1c5c:	b530      	push	{r4, r5, lr}
    1c5e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1c60:	ac01      	add	r4, sp, #4
    1c62:	2301      	movs	r3, #1
    1c64:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1c66:	2200      	movs	r2, #0
    1c68:	70a2      	strb	r2, [r4, #2]
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
    1c6a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LEFT_RGB_R_PIN, &config_port_pin);
    1c6c:	0021      	movs	r1, r4
    1c6e:	201e      	movs	r0, #30
    1c70:	4d07      	ldr	r5, [pc, #28]	; (1c90 <ORB_setup_pins+0x34>)
    1c72:	47a8      	blx	r5
	port_pin_set_config(LEFT_RGB_G_PIN, &config_port_pin);
    1c74:	0021      	movs	r1, r4
    1c76:	2008      	movs	r0, #8
    1c78:	47a8      	blx	r5
	port_pin_set_config(LEFT_RGB_B_PIN, &config_port_pin);
    1c7a:	0021      	movs	r1, r4
    1c7c:	201f      	movs	r0, #31
    1c7e:	47a8      	blx	r5
	set_drivestrength_ORB();
    1c80:	4b04      	ldr	r3, [pc, #16]	; (1c94 <ORB_setup_pins+0x38>)
    1c82:	4798      	blx	r3
	port_base->OUTSET.reg = CLEAR_ORB ;
    1c84:	4a04      	ldr	r2, [pc, #16]	; (1c98 <ORB_setup_pins+0x3c>)
    1c86:	4b05      	ldr	r3, [pc, #20]	; (1c9c <ORB_setup_pins+0x40>)
    1c88:	619a      	str	r2, [r3, #24]
}
    1c8a:	b003      	add	sp, #12
    1c8c:	bd30      	pop	{r4, r5, pc}
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	00001661 	.word	0x00001661
    1c94:	00001c41 	.word	0x00001c41
    1c98:	c0000100 	.word	0xc0000100
    1c9c:	41004400 	.word	0x41004400

00001ca0 <ORB_timer_callbacks_init>:

void ORB_timer_callbacks_init()
{
    1ca0:	b570      	push	{r4, r5, r6, lr}
	tc_register_callback(&orb_tc_instance, tc_callback_OF,TC_CALLBACK_OVERFLOW);
    1ca2:	4d05      	ldr	r5, [pc, #20]	; (1cb8 <ORB_timer_callbacks_init+0x18>)
    1ca4:	2200      	movs	r2, #0
    1ca6:	4905      	ldr	r1, [pc, #20]	; (1cbc <ORB_timer_callbacks_init+0x1c>)
    1ca8:	0028      	movs	r0, r5
    1caa:	4c05      	ldr	r4, [pc, #20]	; (1cc0 <ORB_timer_callbacks_init+0x20>)
    1cac:	47a0      	blx	r4
	tc_register_callback(&orb_tc_instance, tc_callback_PWM,TC_CALLBACK_CC_CHANNEL0);
    1cae:	2202      	movs	r2, #2
    1cb0:	4904      	ldr	r1, [pc, #16]	; (1cc4 <ORB_timer_callbacks_init+0x24>)
    1cb2:	0028      	movs	r0, r5
    1cb4:	47a0      	blx	r4
}
    1cb6:	bd70      	pop	{r4, r5, r6, pc}
    1cb8:	20000128 	.word	0x20000128
    1cbc:	00001b35 	.word	0x00001b35
    1cc0:	00000e07 	.word	0x00000e07
    1cc4:	000018e1 	.word	0x000018e1

00001cc8 <enable_ORB>:

void enable_ORB()
{
    1cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cca:	46ce      	mov	lr, r9
    1ccc:	4647      	mov	r7, r8
    1cce:	b580      	push	{r7, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1cd0:	4c13      	ldr	r4, [pc, #76]	; (1d20 <enable_ORB+0x58>)
    1cd2:	6820      	ldr	r0, [r4, #0]
    1cd4:	4b13      	ldr	r3, [pc, #76]	; (1d24 <enable_ORB+0x5c>)
    1cd6:	4699      	mov	r9, r3
    1cd8:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    1cda:	4b13      	ldr	r3, [pc, #76]	; (1d28 <enable_ORB+0x60>)
    1cdc:	4698      	mov	r8, r3
    1cde:	5c1b      	ldrb	r3, [r3, r0]
    1ce0:	261f      	movs	r6, #31
    1ce2:	4033      	ands	r3, r6
    1ce4:	2501      	movs	r5, #1
    1ce6:	002a      	movs	r2, r5
    1ce8:	409a      	lsls	r2, r3
    1cea:	4f10      	ldr	r7, [pc, #64]	; (1d2c <enable_ORB+0x64>)
    1cec:	603a      	str	r2, [r7, #0]
		module->enable_callback_mask |= (1 << callback_type);
    1cee:	7e63      	ldrb	r3, [r4, #25]
    1cf0:	2201      	movs	r2, #1
    1cf2:	4313      	orrs	r3, r2
    1cf4:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    1cf6:	6823      	ldr	r3, [r4, #0]
    1cf8:	735d      	strb	r5, [r3, #13]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    1cfa:	0018      	movs	r0, r3
    1cfc:	47c8      	blx	r9
    1cfe:	4643      	mov	r3, r8
    1d00:	5c1b      	ldrb	r3, [r3, r0]
    1d02:	401e      	ands	r6, r3
    1d04:	40b5      	lsls	r5, r6
    1d06:	603d      	str	r5, [r7, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    1d08:	7e63      	ldrb	r3, [r4, #25]
    1d0a:	2210      	movs	r2, #16
    1d0c:	4313      	orrs	r3, r2
    1d0e:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    1d10:	6823      	ldr	r3, [r4, #0]
    1d12:	2210      	movs	r2, #16
    1d14:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_OVERFLOW);
	tc_enable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}
    1d16:	bc0c      	pop	{r2, r3}
    1d18:	4690      	mov	r8, r2
    1d1a:	4699      	mov	r9, r3
    1d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	20000128 	.word	0x20000128
    1d24:	00000b05 	.word	0x00000b05
    1d28:	00002d00 	.word	0x00002d00
    1d2c:	e000e100 	.word	0xe000e100

00001d30 <initializing_pin_array>:
	tc_disable_callback(&orb_tc_instance, TC_CALLBACK_CC_CHANNEL0);
}

void initializing_pin_array()
{
	temp_pin_array[0]  = LEFT_RGB_R_PIN;
    1d30:	4b03      	ldr	r3, [pc, #12]	; (1d40 <initializing_pin_array+0x10>)
    1d32:	221e      	movs	r2, #30
    1d34:	701a      	strb	r2, [r3, #0]
	temp_pin_array[1]  = LEFT_RGB_G_PIN;
    1d36:	3a16      	subs	r2, #22
    1d38:	705a      	strb	r2, [r3, #1]
	temp_pin_array[2]  = LEFT_RGB_B_PIN;
    1d3a:	3217      	adds	r2, #23
    1d3c:	709a      	strb	r2, [r3, #2]
}
    1d3e:	4770      	bx	lr
    1d40:	20000150 	.word	0x20000150

00001d44 <initializing_compare_array>:

void initializing_compare_array()
{
	temp_compare_array_2[0] = 255;//Left -- R
    1d44:	4b03      	ldr	r3, [pc, #12]	; (1d54 <initializing_compare_array+0x10>)
    1d46:	22ff      	movs	r2, #255	; 0xff
    1d48:	701a      	strb	r2, [r3, #0]
	temp_compare_array_2[1] = 255;//Left  -- G
    1d4a:	705a      	strb	r2, [r3, #1]
	temp_compare_array_2[2] = 30;//Left  -- B
    1d4c:	3ae1      	subs	r2, #225	; 0xe1
    1d4e:	709a      	strb	r2, [r3, #2]
}
    1d50:	4770      	bx	lr
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	20000154 	.word	0x20000154

00001d58 <ORB_init_array>:


void ORB_init_array()
{
    1d58:	b510      	push	{r4, lr}
	initializing_pin_array();
    1d5a:	4b05      	ldr	r3, [pc, #20]	; (1d70 <ORB_init_array+0x18>)
    1d5c:	4798      	blx	r3
	initializing_compare_array();
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <ORB_init_array+0x1c>)
    1d60:	4798      	blx	r3
	transfer_temp_2();
    1d62:	4b05      	ldr	r3, [pc, #20]	; (1d78 <ORB_init_array+0x20>)
    1d64:	4798      	blx	r3
	increasing_sort_tag();
    1d66:	4b05      	ldr	r3, [pc, #20]	; (1d7c <ORB_init_array+0x24>)
    1d68:	4798      	blx	r3
	transfer_temp();
    1d6a:	4b05      	ldr	r3, [pc, #20]	; (1d80 <ORB_init_array+0x28>)
    1d6c:	4798      	blx	r3
}
    1d6e:	bd10      	pop	{r4, pc}
    1d70:	00001d31 	.word	0x00001d31
    1d74:	00001d45 	.word	0x00001d45
    1d78:	00001a59 	.word	0x00001a59
    1d7c:	00001a75 	.word	0x00001a75
    1d80:	00001ae5 	.word	0x00001ae5

00001d84 <ORB_init>:

void ORB_init()
{
    1d84:	b510      	push	{r4, lr}
	//Timer Initialization
	ORB_timer_init();
    1d86:	4b04      	ldr	r3, [pc, #16]	; (1d98 <ORB_init+0x14>)
    1d88:	4798      	blx	r3
	ORB_setup_pins();
    1d8a:	4b04      	ldr	r3, [pc, #16]	; (1d9c <ORB_init+0x18>)
    1d8c:	4798      	blx	r3
	ORB_init_array();
    1d8e:	4b04      	ldr	r3, [pc, #16]	; (1da0 <ORB_init+0x1c>)
    1d90:	4798      	blx	r3
	//Initialize the timer callbacks
	ORB_timer_callbacks_init();
    1d92:	4b04      	ldr	r3, [pc, #16]	; (1da4 <ORB_init+0x20>)
    1d94:	4798      	blx	r3
	//ORB_leds_off();

    1d96:	bd10      	pop	{r4, pc}
    1d98:	00001bd5 	.word	0x00001bd5
    1d9c:	00001c5d 	.word	0x00001c5d
    1da0:	00001d59 	.word	0x00001d59
    1da4:	00001ca1 	.word	0x00001ca1

00001da8 <update_RGB_LED>:
#include <asf.h>
#include "RGB_LED.h"
#include "RGB_LED_control.h"

void update_RGB_LED(uint8_t led_no, uint8_t led_red , uint8_t led_green, uint8_t led_blue )
{
    1da8:	b510      	push	{r4, lr}
	if(led_no == 0x31)
    1daa:	2831      	cmp	r0, #49	; 0x31
    1dac:	d000      	beq.n	1db0 <update_RGB_LED+0x8>
		increasing_sort_tag();
		transfer_temp();
		update_compare_array = true;
	}
	
    1dae:	bd10      	pop	{r4, pc}
		temp_compare_array_2[0] = 255-led_red;//Left -- R
    1db0:	4808      	ldr	r0, [pc, #32]	; (1dd4 <update_RGB_LED+0x2c>)
    1db2:	43c9      	mvns	r1, r1
    1db4:	7001      	strb	r1, [r0, #0]
		temp_compare_array_2[1] = 255-led_green;//Left  -- G
    1db6:	43d2      	mvns	r2, r2
    1db8:	7042      	strb	r2, [r0, #1]
		temp_compare_array_2[2] = 255-led_blue;//Left  -- B
    1dba:	43db      	mvns	r3, r3
    1dbc:	7083      	strb	r3, [r0, #2]
		initializing_pin_array();
    1dbe:	4b06      	ldr	r3, [pc, #24]	; (1dd8 <update_RGB_LED+0x30>)
    1dc0:	4798      	blx	r3
		increasing_sort_tag();
    1dc2:	4b06      	ldr	r3, [pc, #24]	; (1ddc <update_RGB_LED+0x34>)
    1dc4:	4798      	blx	r3
		transfer_temp();
    1dc6:	4b06      	ldr	r3, [pc, #24]	; (1de0 <update_RGB_LED+0x38>)
    1dc8:	4798      	blx	r3
		update_compare_array = true;
    1dca:	2201      	movs	r2, #1
    1dcc:	4b05      	ldr	r3, [pc, #20]	; (1de4 <update_RGB_LED+0x3c>)
    1dce:	701a      	strb	r2, [r3, #0]
    1dd0:	e7ed      	b.n	1dae <update_RGB_LED+0x6>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	20000154 	.word	0x20000154
    1dd8:	00001d31 	.word	0x00001d31
    1ddc:	00001a75 	.word	0x00001a75
    1de0:	00001ae5 	.word	0x00001ae5
    1de4:	20000082 	.word	0x20000082

00001de8 <usart_read_callback>:




void usart_read_callback(struct usart_module *const usart_module)
{
    1de8:	b530      	push	{r4, r5, lr}
    1dea:	b083      	sub	sp, #12
	volatile uint16_t received_data = 0;
    1dec:	466b      	mov	r3, sp
    1dee:	1d99      	adds	r1, r3, #6
    1df0:	2300      	movs	r3, #0
    1df2:	800b      	strh	r3, [r1, #0]
	received_data_updated = true;
    1df4:	480b      	ldr	r0, [pc, #44]	; (1e24 <usart_read_callback+0x3c>)
    1df6:	2401      	movs	r4, #1
    1df8:	7004      	strb	r4, [r0, #0]
	received_data = (usart_instance.hw->USART.DATA.reg & SERCOM_USART_DATA_MASK);
    1dfa:	4b0b      	ldr	r3, [pc, #44]	; (1e28 <usart_read_callback+0x40>)
    1dfc:	681b      	ldr	r3, [r3, #0]
    1dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1e00:	05db      	lsls	r3, r3, #23
    1e02:	0ddb      	lsrs	r3, r3, #23
    1e04:	800b      	strh	r3, [r1, #0]
	*(ring_buffer + head_ring_buffer) = (uint8_t)received_data;
    1e06:	4a09      	ldr	r2, [pc, #36]	; (1e2c <usart_read_callback+0x44>)
    1e08:	7815      	ldrb	r5, [r2, #0]
    1e0a:	4b09      	ldr	r3, [pc, #36]	; (1e30 <usart_read_callback+0x48>)
    1e0c:	195b      	adds	r3, r3, r5
    1e0e:	8809      	ldrh	r1, [r1, #0]
    1e10:	b2c9      	uxtb	r1, r1
    1e12:	7019      	strb	r1, [r3, #0]
	head_ring_buffer++;
    1e14:	7813      	ldrb	r3, [r2, #0]
    1e16:	3301      	adds	r3, #1
    1e18:	b2db      	uxtb	r3, r3
    1e1a:	7013      	strb	r3, [r2, #0]
	received_data_updated = true;
    1e1c:	7004      	strb	r4, [r0, #0]
}
    1e1e:	b003      	add	sp, #12
    1e20:	bd30      	pop	{r4, r5, pc}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	200000c1 	.word	0x200000c1
    1e28:	20000158 	.word	0x20000158
    1e2c:	200000c0 	.word	0x200000c0
    1e30:	200001ac 	.word	0x200001ac

00001e34 <configure_usart>:
{
    1e34:	b530      	push	{r4, r5, lr}
    1e36:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1e38:	2380      	movs	r3, #128	; 0x80
    1e3a:	05db      	lsls	r3, r3, #23
    1e3c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1e3e:	2300      	movs	r3, #0
    1e40:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1e42:	22ff      	movs	r2, #255	; 0xff
    1e44:	4669      	mov	r1, sp
    1e46:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1e48:	2200      	movs	r2, #0
    1e4a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1e4c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1e4e:	2101      	movs	r1, #1
    1e50:	2024      	movs	r0, #36	; 0x24
    1e52:	466c      	mov	r4, sp
    1e54:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1e56:	3001      	adds	r0, #1
    1e58:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1e5a:	3125      	adds	r1, #37	; 0x25
    1e5c:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1e5e:	3101      	adds	r1, #1
    1e60:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1e62:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1e64:	3105      	adds	r1, #5
    1e66:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1e68:	3101      	adds	r1, #1
    1e6a:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1e6c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1e6e:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1e70:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1e72:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1e74:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1e76:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1e78:	2313      	movs	r3, #19
    1e7a:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1e7c:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = BAUDRATE_SERIAL_DEBUG;
    1e7e:	23e1      	movs	r3, #225	; 0xe1
    1e80:	025b      	lsls	r3, r3, #9
    1e82:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = SERIAL_SERCOM_MUX_SETTING;
    1e84:	23c4      	movs	r3, #196	; 0xc4
    1e86:	039b      	lsls	r3, r3, #14
    1e88:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERIAL_SERCOM_PINMUX_PAD0;
    1e8a:	2301      	movs	r3, #1
    1e8c:	425b      	negs	r3, r3
    1e8e:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERIAL_SERCOM_PINMUX_PAD1;
    1e90:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERIAL_SERCOM_PINMUX_PAD2;
    1e92:	4b10      	ldr	r3, [pc, #64]	; (1ed4 <configure_usart+0xa0>)
    1e94:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERIAL_SERCOM_PINMUX_PAD3;
    1e96:	4b10      	ldr	r3, [pc, #64]	; (1ed8 <configure_usart+0xa4>)
    1e98:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,SERIAL_MODULE, &config_usart) != STATUS_OK)
    1e9a:	4d10      	ldr	r5, [pc, #64]	; (1edc <configure_usart+0xa8>)
    1e9c:	4c10      	ldr	r4, [pc, #64]	; (1ee0 <configure_usart+0xac>)
    1e9e:	466a      	mov	r2, sp
    1ea0:	4910      	ldr	r1, [pc, #64]	; (1ee4 <configure_usart+0xb0>)
    1ea2:	0028      	movs	r0, r5
    1ea4:	47a0      	blx	r4
    1ea6:	2800      	cmp	r0, #0
    1ea8:	d1f9      	bne.n	1e9e <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1eaa:	4d0c      	ldr	r5, [pc, #48]	; (1edc <configure_usart+0xa8>)
    1eac:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1eae:	0020      	movs	r0, r4
    1eb0:	4b0d      	ldr	r3, [pc, #52]	; (1ee8 <configure_usart+0xb4>)
    1eb2:	4798      	blx	r3
    1eb4:	231f      	movs	r3, #31
    1eb6:	4018      	ands	r0, r3
    1eb8:	3b1e      	subs	r3, #30
    1eba:	4083      	lsls	r3, r0
    1ebc:	4a0b      	ldr	r2, [pc, #44]	; (1eec <configure_usart+0xb8>)
    1ebe:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ec0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ec2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d1fc      	bne.n	1ec2 <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1ec8:	6823      	ldr	r3, [r4, #0]
    1eca:	2202      	movs	r2, #2
    1ecc:	4313      	orrs	r3, r2
    1ece:	6023      	str	r3, [r4, #0]
}
    1ed0:	b011      	add	sp, #68	; 0x44
    1ed2:	bd30      	pop	{r4, r5, pc}
    1ed4:	00180002 	.word	0x00180002
    1ed8:	00190002 	.word	0x00190002
    1edc:	20000158 	.word	0x20000158
    1ee0:	00000ebd 	.word	0x00000ebd
    1ee4:	42000c00 	.word	0x42000c00
    1ee8:	00001505 	.word	0x00001505
    1eec:	e000e100 	.word	0xe000e100

00001ef0 <configure_usart_callbacks>:

void configure_usart_callbacks()
{
    1ef0:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    1ef2:	2201      	movs	r2, #1
    1ef4:	4902      	ldr	r1, [pc, #8]	; (1f00 <configure_usart_callbacks+0x10>)
    1ef6:	4803      	ldr	r0, [pc, #12]	; (1f04 <configure_usart_callbacks+0x14>)
    1ef8:	4b03      	ldr	r3, [pc, #12]	; (1f08 <configure_usart_callbacks+0x18>)
    1efa:	4798      	blx	r3
}
    1efc:	bd10      	pop	{r4, pc}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	00001de9 	.word	0x00001de9
    1f04:	20000158 	.word	0x20000158
    1f08:	0000133d 	.word	0x0000133d

00001f0c <enable_USART>:


void enable_USART()
{
    1f0c:	b510      	push	{r4, lr}
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1f0e:	4805      	ldr	r0, [pc, #20]	; (1f24 <enable_USART+0x18>)
    1f10:	2231      	movs	r2, #49	; 0x31
    1f12:	5c83      	ldrb	r3, [r0, r2]
    1f14:	2102      	movs	r1, #2
    1f16:	430b      	orrs	r3, r1
    1f18:	5483      	strb	r3, [r0, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	usart_read_buffer_job(&usart_instance,(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1f1a:	3a30      	subs	r2, #48	; 0x30
    1f1c:	4902      	ldr	r1, [pc, #8]	; (1f28 <enable_USART+0x1c>)
    1f1e:	4b03      	ldr	r3, [pc, #12]	; (1f2c <enable_USART+0x20>)
    1f20:	4798      	blx	r3
}
    1f22:	bd10      	pop	{r4, pc}
    1f24:	20000158 	.word	0x20000158
    1f28:	2000018c 	.word	0x2000018c
    1f2c:	00001355 	.word	0x00001355

00001f30 <serial_init>:

void serial_init()
{
    1f30:	b510      	push	{r4, lr}
	configure_usart();
    1f32:	4b02      	ldr	r3, [pc, #8]	; (1f3c <serial_init+0xc>)
    1f34:	4798      	blx	r3
	configure_usart_callbacks();
    1f36:	4b02      	ldr	r3, [pc, #8]	; (1f40 <serial_init+0x10>)
    1f38:	4798      	blx	r3
}
    1f3a:	bd10      	pop	{r4, pc}
    1f3c:	00001e35 	.word	0x00001e35
    1f40:	00001ef1 	.word	0x00001ef1

00001f44 <serial_receive_bytes>:
extern volatile uint8_t head_ring_buffer;
extern volatile bool received_data_updated;


void serial_receive_bytes(uint8_t count_receive ,uint8_t* receive_data)
{
    1f44:	b570      	push	{r4, r5, r6, lr}
	uint8_t i =0;
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
    1f46:	4d0f      	ldr	r5, [pc, #60]	; (1f84 <serial_receive_bytes+0x40>)
    1f48:	4c0f      	ldr	r4, [pc, #60]	; (1f88 <serial_receive_bytes+0x44>)
	{
		if(serial_timeout)
    1f4a:	4e10      	ldr	r6, [pc, #64]	; (1f8c <serial_receive_bytes+0x48>)
	while((head_ring_buffer - tail_ring_buffer) < count_receive )
    1f4c:	782b      	ldrb	r3, [r5, #0]
    1f4e:	7822      	ldrb	r2, [r4, #0]
    1f50:	1a9b      	subs	r3, r3, r2
    1f52:	4283      	cmp	r3, r0
    1f54:	da03      	bge.n	1f5e <serial_receive_bytes+0x1a>
		if(serial_timeout)
    1f56:	7833      	ldrb	r3, [r6, #0]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d0f7      	beq.n	1f4c <serial_receive_bytes+0x8>
	for(i=1;i<=count_receive;i++)
	{
		receive_data[i] = ring_buffer[tail_ring_buffer];
		tail_ring_buffer++;
	}
}
    1f5c:	bd70      	pop	{r4, r5, r6, pc}
	for(i=1;i<=count_receive;i++)
    1f5e:	2800      	cmp	r0, #0
    1f60:	d0fc      	beq.n	1f5c <serial_receive_bytes+0x18>
    1f62:	2301      	movs	r3, #1
		receive_data[i] = ring_buffer[tail_ring_buffer];
    1f64:	4c08      	ldr	r4, [pc, #32]	; (1f88 <serial_receive_bytes+0x44>)
    1f66:	4d0a      	ldr	r5, [pc, #40]	; (1f90 <serial_receive_bytes+0x4c>)
    1f68:	7822      	ldrb	r2, [r4, #0]
    1f6a:	b2d2      	uxtb	r2, r2
    1f6c:	5caa      	ldrb	r2, [r5, r2]
    1f6e:	54ca      	strb	r2, [r1, r3]
		tail_ring_buffer++;
    1f70:	7822      	ldrb	r2, [r4, #0]
    1f72:	3201      	adds	r2, #1
    1f74:	b2d2      	uxtb	r2, r2
    1f76:	7022      	strb	r2, [r4, #0]
	for(i=1;i<=count_receive;i++)
    1f78:	3301      	adds	r3, #1
    1f7a:	b2db      	uxtb	r3, r3
    1f7c:	4298      	cmp	r0, r3
    1f7e:	d2f3      	bcs.n	1f68 <serial_receive_bytes+0x24>
    1f80:	e7ec      	b.n	1f5c <serial_receive_bytes+0x18>
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	200000c0 	.word	0x200000c0
    1f88:	200000c4 	.word	0x200000c4
    1f8c:	200000c2 	.word	0x200000c2
    1f90:	200001ac 	.word	0x200001ac

00001f94 <serial_main_loop_1>:


void serial_main_loop_1()
{
    1f94:	b530      	push	{r4, r5, lr}
    1f96:	b08d      	sub	sp, #52	; 0x34
	volatile uint8_t received_value[MAX_REC_BYTE];
	volatile static uint8_t prev_rec_value[MAX_REC_BYTE];
	volatile uint8_t transmit_value[MAX_TRANSMIT_VALUE];
	volatile int temp=0;
    1f98:	2300      	movs	r3, #0
    1f9a:	9301      	str	r3, [sp, #4]
	static volatile bool broadcast= false;

	//usart_read_job(&usart_instance ,)
	uint8_t i =0;
	if(head_ring_buffer != tail_ring_buffer)
    1f9c:	4b6a      	ldr	r3, [pc, #424]	; (2148 <serial_main_loop_1+0x1b4>)
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	4a6a      	ldr	r2, [pc, #424]	; (214c <serial_main_loop_1+0x1b8>)
    1fa2:	7812      	ldrb	r2, [r2, #0]
    1fa4:	b2db      	uxtb	r3, r3
    1fa6:	4293      	cmp	r3, r2
    1fa8:	d100      	bne.n	1fac <serial_main_loop_1+0x18>
    1faa:	e0ca      	b.n	2142 <serial_main_loop_1+0x1ae>
	{
		received_value[0] = ring_buffer[tail_ring_buffer];
    1fac:	4a67      	ldr	r2, [pc, #412]	; (214c <serial_main_loop_1+0x1b8>)
    1fae:	7813      	ldrb	r3, [r2, #0]
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	4967      	ldr	r1, [pc, #412]	; (2150 <serial_main_loop_1+0x1bc>)
    1fb4:	5ccb      	ldrb	r3, [r1, r3]
    1fb6:	b2db      	uxtb	r3, r3
    1fb8:	a907      	add	r1, sp, #28
    1fba:	700b      	strb	r3, [r1, #0]
		tail_ring_buffer++;
    1fbc:	7813      	ldrb	r3, [r2, #0]
    1fbe:	3301      	adds	r3, #1
    1fc0:	b2db      	uxtb	r3, r3
    1fc2:	7013      	strb	r3, [r2, #0]
		switch(received_value[0])
    1fc4:	780b      	ldrb	r3, [r1, #0]
    1fc6:	b2db      	uxtb	r3, r3
    1fc8:	2b47      	cmp	r3, #71	; 0x47
    1fca:	d100      	bne.n	1fce <serial_main_loop_1+0x3a>
    1fcc:	e081      	b.n	20d2 <serial_main_loop_1+0x13e>
    1fce:	d91d      	bls.n	200c <serial_main_loop_1+0x78>
    1fd0:	2b4d      	cmp	r3, #77	; 0x4d
    1fd2:	d064      	beq.n	209e <serial_main_loop_1+0x10a>
    1fd4:	2b4f      	cmp	r3, #79	; 0x4f
    1fd6:	d000      	beq.n	1fda <serial_main_loop_1+0x46>
    1fd8:	e09a      	b.n	2110 <serial_main_loop_1+0x17c>
					serial_timeout_count = 0;
				}
				//job_done = SUCCESS;
				break;
			case 'O':
				serial_timeout_count = 0;
    1fda:	2300      	movs	r3, #0
    1fdc:	4a5d      	ldr	r2, [pc, #372]	; (2154 <serial_main_loop_1+0x1c0>)
    1fde:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    1fe0:	4c5d      	ldr	r4, [pc, #372]	; (2158 <serial_main_loop_1+0x1c4>)
    1fe2:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ORB_SET_LEN,received_value);
    1fe4:	a907      	add	r1, sp, #28
    1fe6:	2004      	movs	r0, #4
    1fe8:	4b5c      	ldr	r3, [pc, #368]	; (215c <serial_main_loop_1+0x1c8>)
    1fea:	4798      	blx	r3
				if(serial_timeout == false)
    1fec:	7823      	ldrb	r3, [r4, #0]
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d000      	beq.n	1ff4 <serial_main_loop_1+0x60>
    1ff2:	e092      	b.n	211a <serial_main_loop_1+0x186>
				{
					update_RGB_LED(received_value[1],received_value[2], received_value[3], received_value[4]);
    1ff4:	ab07      	add	r3, sp, #28
    1ff6:	7858      	ldrb	r0, [r3, #1]
    1ff8:	b2c0      	uxtb	r0, r0
    1ffa:	7899      	ldrb	r1, [r3, #2]
    1ffc:	b2c9      	uxtb	r1, r1
    1ffe:	78da      	ldrb	r2, [r3, #3]
    2000:	b2d2      	uxtb	r2, r2
    2002:	791b      	ldrb	r3, [r3, #4]
    2004:	b2db      	uxtb	r3, r3
    2006:	4c56      	ldr	r4, [pc, #344]	; (2160 <serial_main_loop_1+0x1cc>)
    2008:	47a0      	blx	r4
    200a:	e086      	b.n	211a <serial_main_loop_1+0x186>
		switch(received_value[0])
    200c:	2b41      	cmp	r3, #65	; 0x41
    200e:	d17f      	bne.n	2110 <serial_main_loop_1+0x17c>
				serial_timeout_count = 0;
    2010:	2300      	movs	r3, #0
    2012:	4a50      	ldr	r2, [pc, #320]	; (2154 <serial_main_loop_1+0x1c0>)
    2014:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    2016:	4c50      	ldr	r4, [pc, #320]	; (2158 <serial_main_loop_1+0x1c4>)
    2018:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(ALL_SET_LEN,received_value);
    201a:	a907      	add	r1, sp, #28
    201c:	2012      	movs	r0, #18
    201e:	4b4f      	ldr	r3, [pc, #316]	; (215c <serial_main_loop_1+0x1c8>)
    2020:	4798      	blx	r3
				if(serial_timeout == false)
    2022:	7823      	ldrb	r3, [r4, #0]
    2024:	2b00      	cmp	r3, #0
    2026:	d003      	beq.n	2030 <serial_main_loop_1+0x9c>
					serial_timeout_count = 0;
    2028:	2200      	movs	r2, #0
    202a:	4b4a      	ldr	r3, [pc, #296]	; (2154 <serial_main_loop_1+0x1c0>)
    202c:	701a      	strb	r2, [r3, #0]
    202e:	e074      	b.n	211a <serial_main_loop_1+0x186>
					update_RGB_LED(0x31, received_value[4] , received_value[5] , received_value[6]);
    2030:	ac07      	add	r4, sp, #28
    2032:	7921      	ldrb	r1, [r4, #4]
    2034:	b2c9      	uxtb	r1, r1
    2036:	7962      	ldrb	r2, [r4, #5]
    2038:	b2d2      	uxtb	r2, r2
    203a:	79a3      	ldrb	r3, [r4, #6]
    203c:	b2db      	uxtb	r3, r3
    203e:	2031      	movs	r0, #49	; 0x31
    2040:	4d47      	ldr	r5, [pc, #284]	; (2160 <serial_main_loop_1+0x1cc>)
    2042:	47a8      	blx	r5
					if(received_value[17] < 128)
    2044:	7c63      	ldrb	r3, [r4, #17]
    2046:	b25b      	sxtb	r3, r3
    2048:	2b00      	cmp	r3, #0
    204a:	db1a      	blt.n	2082 <serial_main_loop_1+0xee>
						set_motor_left( 0 , received_value[17]);
    204c:	ab07      	add	r3, sp, #28
    204e:	7c59      	ldrb	r1, [r3, #17]
    2050:	b2c9      	uxtb	r1, r1
    2052:	2000      	movs	r0, #0
    2054:	4b43      	ldr	r3, [pc, #268]	; (2164 <serial_main_loop_1+0x1d0>)
    2056:	4798      	blx	r3
					if(received_value[18] < 128)
    2058:	ab07      	add	r3, sp, #28
    205a:	7c9b      	ldrb	r3, [r3, #18]
    205c:	b25b      	sxtb	r3, r3
    205e:	2b00      	cmp	r3, #0
    2060:	db16      	blt.n	2090 <serial_main_loop_1+0xfc>
						set_motor_right( 0 , received_value[18]);
    2062:	ab07      	add	r3, sp, #28
    2064:	7c99      	ldrb	r1, [r3, #18]
    2066:	b2c9      	uxtb	r1, r1
    2068:	2000      	movs	r0, #0
    206a:	4b3f      	ldr	r3, [pc, #252]	; (2168 <serial_main_loop_1+0x1d4>)
    206c:	4798      	blx	r3
{
    206e:	2301      	movs	r3, #1
						prev_rec_value[i] = received_value[i];
    2070:	a807      	add	r0, sp, #28
    2072:	493e      	ldr	r1, [pc, #248]	; (216c <serial_main_loop_1+0x1d8>)
    2074:	5cc2      	ldrb	r2, [r0, r3]
    2076:	b2d2      	uxtb	r2, r2
    2078:	54ca      	strb	r2, [r1, r3]
    207a:	3301      	adds	r3, #1
					for(i=1;i<=ALL_SET_LEN;i++)
    207c:	2b13      	cmp	r3, #19
    207e:	d1f9      	bne.n	2074 <serial_main_loop_1+0xe0>
    2080:	e04b      	b.n	211a <serial_main_loop_1+0x186>
						set_motor_left( 1, received_value[17]);
    2082:	ab07      	add	r3, sp, #28
    2084:	7c59      	ldrb	r1, [r3, #17]
    2086:	b2c9      	uxtb	r1, r1
    2088:	2001      	movs	r0, #1
    208a:	4b36      	ldr	r3, [pc, #216]	; (2164 <serial_main_loop_1+0x1d0>)
    208c:	4798      	blx	r3
    208e:	e7e3      	b.n	2058 <serial_main_loop_1+0xc4>
						set_motor_right( 1, received_value[18]);
    2090:	ab07      	add	r3, sp, #28
    2092:	7c99      	ldrb	r1, [r3, #18]
    2094:	b2c9      	uxtb	r1, r1
    2096:	2001      	movs	r0, #1
    2098:	4b33      	ldr	r3, [pc, #204]	; (2168 <serial_main_loop_1+0x1d4>)
    209a:	4798      	blx	r3
    209c:	e7e7      	b.n	206e <serial_main_loop_1+0xda>
				}
				break;
			
			case 'M':
				serial_timeout_count = 0;
    209e:	2300      	movs	r3, #0
    20a0:	4a2c      	ldr	r2, [pc, #176]	; (2154 <serial_main_loop_1+0x1c0>)
    20a2:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    20a4:	4c2c      	ldr	r4, [pc, #176]	; (2158 <serial_main_loop_1+0x1c4>)
    20a6:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(MOTORS_SET_LEN,received_value);
    20a8:	a907      	add	r1, sp, #28
    20aa:	2004      	movs	r0, #4
    20ac:	4b2b      	ldr	r3, [pc, #172]	; (215c <serial_main_loop_1+0x1c8>)
    20ae:	4798      	blx	r3
				if(serial_timeout == false)
    20b0:	7823      	ldrb	r3, [r4, #0]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d131      	bne.n	211a <serial_main_loop_1+0x186>
					{
						turn_off_motors();
						break;
					}
					*/
					set_motor_left(received_value[1], received_value[2]); // directions and speed are inputs
    20b6:	ac07      	add	r4, sp, #28
    20b8:	7860      	ldrb	r0, [r4, #1]
    20ba:	b2c0      	uxtb	r0, r0
    20bc:	78a1      	ldrb	r1, [r4, #2]
    20be:	b2c9      	uxtb	r1, r1
    20c0:	4b28      	ldr	r3, [pc, #160]	; (2164 <serial_main_loop_1+0x1d0>)
    20c2:	4798      	blx	r3
					set_motor_right(received_value[3], received_value[4]);
    20c4:	78e0      	ldrb	r0, [r4, #3]
    20c6:	b2c0      	uxtb	r0, r0
    20c8:	7921      	ldrb	r1, [r4, #4]
    20ca:	b2c9      	uxtb	r1, r1
    20cc:	4b26      	ldr	r3, [pc, #152]	; (2168 <serial_main_loop_1+0x1d4>)
    20ce:	4798      	blx	r3
    20d0:	e023      	b.n	211a <serial_main_loop_1+0x186>
				}
				break;
			case 'G':
				serial_timeout_count = 0;
    20d2:	2300      	movs	r3, #0
    20d4:	4a1f      	ldr	r2, [pc, #124]	; (2154 <serial_main_loop_1+0x1c0>)
    20d6:	7013      	strb	r3, [r2, #0]
				serial_timeout = false;
    20d8:	4c1f      	ldr	r4, [pc, #124]	; (2158 <serial_main_loop_1+0x1c4>)
    20da:	7023      	strb	r3, [r4, #0]
				serial_receive_bytes(FIRMWARE_SET_LEN,received_value);
    20dc:	a907      	add	r1, sp, #28
    20de:	2001      	movs	r0, #1
    20e0:	4b1e      	ldr	r3, [pc, #120]	; (215c <serial_main_loop_1+0x1c8>)
    20e2:	4798      	blx	r3
				if(serial_timeout == false)
    20e4:	7823      	ldrb	r3, [r4, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d117      	bne.n	211a <serial_main_loop_1+0x186>
				{
					switch(received_value[1])
    20ea:	ab07      	add	r3, sp, #28
    20ec:	785b      	ldrb	r3, [r3, #1]
    20ee:	2b34      	cmp	r3, #52	; 0x34
    20f0:	d113      	bne.n	211a <serial_main_loop_1+0x186>
					{
						case GET_VERSION_NUMBER :
							transmit_value[0] = HARDWARE_MAJOR_VERSION;
    20f2:	a902      	add	r1, sp, #8
    20f4:	3b31      	subs	r3, #49	; 0x31
    20f6:	700b      	strb	r3, [r1, #0]
							transmit_value[1] = HARDWARE_MINOR_VERSION;
    20f8:	2200      	movs	r2, #0
    20fa:	704a      	strb	r2, [r1, #1]
							
							transmit_value[2] = FIRMWARE_MAJOR_VERSION;
    20fc:	3202      	adds	r2, #2
    20fe:	708a      	strb	r2, [r1, #2]
							transmit_value[3] = FIRMWARE_MINOR_VERSION;
    2100:	70cb      	strb	r3, [r1, #3]
							transmit_value[4] = FIRMWARE_REVISION;
    2102:	335e      	adds	r3, #94	; 0x5e
    2104:	710b      	strb	r3, [r1, #4]
							usart_write_buffer_wait(&usart_instance, transmit_value ,VERSION_SET_LEN);
    2106:	3203      	adds	r2, #3
    2108:	4819      	ldr	r0, [pc, #100]	; (2170 <serial_main_loop_1+0x1dc>)
    210a:	4b1a      	ldr	r3, [pc, #104]	; (2174 <serial_main_loop_1+0x1e0>)
    210c:	4798      	blx	r3
    210e:	e004      	b.n	211a <serial_main_loop_1+0x186>
						
					}
				}
				break;
			default:
				head_ring_buffer = 0;
    2110:	2300      	movs	r3, #0
    2112:	4a0d      	ldr	r2, [pc, #52]	; (2148 <serial_main_loop_1+0x1b4>)
    2114:	7013      	strb	r3, [r2, #0]
				tail_ring_buffer = 0;
    2116:	4a0d      	ldr	r2, [pc, #52]	; (214c <serial_main_loop_1+0x1b8>)
    2118:	7013      	strb	r3, [r2, #0]
				break;
		}
		
		if((head_ring_buffer == tail_ring_buffer) || (head_ring_buffer > MAX_LIMIT_RING_BUFFER) || (tail_ring_buffer > MAX_LIMIT_RING_BUFFER) || (serial_timeout == true))
    211a:	4b0b      	ldr	r3, [pc, #44]	; (2148 <serial_main_loop_1+0x1b4>)
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	4a0b      	ldr	r2, [pc, #44]	; (214c <serial_main_loop_1+0x1b8>)
    2120:	7812      	ldrb	r2, [r2, #0]
    2122:	b2db      	uxtb	r3, r3
    2124:	4293      	cmp	r3, r2
    2126:	d007      	beq.n	2138 <serial_main_loop_1+0x1a4>
    2128:	4b07      	ldr	r3, [pc, #28]	; (2148 <serial_main_loop_1+0x1b4>)
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	4b07      	ldr	r3, [pc, #28]	; (214c <serial_main_loop_1+0x1b8>)
    212e:	781b      	ldrb	r3, [r3, #0]
    2130:	4b09      	ldr	r3, [pc, #36]	; (2158 <serial_main_loop_1+0x1c4>)
    2132:	781b      	ldrb	r3, [r3, #0]
    2134:	2b00      	cmp	r3, #0
    2136:	d004      	beq.n	2142 <serial_main_loop_1+0x1ae>
		{
			head_ring_buffer = 0;
    2138:	2300      	movs	r3, #0
    213a:	4a03      	ldr	r2, [pc, #12]	; (2148 <serial_main_loop_1+0x1b4>)
    213c:	7013      	strb	r3, [r2, #0]
			tail_ring_buffer = 0;
    213e:	4a03      	ldr	r2, [pc, #12]	; (214c <serial_main_loop_1+0x1b8>)
    2140:	7013      	strb	r3, [r2, #0]
		}
	 }		
	 
    2142:	b00d      	add	sp, #52	; 0x34
    2144:	bd30      	pop	{r4, r5, pc}
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	200000c0 	.word	0x200000c0
    214c:	200000c4 	.word	0x200000c4
    2150:	200001ac 	.word	0x200001ac
    2154:	200000c3 	.word	0x200000c3
    2158:	200000c2 	.word	0x200000c2
    215c:	00001f45 	.word	0x00001f45
    2160:	00001da9 	.word	0x00001da9
    2164:	00001705 	.word	0x00001705
    2168:	000017d1 	.word	0x000017d1
    216c:	20000084 	.word	0x20000084
    2170:	20000158 	.word	0x20000158
    2174:	0000122d 	.word	0x0000122d

00002178 <new_echo_detection_callback>:
	setup_ultrasound();
}


void new_echo_detection_callback(void)
{
    2178:	b510      	push	{r4, lr}
	//static uint8_t low_battery_adc = 0;
	//bool fade_increase = false;
	//uint8_t i =0;
	//one_minute_count = one_minute_count + 1;
	static uint16_t rising_edge = 0;
	serial_timeout_count = serial_timeout_count + 1;
    217a:	4a11      	ldr	r2, [pc, #68]	; (21c0 <new_echo_detection_callback+0x48>)
    217c:	7813      	ldrb	r3, [r2, #0]
    217e:	3301      	adds	r3, #1
    2180:	b2db      	uxtb	r3, r3
    2182:	7013      	strb	r3, [r2, #0]
	return (port_base->IN.reg & pin_mask);
    2184:	4b0f      	ldr	r3, [pc, #60]	; (21c4 <new_echo_detection_callback+0x4c>)
    2186:	6a1b      	ldr	r3, [r3, #32]
	//count_broadcast = count_broadcast + 1; 
	
	bool pin_state = port_pin_get_input_level(US_ECHO_PIN);
	if(pin_state)
    2188:	065b      	lsls	r3, r3, #25
    218a:	d50f      	bpl.n	21ac <new_echo_detection_callback+0x34>
	{
		if(serial_timeout_count > MAX_SERIAL_TIMEOUT)
    218c:	7813      	ldrb	r3, [r2, #0]
    218e:	b2db      	uxtb	r3, r3
    2190:	2bfa      	cmp	r3, #250	; 0xfa
    2192:	d905      	bls.n	21a0 <new_echo_detection_callback+0x28>
		{
			serial_timeout = true;
    2194:	2201      	movs	r2, #1
    2196:	4b0c      	ldr	r3, [pc, #48]	; (21c8 <new_echo_detection_callback+0x50>)
    2198:	701a      	strb	r2, [r3, #0]
			serial_timeout_count = 0;
    219a:	2200      	movs	r2, #0
    219c:	4b08      	ldr	r3, [pc, #32]	; (21c0 <new_echo_detection_callback+0x48>)
    219e:	701a      	strb	r2, [r3, #0]
			one_minute_count = 0;	 //One Minute
			//check_batterylevel_initial();
		}
		*/
		//check_power_button();
		rising_edge = tc_get_count_value(&tc_instance2);
    21a0:	480a      	ldr	r0, [pc, #40]	; (21cc <new_echo_detection_callback+0x54>)
    21a2:	4b0b      	ldr	r3, [pc, #44]	; (21d0 <new_echo_detection_callback+0x58>)
    21a4:	4798      	blx	r3
    21a6:	4b0b      	ldr	r3, [pc, #44]	; (21d4 <new_echo_detection_callback+0x5c>)
    21a8:	8018      	strh	r0, [r3, #0]
	{
		distance_16b = tc_get_count_value(&tc_instance2) - rising_edge;
		//ready_distance_digital = true;
	}
	
}
    21aa:	bd10      	pop	{r4, pc}
		distance_16b = tc_get_count_value(&tc_instance2) - rising_edge;
    21ac:	4807      	ldr	r0, [pc, #28]	; (21cc <new_echo_detection_callback+0x54>)
    21ae:	4b08      	ldr	r3, [pc, #32]	; (21d0 <new_echo_detection_callback+0x58>)
    21b0:	4798      	blx	r3
    21b2:	4b08      	ldr	r3, [pc, #32]	; (21d4 <new_echo_detection_callback+0x5c>)
    21b4:	881b      	ldrh	r3, [r3, #0]
    21b6:	1ac0      	subs	r0, r0, r3
    21b8:	4b07      	ldr	r3, [pc, #28]	; (21d8 <new_echo_detection_callback+0x60>)
    21ba:	6018      	str	r0, [r3, #0]
}
    21bc:	e7f5      	b.n	21aa <new_echo_detection_callback+0x32>
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	200000c3 	.word	0x200000c3
    21c4:	41004400 	.word	0x41004400
    21c8:	200000c2 	.word	0x200000c2
    21cc:	20000190 	.word	0x20000190
    21d0:	00000d8b 	.word	0x00000d8b
    21d4:	2000009c 	.word	0x2000009c
    21d8:	20000098 	.word	0x20000098

000021dc <configure_pins>:
{
    21dc:	b570      	push	{r4, r5, r6, lr}
    21de:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    21e0:	ac01      	add	r4, sp, #4
    21e2:	2301      	movs	r3, #1
    21e4:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    21e6:	2600      	movs	r6, #0
    21e8:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    21ea:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(US_TRIGGER_PIN, &config_port_pin);
    21ec:	0021      	movs	r1, r4
    21ee:	2007      	movs	r0, #7
    21f0:	4d05      	ldr	r5, [pc, #20]	; (2208 <configure_pins+0x2c>)
    21f2:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    21f4:	2280      	movs	r2, #128	; 0x80
    21f6:	4b05      	ldr	r3, [pc, #20]	; (220c <configure_pins+0x30>)
    21f8:	615a      	str	r2, [r3, #20]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    21fa:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(US_ECHO_PIN, &config_port_pin);
    21fc:	0021      	movs	r1, r4
    21fe:	2006      	movs	r0, #6
    2200:	47a8      	blx	r5
}
    2202:	b002      	add	sp, #8
    2204:	bd70      	pop	{r4, r5, r6, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	00001661 	.word	0x00001661
    220c:	41004400 	.word	0x41004400

00002210 <configure_tc2>:
{
    2210:	b510      	push	{r4, lr}
    2212:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    2214:	aa01      	add	r2, sp, #4
    2216:	2300      	movs	r3, #0
    2218:	2100      	movs	r1, #0
    221a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    221c:	7093      	strb	r3, [r2, #2]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    221e:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2220:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    2222:	2000      	movs	r0, #0
    2224:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2226:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2228:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    222a:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    222c:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    222e:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2230:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2232:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2234:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2236:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2238:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    223a:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    223c:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    223e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2240:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV64; //64
    2242:	23a0      	movs	r3, #160	; 0xa0
    2244:	00db      	lsls	r3, r3, #3
    2246:	8093      	strh	r3, [r2, #4]
	tc_init(&tc_instance2, TC2, &config_tc);
    2248:	4c07      	ldr	r4, [pc, #28]	; (2268 <configure_tc2+0x58>)
    224a:	4908      	ldr	r1, [pc, #32]	; (226c <configure_tc2+0x5c>)
    224c:	0020      	movs	r0, r4
    224e:	4b08      	ldr	r3, [pc, #32]	; (2270 <configure_tc2+0x60>)
    2250:	4798      	blx	r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2252:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2254:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2256:	b25b      	sxtb	r3, r3
    2258:	2b00      	cmp	r3, #0
    225a:	dbfb      	blt.n	2254 <configure_tc2+0x44>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    225c:	8813      	ldrh	r3, [r2, #0]
    225e:	2102      	movs	r1, #2
    2260:	430b      	orrs	r3, r1
    2262:	8013      	strh	r3, [r2, #0]
}
    2264:	b00e      	add	sp, #56	; 0x38
    2266:	bd10      	pop	{r4, pc}
    2268:	20000190 	.word	0x20000190
    226c:	42001c00 	.word	0x42001c00
    2270:	00000b29 	.word	0x00000b29

00002274 <configure_echo_extint>:
{
    2274:	b510      	push	{r4, lr}
    2276:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&config_extint_chan);
    2278:	ac01      	add	r4, sp, #4
    227a:	0020      	movs	r0, r4
    227c:	4b08      	ldr	r3, [pc, #32]	; (22a0 <configure_echo_extint+0x2c>)
    227e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = US_ECHO_PIN_EIC;
    2280:	2306      	movs	r3, #6
    2282:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = US_ECHO_PIN_MUX;
    2284:	23c0      	movs	r3, #192	; 0xc0
    2286:	02db      	lsls	r3, r3, #11
    2288:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_DOWN;
    228a:	2302      	movs	r3, #2
    228c:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    228e:	3301      	adds	r3, #1
    2290:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(US_ECHO_EIC_LINE, &config_extint_chan);
    2292:	0021      	movs	r1, r4
    2294:	2006      	movs	r0, #6
    2296:	4b03      	ldr	r3, [pc, #12]	; (22a4 <configure_echo_extint+0x30>)
    2298:	4798      	blx	r3
}
    229a:	b004      	add	sp, #16
    229c:	bd10      	pop	{r4, pc}
    229e:	46c0      	nop			; (mov r8, r8)
    22a0:	00000231 	.word	0x00000231
    22a4:	00000245 	.word	0x00000245

000022a8 <setup_ultrasound>:
{
    22a8:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTSET.reg = pin_mask;
    22aa:	4c06      	ldr	r4, [pc, #24]	; (22c4 <setup_ultrasound+0x1c>)
    22ac:	2580      	movs	r5, #128	; 0x80
    22ae:	61a5      	str	r5, [r4, #24]
	delay_cycles_us(10); 
    22b0:	200a      	movs	r0, #10
    22b2:	4b05      	ldr	r3, [pc, #20]	; (22c8 <setup_ultrasound+0x20>)
    22b4:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    22b6:	6165      	str	r5, [r4, #20]
	tc_set_count_value(&tc_instance2, 0); 
    22b8:	2100      	movs	r1, #0
    22ba:	4804      	ldr	r0, [pc, #16]	; (22cc <setup_ultrasound+0x24>)
    22bc:	4b04      	ldr	r3, [pc, #16]	; (22d0 <setup_ultrasound+0x28>)
    22be:	4798      	blx	r3
}
    22c0:	bd70      	pop	{r4, r5, r6, pc}
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	41004400 	.word	0x41004400
    22c8:	00001635 	.word	0x00001635
    22cc:	20000190 	.word	0x20000190
    22d0:	00000d59 	.word	0x00000d59

000022d4 <TC4_OV_callback>:
{
    22d4:	b510      	push	{r4, lr}
	setup_ultrasound();
    22d6:	4b01      	ldr	r3, [pc, #4]	; (22dc <TC4_OV_callback+0x8>)
    22d8:	4798      	blx	r3
}
    22da:	bd10      	pop	{r4, pc}
    22dc:	000022a9 	.word	0x000022a9

000022e0 <configure_TC2_callback>:
	distance_ultrasound= &distance_16b;
	return distance_ultrasound;
}

void configure_TC2_callback()
{
    22e0:	b510      	push	{r4, lr}
	tc_register_callback(&tc_instance2, TC4_OV_callback,TC_CALLBACK_OVERFLOW);
    22e2:	4c0c      	ldr	r4, [pc, #48]	; (2314 <configure_TC2_callback+0x34>)
    22e4:	2200      	movs	r2, #0
    22e6:	490c      	ldr	r1, [pc, #48]	; (2318 <configure_TC2_callback+0x38>)
    22e8:	0020      	movs	r0, r4
    22ea:	4b0c      	ldr	r3, [pc, #48]	; (231c <configure_TC2_callback+0x3c>)
    22ec:	4798      	blx	r3
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    22ee:	6820      	ldr	r0, [r4, #0]
    22f0:	4b0b      	ldr	r3, [pc, #44]	; (2320 <configure_TC2_callback+0x40>)
    22f2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    22f4:	4b0b      	ldr	r3, [pc, #44]	; (2324 <configure_TC2_callback+0x44>)
    22f6:	5c1a      	ldrb	r2, [r3, r0]
    22f8:	231f      	movs	r3, #31
    22fa:	4013      	ands	r3, r2
    22fc:	2201      	movs	r2, #1
    22fe:	0011      	movs	r1, r2
    2300:	4099      	lsls	r1, r3
    2302:	4b09      	ldr	r3, [pc, #36]	; (2328 <configure_TC2_callback+0x48>)
    2304:	6019      	str	r1, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    2306:	7e63      	ldrb	r3, [r4, #25]
    2308:	2101      	movs	r1, #1
    230a:	430b      	orrs	r3, r1
    230c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    230e:	6823      	ldr	r3, [r4, #0]
    2310:	735a      	strb	r2, [r3, #13]
	tc_enable_callback(&tc_instance2, TC_CALLBACK_OVERFLOW);
}
    2312:	bd10      	pop	{r4, pc}
    2314:	20000190 	.word	0x20000190
    2318:	000022d5 	.word	0x000022d5
    231c:	00000e07 	.word	0x00000e07
    2320:	00000b05 	.word	0x00000b05
    2324:	00002d04 	.word	0x00002d04
    2328:	e000e100 	.word	0xe000e100

0000232c <configure_ext_callback>:

void configure_ext_callback()
{
    232c:	b510      	push	{r4, lr}
	extint_register_callback(new_echo_detection_callback,US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    232e:	2200      	movs	r2, #0
    2330:	2106      	movs	r1, #6
    2332:	4804      	ldr	r0, [pc, #16]	; (2344 <configure_ext_callback+0x18>)
    2334:	4b04      	ldr	r3, [pc, #16]	; (2348 <configure_ext_callback+0x1c>)
    2336:	4798      	blx	r3
	extint_chan_enable_callback(US_ECHO_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    2338:	2100      	movs	r1, #0
    233a:	2006      	movs	r0, #6
    233c:	4b03      	ldr	r3, [pc, #12]	; (234c <configure_ext_callback+0x20>)
    233e:	4798      	blx	r3
}
    2340:	bd10      	pop	{r4, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	00002179 	.word	0x00002179
    2348:	00001555 	.word	0x00001555
    234c:	00001581 	.word	0x00001581

00002350 <configure_callbacks>:

void configure_callbacks()
{
    2350:	b510      	push	{r4, lr}
	configure_TC2_callback();
    2352:	4b02      	ldr	r3, [pc, #8]	; (235c <configure_callbacks+0xc>)
    2354:	4798      	blx	r3
	configure_ext_callback();
    2356:	4b02      	ldr	r3, [pc, #8]	; (2360 <configure_callbacks+0x10>)
    2358:	4798      	blx	r3
	
}
    235a:	bd10      	pop	{r4, pc}
    235c:	000022e1 	.word	0x000022e1
    2360:	0000232d 	.word	0x0000232d

00002364 <configure_modules>:
void configure_modules()
{
    2364:	b510      	push	{r4, lr}
	configure_tc2();
    2366:	4b02      	ldr	r3, [pc, #8]	; (2370 <configure_modules+0xc>)
    2368:	4798      	blx	r3
	configure_echo_extint();
    236a:	4b02      	ldr	r3, [pc, #8]	; (2374 <configure_modules+0x10>)
    236c:	4798      	blx	r3
}
    236e:	bd10      	pop	{r4, pc}
    2370:	00002211 	.word	0x00002211
    2374:	00002275 	.word	0x00002275

00002378 <configure_ultrasound>:

void configure_ultrasound()
{
    2378:	b510      	push	{r4, lr}
	configure_pins();
    237a:	4b03      	ldr	r3, [pc, #12]	; (2388 <configure_ultrasound+0x10>)
    237c:	4798      	blx	r3
	configure_modules();
    237e:	4b03      	ldr	r3, [pc, #12]	; (238c <configure_ultrasound+0x14>)
    2380:	4798      	blx	r3
	configure_callbacks();
    2382:	4b03      	ldr	r3, [pc, #12]	; (2390 <configure_ultrasound+0x18>)
    2384:	4798      	blx	r3
    2386:	bd10      	pop	{r4, pc}
    2388:	000021dd 	.word	0x000021dd
    238c:	00002365 	.word	0x00002365
    2390:	00002351 	.word	0x00002351

00002394 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2394:	4770      	bx	lr
	...

00002398 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2398:	4b0c      	ldr	r3, [pc, #48]	; (23cc <cpu_irq_enter_critical+0x34>)
    239a:	681b      	ldr	r3, [r3, #0]
    239c:	2b00      	cmp	r3, #0
    239e:	d106      	bne.n	23ae <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    23a0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    23a4:	2b00      	cmp	r3, #0
    23a6:	d007      	beq.n	23b8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    23a8:	2200      	movs	r2, #0
    23aa:	4b09      	ldr	r3, [pc, #36]	; (23d0 <cpu_irq_enter_critical+0x38>)
    23ac:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    23ae:	4a07      	ldr	r2, [pc, #28]	; (23cc <cpu_irq_enter_critical+0x34>)
    23b0:	6813      	ldr	r3, [r2, #0]
    23b2:	3301      	adds	r3, #1
    23b4:	6013      	str	r3, [r2, #0]
}
    23b6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    23b8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    23ba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    23be:	2200      	movs	r2, #0
    23c0:	4b04      	ldr	r3, [pc, #16]	; (23d4 <cpu_irq_enter_critical+0x3c>)
    23c2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    23c4:	3201      	adds	r2, #1
    23c6:	4b02      	ldr	r3, [pc, #8]	; (23d0 <cpu_irq_enter_critical+0x38>)
    23c8:	701a      	strb	r2, [r3, #0]
    23ca:	e7f0      	b.n	23ae <cpu_irq_enter_critical+0x16>
    23cc:	200000a0 	.word	0x200000a0
    23d0:	200000a4 	.word	0x200000a4
    23d4:	2000000a 	.word	0x2000000a

000023d8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    23d8:	4b08      	ldr	r3, [pc, #32]	; (23fc <cpu_irq_leave_critical+0x24>)
    23da:	681a      	ldr	r2, [r3, #0]
    23dc:	3a01      	subs	r2, #1
    23de:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    23e0:	681b      	ldr	r3, [r3, #0]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d109      	bne.n	23fa <cpu_irq_leave_critical+0x22>
    23e6:	4b06      	ldr	r3, [pc, #24]	; (2400 <cpu_irq_leave_critical+0x28>)
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d005      	beq.n	23fa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    23ee:	2201      	movs	r2, #1
    23f0:	4b04      	ldr	r3, [pc, #16]	; (2404 <cpu_irq_leave_critical+0x2c>)
    23f2:	701a      	strb	r2, [r3, #0]
    23f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    23f8:	b662      	cpsie	i
	}
}
    23fa:	4770      	bx	lr
    23fc:	200000a0 	.word	0x200000a0
    2400:	200000a4 	.word	0x200000a4
    2404:	2000000a 	.word	0x2000000a

00002408 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2408:	b510      	push	{r4, lr}
	switch (clock_source) {
    240a:	2808      	cmp	r0, #8
    240c:	d803      	bhi.n	2416 <system_clock_source_get_hz+0xe>
    240e:	0080      	lsls	r0, r0, #2
    2410:	4b1b      	ldr	r3, [pc, #108]	; (2480 <system_clock_source_get_hz+0x78>)
    2412:	581b      	ldr	r3, [r3, r0]
    2414:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2416:	2000      	movs	r0, #0
    2418:	e030      	b.n	247c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    241a:	4b1a      	ldr	r3, [pc, #104]	; (2484 <system_clock_source_get_hz+0x7c>)
    241c:	6918      	ldr	r0, [r3, #16]
    241e:	e02d      	b.n	247c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2420:	4b19      	ldr	r3, [pc, #100]	; (2488 <system_clock_source_get_hz+0x80>)
    2422:	6a1b      	ldr	r3, [r3, #32]
    2424:	059b      	lsls	r3, r3, #22
    2426:	0f9b      	lsrs	r3, r3, #30
    2428:	4818      	ldr	r0, [pc, #96]	; (248c <system_clock_source_get_hz+0x84>)
    242a:	40d8      	lsrs	r0, r3
    242c:	e026      	b.n	247c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    242e:	4b15      	ldr	r3, [pc, #84]	; (2484 <system_clock_source_get_hz+0x7c>)
    2430:	6958      	ldr	r0, [r3, #20]
    2432:	e023      	b.n	247c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2434:	4b13      	ldr	r3, [pc, #76]	; (2484 <system_clock_source_get_hz+0x7c>)
    2436:	681b      	ldr	r3, [r3, #0]
			return 0;
    2438:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    243a:	079b      	lsls	r3, r3, #30
    243c:	d51e      	bpl.n	247c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    243e:	4912      	ldr	r1, [pc, #72]	; (2488 <system_clock_source_get_hz+0x80>)
    2440:	2210      	movs	r2, #16
    2442:	68cb      	ldr	r3, [r1, #12]
    2444:	421a      	tst	r2, r3
    2446:	d0fc      	beq.n	2442 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2448:	4b0e      	ldr	r3, [pc, #56]	; (2484 <system_clock_source_get_hz+0x7c>)
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	075b      	lsls	r3, r3, #29
    244e:	d401      	bmi.n	2454 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2450:	480f      	ldr	r0, [pc, #60]	; (2490 <system_clock_source_get_hz+0x88>)
    2452:	e013      	b.n	247c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2454:	2000      	movs	r0, #0
    2456:	4b0f      	ldr	r3, [pc, #60]	; (2494 <system_clock_source_get_hz+0x8c>)
    2458:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    245a:	4b0a      	ldr	r3, [pc, #40]	; (2484 <system_clock_source_get_hz+0x7c>)
    245c:	689b      	ldr	r3, [r3, #8]
    245e:	041b      	lsls	r3, r3, #16
    2460:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2462:	4358      	muls	r0, r3
    2464:	e00a      	b.n	247c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2466:	2350      	movs	r3, #80	; 0x50
    2468:	4a07      	ldr	r2, [pc, #28]	; (2488 <system_clock_source_get_hz+0x80>)
    246a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    246c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    246e:	075b      	lsls	r3, r3, #29
    2470:	d504      	bpl.n	247c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2472:	4b04      	ldr	r3, [pc, #16]	; (2484 <system_clock_source_get_hz+0x7c>)
    2474:	68d8      	ldr	r0, [r3, #12]
    2476:	e001      	b.n	247c <system_clock_source_get_hz+0x74>
		return 32768UL;
    2478:	2080      	movs	r0, #128	; 0x80
    247a:	0200      	lsls	r0, r0, #8
	}
}
    247c:	bd10      	pop	{r4, pc}
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	00002d08 	.word	0x00002d08
    2484:	200000a8 	.word	0x200000a8
    2488:	40000800 	.word	0x40000800
    248c:	007a1200 	.word	0x007a1200
    2490:	02dc6c00 	.word	0x02dc6c00
    2494:	00002869 	.word	0x00002869

00002498 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2498:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    249a:	490c      	ldr	r1, [pc, #48]	; (24cc <system_clock_source_osc8m_set_config+0x34>)
    249c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    249e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    24a0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    24a2:	7840      	ldrb	r0, [r0, #1]
    24a4:	2201      	movs	r2, #1
    24a6:	4010      	ands	r0, r2
    24a8:	0180      	lsls	r0, r0, #6
    24aa:	2640      	movs	r6, #64	; 0x40
    24ac:	43b3      	bics	r3, r6
    24ae:	4303      	orrs	r3, r0
    24b0:	402a      	ands	r2, r5
    24b2:	01d2      	lsls	r2, r2, #7
    24b4:	2080      	movs	r0, #128	; 0x80
    24b6:	4383      	bics	r3, r0
    24b8:	4313      	orrs	r3, r2
    24ba:	2203      	movs	r2, #3
    24bc:	4022      	ands	r2, r4
    24be:	0212      	lsls	r2, r2, #8
    24c0:	4803      	ldr	r0, [pc, #12]	; (24d0 <system_clock_source_osc8m_set_config+0x38>)
    24c2:	4003      	ands	r3, r0
    24c4:	4313      	orrs	r3, r2
    24c6:	620b      	str	r3, [r1, #32]
}
    24c8:	bd70      	pop	{r4, r5, r6, pc}
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	40000800 	.word	0x40000800
    24d0:	fffffcff 	.word	0xfffffcff

000024d4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    24d4:	2808      	cmp	r0, #8
    24d6:	d803      	bhi.n	24e0 <system_clock_source_enable+0xc>
    24d8:	0080      	lsls	r0, r0, #2
    24da:	4b25      	ldr	r3, [pc, #148]	; (2570 <system_clock_source_enable+0x9c>)
    24dc:	581b      	ldr	r3, [r3, r0]
    24de:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    24e0:	2017      	movs	r0, #23
    24e2:	e044      	b.n	256e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    24e4:	4a23      	ldr	r2, [pc, #140]	; (2574 <system_clock_source_enable+0xa0>)
    24e6:	6a13      	ldr	r3, [r2, #32]
    24e8:	2102      	movs	r1, #2
    24ea:	430b      	orrs	r3, r1
    24ec:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    24ee:	2000      	movs	r0, #0
    24f0:	e03d      	b.n	256e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    24f2:	4a20      	ldr	r2, [pc, #128]	; (2574 <system_clock_source_enable+0xa0>)
    24f4:	6993      	ldr	r3, [r2, #24]
    24f6:	2102      	movs	r1, #2
    24f8:	430b      	orrs	r3, r1
    24fa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    24fc:	2000      	movs	r0, #0
		break;
    24fe:	e036      	b.n	256e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2500:	4a1c      	ldr	r2, [pc, #112]	; (2574 <system_clock_source_enable+0xa0>)
    2502:	8a13      	ldrh	r3, [r2, #16]
    2504:	2102      	movs	r1, #2
    2506:	430b      	orrs	r3, r1
    2508:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    250a:	2000      	movs	r0, #0
		break;
    250c:	e02f      	b.n	256e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    250e:	4a19      	ldr	r2, [pc, #100]	; (2574 <system_clock_source_enable+0xa0>)
    2510:	8a93      	ldrh	r3, [r2, #20]
    2512:	2102      	movs	r1, #2
    2514:	430b      	orrs	r3, r1
    2516:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2518:	2000      	movs	r0, #0
		break;
    251a:	e028      	b.n	256e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    251c:	4916      	ldr	r1, [pc, #88]	; (2578 <system_clock_source_enable+0xa4>)
    251e:	680b      	ldr	r3, [r1, #0]
    2520:	2202      	movs	r2, #2
    2522:	4313      	orrs	r3, r2
    2524:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2526:	4b13      	ldr	r3, [pc, #76]	; (2574 <system_clock_source_enable+0xa0>)
    2528:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    252a:	0019      	movs	r1, r3
    252c:	320e      	adds	r2, #14
    252e:	68cb      	ldr	r3, [r1, #12]
    2530:	421a      	tst	r2, r3
    2532:	d0fc      	beq.n	252e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2534:	4a10      	ldr	r2, [pc, #64]	; (2578 <system_clock_source_enable+0xa4>)
    2536:	6891      	ldr	r1, [r2, #8]
    2538:	4b0e      	ldr	r3, [pc, #56]	; (2574 <system_clock_source_enable+0xa0>)
    253a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    253c:	6852      	ldr	r2, [r2, #4]
    253e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2540:	2200      	movs	r2, #0
    2542:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2544:	0019      	movs	r1, r3
    2546:	3210      	adds	r2, #16
    2548:	68cb      	ldr	r3, [r1, #12]
    254a:	421a      	tst	r2, r3
    254c:	d0fc      	beq.n	2548 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    254e:	4b0a      	ldr	r3, [pc, #40]	; (2578 <system_clock_source_enable+0xa4>)
    2550:	681b      	ldr	r3, [r3, #0]
    2552:	b29b      	uxth	r3, r3
    2554:	4a07      	ldr	r2, [pc, #28]	; (2574 <system_clock_source_enable+0xa0>)
    2556:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2558:	2000      	movs	r0, #0
    255a:	e008      	b.n	256e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    255c:	4905      	ldr	r1, [pc, #20]	; (2574 <system_clock_source_enable+0xa0>)
    255e:	2244      	movs	r2, #68	; 0x44
    2560:	5c8b      	ldrb	r3, [r1, r2]
    2562:	2002      	movs	r0, #2
    2564:	4303      	orrs	r3, r0
    2566:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2568:	2000      	movs	r0, #0
		break;
    256a:	e000      	b.n	256e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    256c:	2000      	movs	r0, #0
}
    256e:	4770      	bx	lr
    2570:	00002d2c 	.word	0x00002d2c
    2574:	40000800 	.word	0x40000800
    2578:	200000a8 	.word	0x200000a8

0000257c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    257c:	b530      	push	{r4, r5, lr}
    257e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2580:	22c2      	movs	r2, #194	; 0xc2
    2582:	00d2      	lsls	r2, r2, #3
    2584:	4b1a      	ldr	r3, [pc, #104]	; (25f0 <system_clock_init+0x74>)
    2586:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2588:	4a1a      	ldr	r2, [pc, #104]	; (25f4 <system_clock_init+0x78>)
    258a:	6853      	ldr	r3, [r2, #4]
    258c:	211e      	movs	r1, #30
    258e:	438b      	bics	r3, r1
    2590:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2592:	2301      	movs	r3, #1
    2594:	466a      	mov	r2, sp
    2596:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2598:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    259a:	4d17      	ldr	r5, [pc, #92]	; (25f8 <system_clock_init+0x7c>)
    259c:	b2e0      	uxtb	r0, r4
    259e:	4669      	mov	r1, sp
    25a0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    25a2:	3401      	adds	r4, #1
    25a4:	2c18      	cmp	r4, #24
    25a6:	d1f9      	bne.n	259c <system_clock_init+0x20>
	config->run_in_standby  = false;
    25a8:	a803      	add	r0, sp, #12
    25aa:	2400      	movs	r4, #0
    25ac:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    25ae:	2501      	movs	r5, #1
    25b0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    25b2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    25b4:	4b11      	ldr	r3, [pc, #68]	; (25fc <system_clock_init+0x80>)
    25b6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    25b8:	2006      	movs	r0, #6
    25ba:	4b11      	ldr	r3, [pc, #68]	; (2600 <system_clock_init+0x84>)
    25bc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    25be:	4b11      	ldr	r3, [pc, #68]	; (2604 <system_clock_init+0x88>)
    25c0:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    25c2:	4b11      	ldr	r3, [pc, #68]	; (2608 <system_clock_init+0x8c>)
    25c4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    25c6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    25c8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    25ca:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    25cc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    25ce:	466b      	mov	r3, sp
    25d0:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    25d2:	2306      	movs	r3, #6
    25d4:	466a      	mov	r2, sp
    25d6:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    25d8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    25da:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    25dc:	4669      	mov	r1, sp
    25de:	2000      	movs	r0, #0
    25e0:	4b0a      	ldr	r3, [pc, #40]	; (260c <system_clock_init+0x90>)
    25e2:	4798      	blx	r3
    25e4:	2000      	movs	r0, #0
    25e6:	4b0a      	ldr	r3, [pc, #40]	; (2610 <system_clock_init+0x94>)
    25e8:	4798      	blx	r3
#endif
}
    25ea:	b005      	add	sp, #20
    25ec:	bd30      	pop	{r4, r5, pc}
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	40000800 	.word	0x40000800
    25f4:	41004000 	.word	0x41004000
    25f8:	0000284d 	.word	0x0000284d
    25fc:	00002499 	.word	0x00002499
    2600:	000024d5 	.word	0x000024d5
    2604:	00002615 	.word	0x00002615
    2608:	40000400 	.word	0x40000400
    260c:	00002639 	.word	0x00002639
    2610:	000026f1 	.word	0x000026f1

00002614 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2614:	4a06      	ldr	r2, [pc, #24]	; (2630 <system_gclk_init+0x1c>)
    2616:	6993      	ldr	r3, [r2, #24]
    2618:	2108      	movs	r1, #8
    261a:	430b      	orrs	r3, r1
    261c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    261e:	2201      	movs	r2, #1
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <system_gclk_init+0x20>)
    2622:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2624:	0019      	movs	r1, r3
    2626:	780b      	ldrb	r3, [r1, #0]
    2628:	4213      	tst	r3, r2
    262a:	d1fc      	bne.n	2626 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    262c:	4770      	bx	lr
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	40000400 	.word	0x40000400
    2634:	40000c00 	.word	0x40000c00

00002638 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2638:	b570      	push	{r4, r5, r6, lr}
    263a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    263c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    263e:	780d      	ldrb	r5, [r1, #0]
    2640:	022d      	lsls	r5, r5, #8
    2642:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2644:	784b      	ldrb	r3, [r1, #1]
    2646:	2b00      	cmp	r3, #0
    2648:	d002      	beq.n	2650 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    264a:	2380      	movs	r3, #128	; 0x80
    264c:	02db      	lsls	r3, r3, #11
    264e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2650:	7a4b      	ldrb	r3, [r1, #9]
    2652:	2b00      	cmp	r3, #0
    2654:	d002      	beq.n	265c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2656:	2380      	movs	r3, #128	; 0x80
    2658:	031b      	lsls	r3, r3, #12
    265a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    265c:	6848      	ldr	r0, [r1, #4]
    265e:	2801      	cmp	r0, #1
    2660:	d910      	bls.n	2684 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2662:	1e43      	subs	r3, r0, #1
    2664:	4218      	tst	r0, r3
    2666:	d134      	bne.n	26d2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2668:	2802      	cmp	r0, #2
    266a:	d930      	bls.n	26ce <system_gclk_gen_set_config+0x96>
    266c:	2302      	movs	r3, #2
    266e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2670:	3201      	adds	r2, #1
						mask <<= 1) {
    2672:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2674:	4298      	cmp	r0, r3
    2676:	d8fb      	bhi.n	2670 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2678:	0212      	lsls	r2, r2, #8
    267a:	4332      	orrs	r2, r6
    267c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    267e:	2380      	movs	r3, #128	; 0x80
    2680:	035b      	lsls	r3, r3, #13
    2682:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2684:	7a0b      	ldrb	r3, [r1, #8]
    2686:	2b00      	cmp	r3, #0
    2688:	d002      	beq.n	2690 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    268a:	2380      	movs	r3, #128	; 0x80
    268c:	039b      	lsls	r3, r3, #14
    268e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2690:	4a13      	ldr	r2, [pc, #76]	; (26e0 <system_gclk_gen_set_config+0xa8>)
    2692:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2694:	b25b      	sxtb	r3, r3
    2696:	2b00      	cmp	r3, #0
    2698:	dbfb      	blt.n	2692 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    269a:	4b12      	ldr	r3, [pc, #72]	; (26e4 <system_gclk_gen_set_config+0xac>)
    269c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    269e:	4b12      	ldr	r3, [pc, #72]	; (26e8 <system_gclk_gen_set_config+0xb0>)
    26a0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26a2:	4a0f      	ldr	r2, [pc, #60]	; (26e0 <system_gclk_gen_set_config+0xa8>)
    26a4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    26a6:	b25b      	sxtb	r3, r3
    26a8:	2b00      	cmp	r3, #0
    26aa:	dbfb      	blt.n	26a4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    26ac:	4b0c      	ldr	r3, [pc, #48]	; (26e0 <system_gclk_gen_set_config+0xa8>)
    26ae:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26b0:	001a      	movs	r2, r3
    26b2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    26b4:	b25b      	sxtb	r3, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	dbfb      	blt.n	26b2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    26ba:	4a09      	ldr	r2, [pc, #36]	; (26e0 <system_gclk_gen_set_config+0xa8>)
    26bc:	6853      	ldr	r3, [r2, #4]
    26be:	2180      	movs	r1, #128	; 0x80
    26c0:	0249      	lsls	r1, r1, #9
    26c2:	400b      	ands	r3, r1
    26c4:	431d      	orrs	r5, r3
    26c6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    26c8:	4b08      	ldr	r3, [pc, #32]	; (26ec <system_gclk_gen_set_config+0xb4>)
    26ca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26cc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    26ce:	2200      	movs	r2, #0
    26d0:	e7d2      	b.n	2678 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    26d2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    26d4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    26d6:	2380      	movs	r3, #128	; 0x80
    26d8:	029b      	lsls	r3, r3, #10
    26da:	431d      	orrs	r5, r3
    26dc:	e7d2      	b.n	2684 <system_gclk_gen_set_config+0x4c>
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	40000c00 	.word	0x40000c00
    26e4:	00002399 	.word	0x00002399
    26e8:	40000c08 	.word	0x40000c08
    26ec:	000023d9 	.word	0x000023d9

000026f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    26f0:	b510      	push	{r4, lr}
    26f2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    26f4:	4a0b      	ldr	r2, [pc, #44]	; (2724 <system_gclk_gen_enable+0x34>)
    26f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    26f8:	b25b      	sxtb	r3, r3
    26fa:	2b00      	cmp	r3, #0
    26fc:	dbfb      	blt.n	26f6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    26fe:	4b0a      	ldr	r3, [pc, #40]	; (2728 <system_gclk_gen_enable+0x38>)
    2700:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2702:	4b0a      	ldr	r3, [pc, #40]	; (272c <system_gclk_gen_enable+0x3c>)
    2704:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2706:	4a07      	ldr	r2, [pc, #28]	; (2724 <system_gclk_gen_enable+0x34>)
    2708:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    270a:	b25b      	sxtb	r3, r3
    270c:	2b00      	cmp	r3, #0
    270e:	dbfb      	blt.n	2708 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2710:	4a04      	ldr	r2, [pc, #16]	; (2724 <system_gclk_gen_enable+0x34>)
    2712:	6851      	ldr	r1, [r2, #4]
    2714:	2380      	movs	r3, #128	; 0x80
    2716:	025b      	lsls	r3, r3, #9
    2718:	430b      	orrs	r3, r1
    271a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    271c:	4b04      	ldr	r3, [pc, #16]	; (2730 <system_gclk_gen_enable+0x40>)
    271e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2720:	bd10      	pop	{r4, pc}
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	40000c00 	.word	0x40000c00
    2728:	00002399 	.word	0x00002399
    272c:	40000c04 	.word	0x40000c04
    2730:	000023d9 	.word	0x000023d9

00002734 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2734:	b570      	push	{r4, r5, r6, lr}
    2736:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2738:	4a1a      	ldr	r2, [pc, #104]	; (27a4 <system_gclk_gen_get_hz+0x70>)
    273a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    273c:	b25b      	sxtb	r3, r3
    273e:	2b00      	cmp	r3, #0
    2740:	dbfb      	blt.n	273a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2742:	4b19      	ldr	r3, [pc, #100]	; (27a8 <system_gclk_gen_get_hz+0x74>)
    2744:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2746:	4b19      	ldr	r3, [pc, #100]	; (27ac <system_gclk_gen_get_hz+0x78>)
    2748:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    274a:	4a16      	ldr	r2, [pc, #88]	; (27a4 <system_gclk_gen_get_hz+0x70>)
    274c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    274e:	b25b      	sxtb	r3, r3
    2750:	2b00      	cmp	r3, #0
    2752:	dbfb      	blt.n	274c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2754:	4e13      	ldr	r6, [pc, #76]	; (27a4 <system_gclk_gen_get_hz+0x70>)
    2756:	6870      	ldr	r0, [r6, #4]
    2758:	04c0      	lsls	r0, r0, #19
    275a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    275c:	4b14      	ldr	r3, [pc, #80]	; (27b0 <system_gclk_gen_get_hz+0x7c>)
    275e:	4798      	blx	r3
    2760:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2762:	4b12      	ldr	r3, [pc, #72]	; (27ac <system_gclk_gen_get_hz+0x78>)
    2764:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2766:	6876      	ldr	r6, [r6, #4]
    2768:	02f6      	lsls	r6, r6, #11
    276a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    276c:	4b11      	ldr	r3, [pc, #68]	; (27b4 <system_gclk_gen_get_hz+0x80>)
    276e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2770:	4a0c      	ldr	r2, [pc, #48]	; (27a4 <system_gclk_gen_get_hz+0x70>)
    2772:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2774:	b25b      	sxtb	r3, r3
    2776:	2b00      	cmp	r3, #0
    2778:	dbfb      	blt.n	2772 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    277a:	4b0a      	ldr	r3, [pc, #40]	; (27a4 <system_gclk_gen_get_hz+0x70>)
    277c:	689c      	ldr	r4, [r3, #8]
    277e:	0224      	lsls	r4, r4, #8
    2780:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2782:	4b0d      	ldr	r3, [pc, #52]	; (27b8 <system_gclk_gen_get_hz+0x84>)
    2784:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2786:	2e00      	cmp	r6, #0
    2788:	d107      	bne.n	279a <system_gclk_gen_get_hz+0x66>
    278a:	2c01      	cmp	r4, #1
    278c:	d907      	bls.n	279e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    278e:	0021      	movs	r1, r4
    2790:	0028      	movs	r0, r5
    2792:	4b0a      	ldr	r3, [pc, #40]	; (27bc <system_gclk_gen_get_hz+0x88>)
    2794:	4798      	blx	r3
    2796:	0005      	movs	r5, r0
    2798:	e001      	b.n	279e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    279a:	3401      	adds	r4, #1
    279c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    279e:	0028      	movs	r0, r5
    27a0:	bd70      	pop	{r4, r5, r6, pc}
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	40000c00 	.word	0x40000c00
    27a8:	00002399 	.word	0x00002399
    27ac:	40000c04 	.word	0x40000c04
    27b0:	00002409 	.word	0x00002409
    27b4:	40000c08 	.word	0x40000c08
    27b8:	000023d9 	.word	0x000023d9
    27bc:	00002b11 	.word	0x00002b11

000027c0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    27c0:	b510      	push	{r4, lr}
    27c2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27c4:	4b06      	ldr	r3, [pc, #24]	; (27e0 <system_gclk_chan_enable+0x20>)
    27c6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27c8:	4b06      	ldr	r3, [pc, #24]	; (27e4 <system_gclk_chan_enable+0x24>)
    27ca:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    27cc:	4a06      	ldr	r2, [pc, #24]	; (27e8 <system_gclk_chan_enable+0x28>)
    27ce:	8853      	ldrh	r3, [r2, #2]
    27d0:	2180      	movs	r1, #128	; 0x80
    27d2:	01c9      	lsls	r1, r1, #7
    27d4:	430b      	orrs	r3, r1
    27d6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    27d8:	4b04      	ldr	r3, [pc, #16]	; (27ec <system_gclk_chan_enable+0x2c>)
    27da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    27dc:	bd10      	pop	{r4, pc}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	00002399 	.word	0x00002399
    27e4:	40000c02 	.word	0x40000c02
    27e8:	40000c00 	.word	0x40000c00
    27ec:	000023d9 	.word	0x000023d9

000027f0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    27f0:	b510      	push	{r4, lr}
    27f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    27f4:	4b0f      	ldr	r3, [pc, #60]	; (2834 <system_gclk_chan_disable+0x44>)
    27f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    27f8:	4b0f      	ldr	r3, [pc, #60]	; (2838 <system_gclk_chan_disable+0x48>)
    27fa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    27fc:	4a0f      	ldr	r2, [pc, #60]	; (283c <system_gclk_chan_disable+0x4c>)
    27fe:	8853      	ldrh	r3, [r2, #2]
    2800:	051b      	lsls	r3, r3, #20
    2802:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2804:	8853      	ldrh	r3, [r2, #2]
    2806:	490e      	ldr	r1, [pc, #56]	; (2840 <system_gclk_chan_disable+0x50>)
    2808:	400b      	ands	r3, r1
    280a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    280c:	8853      	ldrh	r3, [r2, #2]
    280e:	490d      	ldr	r1, [pc, #52]	; (2844 <system_gclk_chan_disable+0x54>)
    2810:	400b      	ands	r3, r1
    2812:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2814:	0011      	movs	r1, r2
    2816:	2280      	movs	r2, #128	; 0x80
    2818:	01d2      	lsls	r2, r2, #7
    281a:	884b      	ldrh	r3, [r1, #2]
    281c:	4213      	tst	r3, r2
    281e:	d1fc      	bne.n	281a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2820:	4906      	ldr	r1, [pc, #24]	; (283c <system_gclk_chan_disable+0x4c>)
    2822:	884a      	ldrh	r2, [r1, #2]
    2824:	0203      	lsls	r3, r0, #8
    2826:	4806      	ldr	r0, [pc, #24]	; (2840 <system_gclk_chan_disable+0x50>)
    2828:	4002      	ands	r2, r0
    282a:	4313      	orrs	r3, r2
    282c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    282e:	4b06      	ldr	r3, [pc, #24]	; (2848 <system_gclk_chan_disable+0x58>)
    2830:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2832:	bd10      	pop	{r4, pc}
    2834:	00002399 	.word	0x00002399
    2838:	40000c02 	.word	0x40000c02
    283c:	40000c00 	.word	0x40000c00
    2840:	fffff0ff 	.word	0xfffff0ff
    2844:	ffffbfff 	.word	0xffffbfff
    2848:	000023d9 	.word	0x000023d9

0000284c <system_gclk_chan_set_config>:
{
    284c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    284e:	780c      	ldrb	r4, [r1, #0]
    2850:	0224      	lsls	r4, r4, #8
    2852:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2854:	4b02      	ldr	r3, [pc, #8]	; (2860 <system_gclk_chan_set_config+0x14>)
    2856:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2858:	b2a4      	uxth	r4, r4
    285a:	4b02      	ldr	r3, [pc, #8]	; (2864 <system_gclk_chan_set_config+0x18>)
    285c:	805c      	strh	r4, [r3, #2]
}
    285e:	bd10      	pop	{r4, pc}
    2860:	000027f1 	.word	0x000027f1
    2864:	40000c00 	.word	0x40000c00

00002868 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2868:	b510      	push	{r4, lr}
    286a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    286c:	4b06      	ldr	r3, [pc, #24]	; (2888 <system_gclk_chan_get_hz+0x20>)
    286e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2870:	4b06      	ldr	r3, [pc, #24]	; (288c <system_gclk_chan_get_hz+0x24>)
    2872:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2874:	4b06      	ldr	r3, [pc, #24]	; (2890 <system_gclk_chan_get_hz+0x28>)
    2876:	885c      	ldrh	r4, [r3, #2]
    2878:	0524      	lsls	r4, r4, #20
    287a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    287c:	4b05      	ldr	r3, [pc, #20]	; (2894 <system_gclk_chan_get_hz+0x2c>)
    287e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2880:	0020      	movs	r0, r4
    2882:	4b05      	ldr	r3, [pc, #20]	; (2898 <system_gclk_chan_get_hz+0x30>)
    2884:	4798      	blx	r3
}
    2886:	bd10      	pop	{r4, pc}
    2888:	00002399 	.word	0x00002399
    288c:	40000c02 	.word	0x40000c02
    2890:	40000c00 	.word	0x40000c00
    2894:	000023d9 	.word	0x000023d9
    2898:	00002735 	.word	0x00002735

0000289c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    289c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    289e:	78d3      	ldrb	r3, [r2, #3]
    28a0:	2b00      	cmp	r3, #0
    28a2:	d135      	bne.n	2910 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    28a4:	7813      	ldrb	r3, [r2, #0]
    28a6:	2b80      	cmp	r3, #128	; 0x80
    28a8:	d029      	beq.n	28fe <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    28aa:	061b      	lsls	r3, r3, #24
    28ac:	2480      	movs	r4, #128	; 0x80
    28ae:	0264      	lsls	r4, r4, #9
    28b0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    28b2:	7854      	ldrb	r4, [r2, #1]
    28b4:	2502      	movs	r5, #2
    28b6:	43ac      	bics	r4, r5
    28b8:	d106      	bne.n	28c8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    28ba:	7894      	ldrb	r4, [r2, #2]
    28bc:	2c00      	cmp	r4, #0
    28be:	d120      	bne.n	2902 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    28c0:	2480      	movs	r4, #128	; 0x80
    28c2:	02a4      	lsls	r4, r4, #10
    28c4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    28c6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    28c8:	7854      	ldrb	r4, [r2, #1]
    28ca:	3c01      	subs	r4, #1
    28cc:	2c01      	cmp	r4, #1
    28ce:	d91c      	bls.n	290a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    28d0:	040d      	lsls	r5, r1, #16
    28d2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    28d4:	24a0      	movs	r4, #160	; 0xa0
    28d6:	05e4      	lsls	r4, r4, #23
    28d8:	432c      	orrs	r4, r5
    28da:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28dc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    28de:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    28e0:	24d0      	movs	r4, #208	; 0xd0
    28e2:	0624      	lsls	r4, r4, #24
    28e4:	432c      	orrs	r4, r5
    28e6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    28e8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    28ea:	78d4      	ldrb	r4, [r2, #3]
    28ec:	2c00      	cmp	r4, #0
    28ee:	d122      	bne.n	2936 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    28f0:	035b      	lsls	r3, r3, #13
    28f2:	d51c      	bpl.n	292e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    28f4:	7893      	ldrb	r3, [r2, #2]
    28f6:	2b01      	cmp	r3, #1
    28f8:	d01e      	beq.n	2938 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    28fa:	6141      	str	r1, [r0, #20]
    28fc:	e017      	b.n	292e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    28fe:	2300      	movs	r3, #0
    2900:	e7d7      	b.n	28b2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2902:	24c0      	movs	r4, #192	; 0xc0
    2904:	02e4      	lsls	r4, r4, #11
    2906:	4323      	orrs	r3, r4
    2908:	e7dd      	b.n	28c6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    290a:	4c0d      	ldr	r4, [pc, #52]	; (2940 <_system_pinmux_config+0xa4>)
    290c:	4023      	ands	r3, r4
    290e:	e7df      	b.n	28d0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2910:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2912:	040c      	lsls	r4, r1, #16
    2914:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2916:	23a0      	movs	r3, #160	; 0xa0
    2918:	05db      	lsls	r3, r3, #23
    291a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    291c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    291e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2920:	23d0      	movs	r3, #208	; 0xd0
    2922:	061b      	lsls	r3, r3, #24
    2924:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2926:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2928:	78d3      	ldrb	r3, [r2, #3]
    292a:	2b00      	cmp	r3, #0
    292c:	d103      	bne.n	2936 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    292e:	7853      	ldrb	r3, [r2, #1]
    2930:	3b01      	subs	r3, #1
    2932:	2b01      	cmp	r3, #1
    2934:	d902      	bls.n	293c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2936:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2938:	6181      	str	r1, [r0, #24]
    293a:	e7f8      	b.n	292e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    293c:	6081      	str	r1, [r0, #8]
}
    293e:	e7fa      	b.n	2936 <_system_pinmux_config+0x9a>
    2940:	fffbffff 	.word	0xfffbffff

00002944 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2944:	b510      	push	{r4, lr}
    2946:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2948:	09c1      	lsrs	r1, r0, #7
		return NULL;
    294a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    294c:	2900      	cmp	r1, #0
    294e:	d104      	bne.n	295a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2950:	0943      	lsrs	r3, r0, #5
    2952:	01db      	lsls	r3, r3, #7
    2954:	4905      	ldr	r1, [pc, #20]	; (296c <system_pinmux_pin_set_config+0x28>)
    2956:	468c      	mov	ip, r1
    2958:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    295a:	241f      	movs	r4, #31
    295c:	4020      	ands	r0, r4
    295e:	2101      	movs	r1, #1
    2960:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2962:	0018      	movs	r0, r3
    2964:	4b02      	ldr	r3, [pc, #8]	; (2970 <system_pinmux_pin_set_config+0x2c>)
    2966:	4798      	blx	r3
}
    2968:	bd10      	pop	{r4, pc}
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	41004400 	.word	0x41004400
    2970:	0000289d 	.word	0x0000289d

00002974 <system_pinmux_group_set_output_strength>:
 */
void system_pinmux_group_set_output_strength(
		PortGroup *const port,
		const uint32_t mask,
		const enum system_pinmux_pin_strength mode)
{
    2974:	b5f0      	push	{r4, r5, r6, r7, lr}
    2976:	46c6      	mov	lr, r8
    2978:	b500      	push	{lr}
	Assert(port);

	for (int i = 0; i < 32; i++) {
    297a:	2300      	movs	r3, #0
		if (mask & (1UL << i)) {
    297c:	2601      	movs	r6, #1
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
			} else {
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    297e:	2440      	movs	r4, #64	; 0x40
    2980:	46a0      	mov	r8, r4
				port->PINCFG[i].reg |=  PORT_PINCFG_DRVSTR;
    2982:	46a4      	mov	ip, r4
    2984:	e009      	b.n	299a <system_pinmux_group_set_output_strength+0x26>
    2986:	18c5      	adds	r5, r0, r3
    2988:	3540      	adds	r5, #64	; 0x40
    298a:	782c      	ldrb	r4, [r5, #0]
    298c:	4667      	mov	r7, ip
    298e:	433c      	orrs	r4, r7
    2990:	b2e4      	uxtb	r4, r4
    2992:	702c      	strb	r4, [r5, #0]
	for (int i = 0; i < 32; i++) {
    2994:	3301      	adds	r3, #1
    2996:	2b20      	cmp	r3, #32
    2998:	d00c      	beq.n	29b4 <system_pinmux_group_set_output_strength+0x40>
		if (mask & (1UL << i)) {
    299a:	000c      	movs	r4, r1
    299c:	40dc      	lsrs	r4, r3
    299e:	4226      	tst	r6, r4
    29a0:	d0f8      	beq.n	2994 <system_pinmux_group_set_output_strength+0x20>
			if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    29a2:	2a01      	cmp	r2, #1
    29a4:	d0ef      	beq.n	2986 <system_pinmux_group_set_output_strength+0x12>
				port->PINCFG[i].reg &= ~PORT_PINCFG_DRVSTR;
    29a6:	18c4      	adds	r4, r0, r3
    29a8:	3440      	adds	r4, #64	; 0x40
    29aa:	7825      	ldrb	r5, [r4, #0]
    29ac:	4647      	mov	r7, r8
    29ae:	43bd      	bics	r5, r7
    29b0:	7025      	strb	r5, [r4, #0]
    29b2:	e7ef      	b.n	2994 <system_pinmux_group_set_output_strength+0x20>
			}
		}
	}
}
    29b4:	bc04      	pop	{r2}
    29b6:	4690      	mov	r8, r2
    29b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000029ba <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    29ba:	4770      	bx	lr

000029bc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    29bc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    29be:	4b05      	ldr	r3, [pc, #20]	; (29d4 <system_init+0x18>)
    29c0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    29c2:	4b05      	ldr	r3, [pc, #20]	; (29d8 <system_init+0x1c>)
    29c4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    29c6:	4b05      	ldr	r3, [pc, #20]	; (29dc <system_init+0x20>)
    29c8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    29ca:	4b05      	ldr	r3, [pc, #20]	; (29e0 <system_init+0x24>)
    29cc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    29ce:	4b05      	ldr	r3, [pc, #20]	; (29e4 <system_init+0x28>)
    29d0:	4798      	blx	r3
}
    29d2:	bd10      	pop	{r4, pc}
    29d4:	0000257d 	.word	0x0000257d
    29d8:	00002395 	.word	0x00002395
    29dc:	000029bb 	.word	0x000029bb
    29e0:	000001c5 	.word	0x000001c5
    29e4:	000029bb 	.word	0x000029bb

000029e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    29e8:	e7fe      	b.n	29e8 <Dummy_Handler>
	...

000029ec <Reset_Handler>:
{
    29ec:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    29ee:	4a26      	ldr	r2, [pc, #152]	; (2a88 <Reset_Handler+0x9c>)
    29f0:	4b26      	ldr	r3, [pc, #152]	; (2a8c <Reset_Handler+0xa0>)
    29f2:	429a      	cmp	r2, r3
    29f4:	d011      	beq.n	2a1a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    29f6:	001a      	movs	r2, r3
    29f8:	4b25      	ldr	r3, [pc, #148]	; (2a90 <Reset_Handler+0xa4>)
    29fa:	429a      	cmp	r2, r3
    29fc:	d20d      	bcs.n	2a1a <Reset_Handler+0x2e>
    29fe:	4a25      	ldr	r2, [pc, #148]	; (2a94 <Reset_Handler+0xa8>)
    2a00:	3303      	adds	r3, #3
    2a02:	1a9b      	subs	r3, r3, r2
    2a04:	089b      	lsrs	r3, r3, #2
    2a06:	3301      	adds	r3, #1
    2a08:	009b      	lsls	r3, r3, #2
    2a0a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2a0c:	481f      	ldr	r0, [pc, #124]	; (2a8c <Reset_Handler+0xa0>)
    2a0e:	491e      	ldr	r1, [pc, #120]	; (2a88 <Reset_Handler+0x9c>)
    2a10:	588c      	ldr	r4, [r1, r2]
    2a12:	5084      	str	r4, [r0, r2]
    2a14:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2a16:	429a      	cmp	r2, r3
    2a18:	d1fa      	bne.n	2a10 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2a1a:	4a1f      	ldr	r2, [pc, #124]	; (2a98 <Reset_Handler+0xac>)
    2a1c:	4b1f      	ldr	r3, [pc, #124]	; (2a9c <Reset_Handler+0xb0>)
    2a1e:	429a      	cmp	r2, r3
    2a20:	d20a      	bcs.n	2a38 <Reset_Handler+0x4c>
    2a22:	43d3      	mvns	r3, r2
    2a24:	491d      	ldr	r1, [pc, #116]	; (2a9c <Reset_Handler+0xb0>)
    2a26:	185b      	adds	r3, r3, r1
    2a28:	2103      	movs	r1, #3
    2a2a:	438b      	bics	r3, r1
    2a2c:	3304      	adds	r3, #4
    2a2e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2a30:	2100      	movs	r1, #0
    2a32:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2a34:	4293      	cmp	r3, r2
    2a36:	d1fc      	bne.n	2a32 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2a38:	4a19      	ldr	r2, [pc, #100]	; (2aa0 <Reset_Handler+0xb4>)
    2a3a:	21ff      	movs	r1, #255	; 0xff
    2a3c:	4b19      	ldr	r3, [pc, #100]	; (2aa4 <Reset_Handler+0xb8>)
    2a3e:	438b      	bics	r3, r1
    2a40:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2a42:	39fd      	subs	r1, #253	; 0xfd
    2a44:	2390      	movs	r3, #144	; 0x90
    2a46:	005b      	lsls	r3, r3, #1
    2a48:	4a17      	ldr	r2, [pc, #92]	; (2aa8 <Reset_Handler+0xbc>)
    2a4a:	50d1      	str	r1, [r2, r3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2a4c:	4b17      	ldr	r3, [pc, #92]	; (2aac <Reset_Handler+0xc0>)
    2a4e:	7b9a      	ldrb	r2, [r3, #14]
    2a50:	312e      	adds	r1, #46	; 0x2e
    2a52:	438a      	bics	r2, r1
    2a54:	2120      	movs	r1, #32
    2a56:	430a      	orrs	r2, r1
    2a58:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2a5a:	7b9a      	ldrb	r2, [r3, #14]
    2a5c:	210c      	movs	r1, #12
    2a5e:	438a      	bics	r2, r1
    2a60:	2108      	movs	r1, #8
    2a62:	430a      	orrs	r2, r1
    2a64:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2a66:	7b9a      	ldrb	r2, [r3, #14]
    2a68:	2103      	movs	r1, #3
    2a6a:	438a      	bics	r2, r1
    2a6c:	2102      	movs	r1, #2
    2a6e:	430a      	orrs	r2, r1
    2a70:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2a72:	4a0f      	ldr	r2, [pc, #60]	; (2ab0 <Reset_Handler+0xc4>)
    2a74:	6853      	ldr	r3, [r2, #4]
    2a76:	2180      	movs	r1, #128	; 0x80
    2a78:	430b      	orrs	r3, r1
    2a7a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2a7c:	4b0d      	ldr	r3, [pc, #52]	; (2ab4 <Reset_Handler+0xc8>)
    2a7e:	4798      	blx	r3
        main();
    2a80:	4b0d      	ldr	r3, [pc, #52]	; (2ab8 <Reset_Handler+0xcc>)
    2a82:	4798      	blx	r3
    2a84:	e7fe      	b.n	2a84 <Reset_Handler+0x98>
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	00002d70 	.word	0x00002d70
    2a8c:	20000000 	.word	0x20000000
    2a90:	2000000c 	.word	0x2000000c
    2a94:	20000004 	.word	0x20000004
    2a98:	2000000c 	.word	0x2000000c
    2a9c:	200002ac 	.word	0x200002ac
    2aa0:	e000ed00 	.word	0xe000ed00
    2aa4:	00000000 	.word	0x00000000
    2aa8:	41007000 	.word	0x41007000
    2aac:	41004800 	.word	0x41004800
    2ab0:	41004000 	.word	0x41004000
    2ab4:	00002c7d 	.word	0x00002c7d
    2ab8:	00002abd 	.word	0x00002abd

00002abc <main>:
volatile uint8_t serial_timeout_count = 0;
volatile bool serial_timeout = false;
volatile uint8_t count_broadcast = 0;

int main (void)
{
    2abc:	b510      	push	{r4, lr}
	system_init();
    2abe:	4b0a      	ldr	r3, [pc, #40]	; (2ae8 <main+0x2c>)
    2ac0:	4798      	blx	r3
	power_button_init();
    2ac2:	4b0a      	ldr	r3, [pc, #40]	; (2aec <main+0x30>)
    2ac4:	4798      	blx	r3
	delay_init();
    2ac6:	4b0a      	ldr	r3, [pc, #40]	; (2af0 <main+0x34>)
    2ac8:	4798      	blx	r3
	//delay_cycles_ms(4000);
	ORB_init();
    2aca:	4b0a      	ldr	r3, [pc, #40]	; (2af4 <main+0x38>)
    2acc:	4798      	blx	r3
	configure_motors();
    2ace:	4b0a      	ldr	r3, [pc, #40]	; (2af8 <main+0x3c>)
    2ad0:	4798      	blx	r3
	configure_ultrasound();
    2ad2:	4b0a      	ldr	r3, [pc, #40]	; (2afc <main+0x40>)
    2ad4:	4798      	blx	r3
	serial_init();
    2ad6:	4b0a      	ldr	r3, [pc, #40]	; (2b00 <main+0x44>)
    2ad8:	4798      	blx	r3
	enable_USART();
    2ada:	4b0a      	ldr	r3, [pc, #40]	; (2b04 <main+0x48>)
    2adc:	4798      	blx	r3
	enable_ORB();
    2ade:	4b0a      	ldr	r3, [pc, #40]	; (2b08 <main+0x4c>)
    2ae0:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{ 
		serial_main_loop_1();
    2ae2:	4c0a      	ldr	r4, [pc, #40]	; (2b0c <main+0x50>)
    2ae4:	47a0      	blx	r4
    2ae6:	e7fd      	b.n	2ae4 <main+0x28>
    2ae8:	000029bd 	.word	0x000029bd
    2aec:	000018c9 	.word	0x000018c9
    2af0:	000015f5 	.word	0x000015f5
    2af4:	00001d85 	.word	0x00001d85
    2af8:	0000189d 	.word	0x0000189d
    2afc:	00002379 	.word	0x00002379
    2b00:	00001f31 	.word	0x00001f31
    2b04:	00001f0d 	.word	0x00001f0d
    2b08:	00001cc9 	.word	0x00001cc9
    2b0c:	00001f95 	.word	0x00001f95

00002b10 <__udivsi3>:
    2b10:	2200      	movs	r2, #0
    2b12:	0843      	lsrs	r3, r0, #1
    2b14:	428b      	cmp	r3, r1
    2b16:	d374      	bcc.n	2c02 <__udivsi3+0xf2>
    2b18:	0903      	lsrs	r3, r0, #4
    2b1a:	428b      	cmp	r3, r1
    2b1c:	d35f      	bcc.n	2bde <__udivsi3+0xce>
    2b1e:	0a03      	lsrs	r3, r0, #8
    2b20:	428b      	cmp	r3, r1
    2b22:	d344      	bcc.n	2bae <__udivsi3+0x9e>
    2b24:	0b03      	lsrs	r3, r0, #12
    2b26:	428b      	cmp	r3, r1
    2b28:	d328      	bcc.n	2b7c <__udivsi3+0x6c>
    2b2a:	0c03      	lsrs	r3, r0, #16
    2b2c:	428b      	cmp	r3, r1
    2b2e:	d30d      	bcc.n	2b4c <__udivsi3+0x3c>
    2b30:	22ff      	movs	r2, #255	; 0xff
    2b32:	0209      	lsls	r1, r1, #8
    2b34:	ba12      	rev	r2, r2
    2b36:	0c03      	lsrs	r3, r0, #16
    2b38:	428b      	cmp	r3, r1
    2b3a:	d302      	bcc.n	2b42 <__udivsi3+0x32>
    2b3c:	1212      	asrs	r2, r2, #8
    2b3e:	0209      	lsls	r1, r1, #8
    2b40:	d065      	beq.n	2c0e <__udivsi3+0xfe>
    2b42:	0b03      	lsrs	r3, r0, #12
    2b44:	428b      	cmp	r3, r1
    2b46:	d319      	bcc.n	2b7c <__udivsi3+0x6c>
    2b48:	e000      	b.n	2b4c <__udivsi3+0x3c>
    2b4a:	0a09      	lsrs	r1, r1, #8
    2b4c:	0bc3      	lsrs	r3, r0, #15
    2b4e:	428b      	cmp	r3, r1
    2b50:	d301      	bcc.n	2b56 <__udivsi3+0x46>
    2b52:	03cb      	lsls	r3, r1, #15
    2b54:	1ac0      	subs	r0, r0, r3
    2b56:	4152      	adcs	r2, r2
    2b58:	0b83      	lsrs	r3, r0, #14
    2b5a:	428b      	cmp	r3, r1
    2b5c:	d301      	bcc.n	2b62 <__udivsi3+0x52>
    2b5e:	038b      	lsls	r3, r1, #14
    2b60:	1ac0      	subs	r0, r0, r3
    2b62:	4152      	adcs	r2, r2
    2b64:	0b43      	lsrs	r3, r0, #13
    2b66:	428b      	cmp	r3, r1
    2b68:	d301      	bcc.n	2b6e <__udivsi3+0x5e>
    2b6a:	034b      	lsls	r3, r1, #13
    2b6c:	1ac0      	subs	r0, r0, r3
    2b6e:	4152      	adcs	r2, r2
    2b70:	0b03      	lsrs	r3, r0, #12
    2b72:	428b      	cmp	r3, r1
    2b74:	d301      	bcc.n	2b7a <__udivsi3+0x6a>
    2b76:	030b      	lsls	r3, r1, #12
    2b78:	1ac0      	subs	r0, r0, r3
    2b7a:	4152      	adcs	r2, r2
    2b7c:	0ac3      	lsrs	r3, r0, #11
    2b7e:	428b      	cmp	r3, r1
    2b80:	d301      	bcc.n	2b86 <__udivsi3+0x76>
    2b82:	02cb      	lsls	r3, r1, #11
    2b84:	1ac0      	subs	r0, r0, r3
    2b86:	4152      	adcs	r2, r2
    2b88:	0a83      	lsrs	r3, r0, #10
    2b8a:	428b      	cmp	r3, r1
    2b8c:	d301      	bcc.n	2b92 <__udivsi3+0x82>
    2b8e:	028b      	lsls	r3, r1, #10
    2b90:	1ac0      	subs	r0, r0, r3
    2b92:	4152      	adcs	r2, r2
    2b94:	0a43      	lsrs	r3, r0, #9
    2b96:	428b      	cmp	r3, r1
    2b98:	d301      	bcc.n	2b9e <__udivsi3+0x8e>
    2b9a:	024b      	lsls	r3, r1, #9
    2b9c:	1ac0      	subs	r0, r0, r3
    2b9e:	4152      	adcs	r2, r2
    2ba0:	0a03      	lsrs	r3, r0, #8
    2ba2:	428b      	cmp	r3, r1
    2ba4:	d301      	bcc.n	2baa <__udivsi3+0x9a>
    2ba6:	020b      	lsls	r3, r1, #8
    2ba8:	1ac0      	subs	r0, r0, r3
    2baa:	4152      	adcs	r2, r2
    2bac:	d2cd      	bcs.n	2b4a <__udivsi3+0x3a>
    2bae:	09c3      	lsrs	r3, r0, #7
    2bb0:	428b      	cmp	r3, r1
    2bb2:	d301      	bcc.n	2bb8 <__udivsi3+0xa8>
    2bb4:	01cb      	lsls	r3, r1, #7
    2bb6:	1ac0      	subs	r0, r0, r3
    2bb8:	4152      	adcs	r2, r2
    2bba:	0983      	lsrs	r3, r0, #6
    2bbc:	428b      	cmp	r3, r1
    2bbe:	d301      	bcc.n	2bc4 <__udivsi3+0xb4>
    2bc0:	018b      	lsls	r3, r1, #6
    2bc2:	1ac0      	subs	r0, r0, r3
    2bc4:	4152      	adcs	r2, r2
    2bc6:	0943      	lsrs	r3, r0, #5
    2bc8:	428b      	cmp	r3, r1
    2bca:	d301      	bcc.n	2bd0 <__udivsi3+0xc0>
    2bcc:	014b      	lsls	r3, r1, #5
    2bce:	1ac0      	subs	r0, r0, r3
    2bd0:	4152      	adcs	r2, r2
    2bd2:	0903      	lsrs	r3, r0, #4
    2bd4:	428b      	cmp	r3, r1
    2bd6:	d301      	bcc.n	2bdc <__udivsi3+0xcc>
    2bd8:	010b      	lsls	r3, r1, #4
    2bda:	1ac0      	subs	r0, r0, r3
    2bdc:	4152      	adcs	r2, r2
    2bde:	08c3      	lsrs	r3, r0, #3
    2be0:	428b      	cmp	r3, r1
    2be2:	d301      	bcc.n	2be8 <__udivsi3+0xd8>
    2be4:	00cb      	lsls	r3, r1, #3
    2be6:	1ac0      	subs	r0, r0, r3
    2be8:	4152      	adcs	r2, r2
    2bea:	0883      	lsrs	r3, r0, #2
    2bec:	428b      	cmp	r3, r1
    2bee:	d301      	bcc.n	2bf4 <__udivsi3+0xe4>
    2bf0:	008b      	lsls	r3, r1, #2
    2bf2:	1ac0      	subs	r0, r0, r3
    2bf4:	4152      	adcs	r2, r2
    2bf6:	0843      	lsrs	r3, r0, #1
    2bf8:	428b      	cmp	r3, r1
    2bfa:	d301      	bcc.n	2c00 <__udivsi3+0xf0>
    2bfc:	004b      	lsls	r3, r1, #1
    2bfe:	1ac0      	subs	r0, r0, r3
    2c00:	4152      	adcs	r2, r2
    2c02:	1a41      	subs	r1, r0, r1
    2c04:	d200      	bcs.n	2c08 <__udivsi3+0xf8>
    2c06:	4601      	mov	r1, r0
    2c08:	4152      	adcs	r2, r2
    2c0a:	4610      	mov	r0, r2
    2c0c:	4770      	bx	lr
    2c0e:	e7ff      	b.n	2c10 <__udivsi3+0x100>
    2c10:	b501      	push	{r0, lr}
    2c12:	2000      	movs	r0, #0
    2c14:	f000 f806 	bl	2c24 <__aeabi_idiv0>
    2c18:	bd02      	pop	{r1, pc}
    2c1a:	46c0      	nop			; (mov r8, r8)

00002c1c <__aeabi_uidivmod>:
    2c1c:	2900      	cmp	r1, #0
    2c1e:	d0f7      	beq.n	2c10 <__udivsi3+0x100>
    2c20:	e776      	b.n	2b10 <__udivsi3>
    2c22:	4770      	bx	lr

00002c24 <__aeabi_idiv0>:
    2c24:	4770      	bx	lr
    2c26:	46c0      	nop			; (mov r8, r8)

00002c28 <__aeabi_lmul>:
    2c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2a:	46ce      	mov	lr, r9
    2c2c:	4647      	mov	r7, r8
    2c2e:	0415      	lsls	r5, r2, #16
    2c30:	0c2d      	lsrs	r5, r5, #16
    2c32:	002e      	movs	r6, r5
    2c34:	b580      	push	{r7, lr}
    2c36:	0407      	lsls	r7, r0, #16
    2c38:	0c14      	lsrs	r4, r2, #16
    2c3a:	0c3f      	lsrs	r7, r7, #16
    2c3c:	4699      	mov	r9, r3
    2c3e:	0c03      	lsrs	r3, r0, #16
    2c40:	437e      	muls	r6, r7
    2c42:	435d      	muls	r5, r3
    2c44:	4367      	muls	r7, r4
    2c46:	4363      	muls	r3, r4
    2c48:	197f      	adds	r7, r7, r5
    2c4a:	0c34      	lsrs	r4, r6, #16
    2c4c:	19e4      	adds	r4, r4, r7
    2c4e:	469c      	mov	ip, r3
    2c50:	42a5      	cmp	r5, r4
    2c52:	d903      	bls.n	2c5c <__aeabi_lmul+0x34>
    2c54:	2380      	movs	r3, #128	; 0x80
    2c56:	025b      	lsls	r3, r3, #9
    2c58:	4698      	mov	r8, r3
    2c5a:	44c4      	add	ip, r8
    2c5c:	464b      	mov	r3, r9
    2c5e:	4351      	muls	r1, r2
    2c60:	4343      	muls	r3, r0
    2c62:	0436      	lsls	r6, r6, #16
    2c64:	0c36      	lsrs	r6, r6, #16
    2c66:	0c25      	lsrs	r5, r4, #16
    2c68:	0424      	lsls	r4, r4, #16
    2c6a:	4465      	add	r5, ip
    2c6c:	19a4      	adds	r4, r4, r6
    2c6e:	1859      	adds	r1, r3, r1
    2c70:	1949      	adds	r1, r1, r5
    2c72:	0020      	movs	r0, r4
    2c74:	bc0c      	pop	{r2, r3}
    2c76:	4690      	mov	r8, r2
    2c78:	4699      	mov	r9, r3
    2c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002c7c <__libc_init_array>:
    2c7c:	b570      	push	{r4, r5, r6, lr}
    2c7e:	2600      	movs	r6, #0
    2c80:	4d0c      	ldr	r5, [pc, #48]	; (2cb4 <__libc_init_array+0x38>)
    2c82:	4c0d      	ldr	r4, [pc, #52]	; (2cb8 <__libc_init_array+0x3c>)
    2c84:	1b64      	subs	r4, r4, r5
    2c86:	10a4      	asrs	r4, r4, #2
    2c88:	42a6      	cmp	r6, r4
    2c8a:	d109      	bne.n	2ca0 <__libc_init_array+0x24>
    2c8c:	2600      	movs	r6, #0
    2c8e:	f000 f85f 	bl	2d50 <_init>
    2c92:	4d0a      	ldr	r5, [pc, #40]	; (2cbc <__libc_init_array+0x40>)
    2c94:	4c0a      	ldr	r4, [pc, #40]	; (2cc0 <__libc_init_array+0x44>)
    2c96:	1b64      	subs	r4, r4, r5
    2c98:	10a4      	asrs	r4, r4, #2
    2c9a:	42a6      	cmp	r6, r4
    2c9c:	d105      	bne.n	2caa <__libc_init_array+0x2e>
    2c9e:	bd70      	pop	{r4, r5, r6, pc}
    2ca0:	00b3      	lsls	r3, r6, #2
    2ca2:	58eb      	ldr	r3, [r5, r3]
    2ca4:	4798      	blx	r3
    2ca6:	3601      	adds	r6, #1
    2ca8:	e7ee      	b.n	2c88 <__libc_init_array+0xc>
    2caa:	00b3      	lsls	r3, r6, #2
    2cac:	58eb      	ldr	r3, [r5, r3]
    2cae:	4798      	blx	r3
    2cb0:	3601      	adds	r6, #1
    2cb2:	e7f2      	b.n	2c9a <__libc_init_array+0x1e>
    2cb4:	00002d5c 	.word	0x00002d5c
    2cb8:	00002d5c 	.word	0x00002d5c
    2cbc:	00002d5c 	.word	0x00002d5c
    2cc0:	00002d60 	.word	0x00002d60
    2cc4:	42000800 	.word	0x42000800
    2cc8:	42000c00 	.word	0x42000c00
    2ccc:	42001000 	.word	0x42001000

00002cd0 <_tcc_intflag>:
    2cd0:	00000001 00000002 00000004 00000008     ................
    2ce0:	00001000 00002000 00004000 00008000     ..... ...@......
    2cf0:	00010000 00020000 00040000 00080000     ................

00002d00 <tc_interrupt_vectors.11931>:
    2d00:	00000e0d                                ....

00002d04 <tc_interrupt_vectors.11931>:
    2d04:	00000e0d 0000241a 00002416 00002416     .....$...$...$..
    2d14:	00002478 00002478 0000242e 00002420     x$..x$...$.. $..
    2d24:	00002434 00002466 00002500 000024e0     4$..f$...%...$..
    2d34:	000024e0 0000256c 000024f2 0000250e     .$..l%...$...%..
    2d44:	000024e4 0000251c 0000255c              .$...%..\%..

00002d50 <_init>:
    2d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d56:	bc08      	pop	{r3}
    2d58:	469e      	mov	lr, r3
    2d5a:	4770      	bx	lr

00002d5c <__init_array_start>:
    2d5c:	000000b5 	.word	0x000000b5

00002d60 <_fini>:
    2d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d66:	bc08      	pop	{r3}
    2d68:	469e      	mov	lr, r3
    2d6a:	4770      	bx	lr

00002d6c <__fini_array_start>:
    2d6c:	0000008d 	.word	0x0000008d
